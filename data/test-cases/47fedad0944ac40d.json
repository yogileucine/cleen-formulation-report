{"uid":"47fedad0944ac40d","name":"Create Protocol for microbial residue verification for split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_protocol_microbial_residue_verification_direct_indirect_fungal_custom_bacterial_bop","historyId":"e549cf85665ce5130ae35a9b7cb7c52b","time":{"start":1707799821684,"stop":1707799824554,"duration":2870},"description":"This test case tests API to Create Protocol microbial residue verification for split when select custom for fungal and based on policy for bacterial of direct/indirect","descriptionHtml":"<p>This test case tests API to Create Protocol microbial residue verification for split when select custom for fungal and based on policy for bacterial of direct/indirect</p>\n","status":"failed","statusMessage":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002681977D090>\n\n    @allure.title(\"Create Protocol for microbial residue verification for split\")\n    @allure.description(\"This test case tests API to Create Protocol microbial residue verification for split \"\n                        \"when select custom for fungal and based on policy for bacterial of direct/indirect\")\n    @allure.link(\"https://app.clickup.com/t/86cuhb4ra\")\n    @pytest.mark.formulation\n    @pytest.mark.create_protocol_microbial_residue_verification_direct_indirect_fungal_custom_bacterial_bop\n    def test_create_protocol_microbial_residue_verification_direct_indirect_fungal_custom_bacterial_bop(self):\n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"bioburden_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_bioburden.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = self.protocol_microbial.get_microbial_custom_direct_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_microbial.CUSTOM_DIRECT_MICROBIAL_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = \\\n            self.protocol_microbial.get_microbial_custom_indirect_contact_surface_area_details(data)[\n                \"response\"]\n        self.protocol_microbial.CUSTOM_INDIRECT_MICROBIAL_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_microbial.custom_direct_update_policy_payload()\n        indirect_equipment = self.protocol_microbial.custom_indirect_update_policy_payload()\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_fungal_policy\": \"custom\", \"direct_bacterial_policy\": \"policyBased\",\n                     \"indirect_fungal_policy\": \"custom\", \"indirect_bacterial_policy\": \"policyBased\"})\n        data.update({\n            \"update_microbial_residue_verification_payload\": update_microbial_residue_verification_fungal_bacterial_payload(\n                data)})\n    \n        updated_data = self.protocol_microbial.update_microbial_residue_verification_protocol(data)[\"response\"]\n        updated_data = json.loads(updated_data)[\"result\"][\"microbialResidueVerification\"]\n        self.protocol_microbial.compare_custom_policy_protocol(updated_data, \"direct\", \"fungal\")\n        self.protocol_microbial.compare_custom_policy_protocol(updated_data, \"indirect\", \"fungal\")\n>       self.protocol_microbial.compare_microbial_limits_split(updated_data, \"direct\", \"bacterial\")\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:3506: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests.unit.protocols.protocol_microbial_residue_verification.ProtocolMicrobialAcceptanceCriteria object at 0x0000026817490050>\ndata = {'direct': {'bacterial': {'equipments': {'115': {'enabled': True, 'perUnitArea': {'unit': 'sqcm', 'value': 6.4516}, 'p...'value': 6.4516}, 'perUnitVolume': {'unit': 'ml', 'value': 1000}, 'rinseLimit': 18.6, ...}, ...}, 'policy': 'custom'}}}\nresponse_type = 'direct', microbial_type = 'bacterial'\n\n    def compare_microbial_limits_split(self, data, response_type, microbial_type):\n        microbial_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy_data = json.loads(microbial_policy)\n    \n        first_response = self.extract_values(policy_data, response_type)\n        second_response = self.get_limits(data, response_type, microbial_type)\n    \n        def extract_microbial_values(response, microbial_type):\n            unclassified_values = response.get('unclassified', {}).get(microbial_type)\n            default_values = response.get('default', {}).get(microbial_type)\n            return unclassified_values or default_values\n    \n        # Extract microbial values from the first response\n        swab_response = first_response.get(f'{response_type.capitalize()} - Swab', {})\n        microbial_swab_first_response = extract_microbial_values(swab_response, microbial_type)\n        per_unit_area_and_volume_first_response = None\n        if microbial_type == \"fungal\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'fungal_per_unit_volume')\n    \n        if microbial_type == \"bacterial\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'bacterial_per_unit_volume')\n    \n        # Extract microbial values from the second response more explicitly\n        second_response_key = list(second_response.keys())[0] if second_response else None\n        microbial_swab_second_response = second_response.get(second_response_key, {}).get('swab_limit', {}).get('value')\n        per_unit_area_and_volume_second_response = second_response.get(second_response_key, {}).get('swab_limit',\n                                                                                                    {}).get(\n            'perUnitArea', {}).get('value')\n    \n        # Compare values with assert statements\n        if microbial_swab_first_response is not None and microbial_swab_second_response is not None:\n            assert microbial_swab_first_response == microbial_swab_second_response, f\"{response_type.capitalize()} Swab {microbial_type.capitalize()} Values Do Not Match\"\n        if per_unit_area_and_volume_first_response is not None and per_unit_area_and_volume_second_response is not None:\n>           assert per_unit_area_and_volume_first_response == per_unit_area_and_volume_second_response, f\"{response_type.capitalize()} Swab perUnitAreaAndVolume Values Do Not Match\"\nE           AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match\n\ntests\\unit\\protocols\\protocol_microbial_residue_verification.py:245: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1707799383384,"stop":1707799383822,"duration":438},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1707799383822,"stop":1707799384622,"duration":800},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_protocol_microbial_residue_verification_direct_indirect_fungal_custom_bacterial_bop"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"20380-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuhb4ra","url":"https://app.clickup.com/t/86cuhb4ra","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","formulation","create_protocol_microbial_residue_verification_direct_indirect_fungal_custom_bacterial_bop"]},"source":"47fedad0944ac40d.json","parameterValues":[]}