{"uid":"236eed38a1e1a98c","name":"Create Protocol and validate cleaning agent residue verification SAL","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_select_cleaning_agent_direct_indirect_surface_area_sqm_sal_unit_mg","historyId":"588951807bc91141570480d6514cb830","time":{"start":1708246645824,"stop":1708246650309,"duration":4485},"description":"This test case tests API to Create Protocol and validate cleaning agent residue verification SAL for based on policy for both direct and indirect when select surface area as sqm and sal mass unit is mg","descriptionHtml":"<p>This test case tests API to Create Protocol and validate cleaning agent residue verification SAL for based on policy for both direct and indirect when select surface area as sqm and sal mass unit is mg</p>\n","status":"failed","statusMessage":"AssertionError: SAL Limits from Excel and Application are not same 10.758 Not Equal 1076883.621","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001ED49556050>\n\n    @allure.title(\"Create Protocol and validate cleaning agent residue verification SAL\")\n    @allure.description(\"This test case tests API to Create Protocol and validate cleaning agent residue verification \"\n                        \"SAL for based on policy for both direct and indirect when select surface area as sqm and \"\n                        \"sal mass unit is mg\")\n    @allure.link(\"https://app.clickup.com/t/86cu8tydk\")\n    @pytest.mark.formulation\n    @pytest.mark.select_cleaning_agent_direct_indirect_surface_area_sqm_sal_unit_mg\n    def test_select_cleaning_agent_direct_indirect_surface_area_sqm_sal_unit_mg(self):\n        cleaning_agent_data = {}\n    \n        cleaning_agent_data.update(self.DEFAULT_SURFACE_AREA_SQM)\n        unit = self.update_default_unit.test_get_default_unit(cleaning_agent_data)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n    \n        if unit != \"sqm\":\n            self.update_default_unit.test_update_default_unit(cleaning_agent_data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n    \n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"cleaning_agent\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n        self.protocol_cleaning_agent.PROTOCOL_CLEANING_AGENT_EQUIPMENT = json.loads(get_equipment)\n        self.protocol_verification.update_inspection_protocol(data)\n        direct_equipments_sal = self.protocol_cleaning_agent.get_cleaning_agent_direct_details_based_on_policy(data)[\n            \"response\"]\n        self.protocol_cleaning_agent.DIRECT_CLEANING_AGENT_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = self.protocol_cleaning_agent.get_cleaning_agent_indirect_details_based_on_policy(data)[\n            \"response\"]\n        self.protocol_cleaning_agent.INDIRECT_CLEANING_AGENT_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_cleaning_agent.direct_cleaning_agent_update_policy_payload()[\"equipments\"]\n        indirect_equipment = self.protocol_cleaning_agent.indirect_cleaning_agent_update_policy_payload()[\"equipments\"]\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_policy\": \"cleaningAgentSal\", \"indirect_policy\": \"policyBased\"})\n        data.update(\n            {\"update_cleaning_agent_residue_verification_payload\": cleaning_agent_residue_verification_payload(data)})\n    \n        self.protocol_cleaning_agent.update_cleaning_agent_residue_verification_protocol(data)\n        columns = [\"cleaning_agent\", \"final_sal_mg_sqm\"]\n>       self.protocol_cleaning_agent.compare_protocols_sal_limits(\n            self.protocol_cleaning_agent.DIRECT_CLEANING_AGENT_EQUIPMENT, columns)\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:865: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\protocols\\protocol_cleaning_agent_criteria.py:148: in compare_protocols_sal_limits\n    compare_chemical(i, j, columns, self.ERROR_MESSAGE)\nutil\\common_methods.py:35: in compare_chemical\n    compare(swab_rinse[i], v, error_message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = 10.758, sal2 = 1076883.621, error_message = 'SAL Limits from Excel and Application are not same'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n                assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\n            else:\n                sal1 = round(sal1, 3)\n                sal2 = round(sal2, 3)\n                tolerance = calculate_tolerance(sal1)\n>               assert abs(sal1 - sal2) < tolerance, error_message + \" \" + str(sal1) + \" Not Equal \" + str(sal2)\nE               AssertionError: SAL Limits from Excel and Application are not same 10.758 Not Equal 1076883.621\n\nutil\\common_methods.py:59: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708246535629,"stop":1708246536176,"duration":547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708246536176,"stop":1708246537058,"duration":882},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"select_cleaning_agent_direct_indirect_surface_area_sqm_sal_unit_mg"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu8tydk","url":"https://app.clickup.com/t/86cu8tydk","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","select_cleaning_agent_direct_indirect_surface_area_sqm_sal_unit_mg","formulation"]},"source":"236eed38a1e1a98c.json","parameterValues":[]}