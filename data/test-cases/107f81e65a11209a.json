{"uid":"107f81e65a11209a","name":"Validate master data snapshot report for Actives","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_master_data_snapshot_report_actives","historyId":"8eadb304aac48e485a1e8b7eba0d0d24","time":{"start":1708231527352,"stop":1708231527528,"duration":176},"description":"This test case test API to validate the master data snapshot report for actives with excel file data","descriptionHtml":"<p>This test case test API to validate the master data snapshot report for actives with excel file data</p>\n","status":"broken","statusMessage":"pandas.errors.ParserError: Defining usecols without of bounds indices is not allowed. [6, 7, 8] are out of bounds. (sheet: api)","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x0000025BB56E9050>\n\n    @allure.title(\"Validate master data snapshot report for Actives\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for actives with excel \"\n                        \"file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9qx36\")\n    @pytest.mark.validate_master_data_snapshot_report_actives\n    def test_validate_master_data_snapshot_report_actives(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"Actives\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"name\": \"Name\", \"ade\": \"ADE (mg)\", \"minTD\": \"Min TD (mg)\", \"maxDD\": \"Max DD (mg)\",\n                               \"minDD\": \"Min DD (mg)\", \"solubilityAF\": \"Solubility\", \"oebRatingAAF\": \"OEB Rating\",\n                               \"isGenotoxic\": \"Is Genotoxic\", \"isSteroidal\": \"Is Steroidal\"}\n    \n>           excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"api\", usecols='A:I', nrows=19)\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:486: in read_excel\n    data = io.parse(\nvenv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:1551: in parse\n    return self._reader.parse(\nvenv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:889: in parse\n    raise err\nvenv\\Lib\\site-packages\\pandas\\io\\excel\\_base.py:851: in parse\n    parser = TextParser(\nvenv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1803: in TextParser\n    return TextFileReader(*args, **kwds)\nvenv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1407: in __init__\n    self._engine = self._make_engine(f, self.engine)\nvenv\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1679: in _make_engine\n    return mapping[engine](f, **self.options)\nvenv\\Lib\\site-packages\\pandas\\io\\parsers\\python_parser.py:124: in __init__\n    ) = self._infer_columns()\nvenv\\Lib\\site-packages\\pandas\\io\\parsers\\python_parser.py:535: in _infer_columns\n    columns = self._handle_usecols(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pandas.io.parsers.python_parser.PythonParser object at 0x0000025BB85821D0>, columns = [['Name', 'ADE (mg)', 'Min TD (mg)', 'Max DD (mg)', 'Min DD (mg)', 'LD50 (mg/kg)']]\nusecols_key = ['Name', 'ADE (mg)', 'Min TD (mg)', 'Max DD (mg)', 'Min DD (mg)', 'LD50 (mg/kg)'], num_original_columns = 6\n\n    def _handle_usecols(\n        self,\n        columns: list[list[Scalar | None]],\n        usecols_key: list[Scalar | None],\n        num_original_columns: int,\n    ) -> list[list[Scalar | None]]:\n        \"\"\"\n        Sets self._col_indices\n    \n        usecols_key is used if there are string usecols.\n        \"\"\"\n        col_indices: set[int] | list[int]\n        if self.usecols is not None:\n            if callable(self.usecols):\n                col_indices = self._evaluate_usecols(self.usecols, usecols_key)\n            elif any(isinstance(u, str) for u in self.usecols):\n                if len(columns) > 1:\n                    raise ValueError(\n                        \"If using multiple headers, usecols must be integers.\"\n                    )\n                col_indices = []\n    \n                for col in self.usecols:\n                    if isinstance(col, str):\n                        try:\n                            col_indices.append(usecols_key.index(col))\n                        except ValueError:\n                            self._validate_usecols_names(self.usecols, usecols_key)\n                    else:\n                        col_indices.append(col)\n            else:\n                missing_usecols = [\n                    col for col in self.usecols if col >= num_original_columns\n                ]\n                if missing_usecols:\n>                   raise ParserError(\n                        \"Defining usecols without of bounds indices is not allowed. \"\n                        f\"{missing_usecols} are out of bounds.\",\n                    )\nE                   pandas.errors.ParserError: Defining usecols without of bounds indices is not allowed. [6, 7, 8] are out of bounds. (sheet: api)\n\nvenv\\Lib\\site-packages\\pandas\\io\\parsers\\python_parser.py:610: ParserError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708231518741,"stop":1708231519164,"duration":423},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708231519165,"stop":1708231520236,"duration":1071},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_master_data_snapshot_report_actives"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"33920-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt9qx36","url":"https://app.clickup.com/t/85zt9qx36","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_master_data_snapshot_report_actives","scenario","run(order=1)","audit_portal_limits","second"]},"source":"107f81e65a11209a.json","parameterValues":[]}