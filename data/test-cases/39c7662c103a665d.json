{"uid":"39c7662c103a665d","name":"Validate master data snapshot report for Products","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_master_data_snapshot_report_products","historyId":"5bce55227f00ea3220136b0a196e4699","time":{"start":1708258245212,"stop":1708258245437,"duration":225},"description":"This test case test API to validate the master data snapshot report for products with excel file data","descriptionHtml":"<p>This test case test API to validate the master data snapshot report for products with excel file data</p>\n","status":"broken","statusMessage":"KeyError: \"['LDD (mg)', 'Unit Weight (mg)'] not in index\"","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x000002B7B5193850>\n\n    @allure.title(\"Validate master data snapshot report for Products\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for products with excel \"\n                        \"file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9r1cd\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_master_data_snapshot_report_products\n    def test_validate_master_data_snapshot_report_products(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"Products\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"apiName\": \"Api Name\", \"cleanabilityAF\": \"Cleanability factor\",\n                               \"formulationAF\": \"Type of Formulation\", \"id\": \"Product Id\", \"ldd\": \"LDD (mg)\",\n                               \"name\": \"Name\", \"productCategoryAF\": \"Product Category\", \"strength\": \"Strength (mg)\",\n                               \"unitWeight\": \"Unit Weight (mg)\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"product\", usecols='A:I', nrows=31)\n            allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df = master_data_snapshot[columns_mapping.keys()]\n>           excel_df = excel_data[columns_mapping.values()]\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\pandas\\core\\frame.py:3767: in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5877: in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Index(['Name', 'Product Id', 'LDD (ml)', 'Unit Weight (ml)', 'Api Name',\n       'Strength (mg)', 'Cleanability factor', 'Product Category',\n       'Type of Formulation'],\n      dtype='object')\nkey = Index(['Api Name', 'Cleanability factor', 'Type of Formulation', 'Product Id',\n       'LDD (mg)', 'Name', 'Product Category', 'Strength (mg)',\n       'Unit Weight (mg)'],\n      dtype='object')\nindexer = array([ 4,  6,  8,  1, -1,  0,  7,  5, -1], dtype=int64), axis_name = 'columns'\n\n    def _raise_if_missing(self, key, indexer, axis_name: str_t) -> None:\n        \"\"\"\n        Check that indexer can be used to return a result.\n    \n        e.g. at least one element was found,\n        unless the list of keys was actually empty.\n    \n        Parameters\n        ----------\n        key : list-like\n            Targeted labels (only used to show correct error message).\n        indexer: array-like of booleans\n            Indices corresponding to the key,\n            (with -1 indicating not found).\n        axis_name : str\n    \n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found.\n        \"\"\"\n        if len(key) == 0:\n            return\n    \n        # Count missing values\n        missing_mask = indexer < 0\n        nmissing = missing_mask.sum()\n    \n        if nmissing:\n            # TODO: remove special-case; this is just to keep exception\n            #  message tests from raising while debugging\n            use_interval_msg = is_interval_dtype(self.dtype) or (\n                is_categorical_dtype(self.dtype)\n                # \"Index\" has no attribute \"categories\"  [attr-defined]\n                and is_interval_dtype(\n                    self.categories.dtype  # type: ignore[attr-defined]\n                )\n            )\n    \n            if nmissing == len(indexer):\n                if use_interval_msg:\n                    key = list(key)\n                raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n    \n            not_found = list(ensure_index(key)[missing_mask.nonzero()[0]].unique())\n>           raise KeyError(f\"{not_found} not in index\")\nE           KeyError: \"['LDD (mg)', 'Unit Weight (mg)'] not in index\"\n\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5941: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708258234523,"stop":1708258234954,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708258234954,"stop":1708258235780,"duration":826},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"This test case test API to validate the master data snapshot report for products with excel file data","status":"broken","statusMessage":"KeyError: \"['LDD (mg)', 'Unit Weight (mg)'] not in index\"","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x000002B7B5193850>\n\n    @allure.title(\"Validate master data snapshot report for Products\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for products with excel \"\n                        \"file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9r1cd\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_master_data_snapshot_report_products\n    def test_validate_master_data_snapshot_report_products(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"Products\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"apiName\": \"Api Name\", \"cleanabilityAF\": \"Cleanability factor\",\n                               \"formulationAF\": \"Type of Formulation\", \"id\": \"Product Id\", \"ldd\": \"LDD (mg)\",\n                               \"name\": \"Name\", \"productCategoryAF\": \"Product Category\", \"strength\": \"Strength (mg)\",\n                               \"unitWeight\": \"Unit Weight (mg)\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"product\", usecols='A:I', nrows=31)\n            allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df = master_data_snapshot[columns_mapping.keys()]\n>           excel_df = excel_data[columns_mapping.values()]\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\pandas\\core\\frame.py:3767: in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5877: in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Index(['Name', 'Product Id', 'LDD (ml)', 'Unit Weight (ml)', 'Api Name',\n       'Strength (mg)', 'Cleanability factor', 'Product Category',\n       'Type of Formulation'],\n      dtype='object')\nkey = Index(['Api Name', 'Cleanability factor', 'Type of Formulation', 'Product Id',\n       'LDD (mg)', 'Name', 'Product Category', 'Strength (mg)',\n       'Unit Weight (mg)'],\n      dtype='object')\nindexer = array([ 4,  6,  8,  1, -1,  0,  7,  5, -1], dtype=int64), axis_name = 'columns'\n\n    def _raise_if_missing(self, key, indexer, axis_name: str_t) -> None:\n        \"\"\"\n        Check that indexer can be used to return a result.\n    \n        e.g. at least one element was found,\n        unless the list of keys was actually empty.\n    \n        Parameters\n        ----------\n        key : list-like\n            Targeted labels (only used to show correct error message).\n        indexer: array-like of booleans\n            Indices corresponding to the key,\n            (with -1 indicating not found).\n        axis_name : str\n    \n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found.\n        \"\"\"\n        if len(key) == 0:\n            return\n    \n        # Count missing values\n        missing_mask = indexer < 0\n        nmissing = missing_mask.sum()\n    \n        if nmissing:\n            # TODO: remove special-case; this is just to keep exception\n            #  message tests from raising while debugging\n            use_interval_msg = is_interval_dtype(self.dtype) or (\n                is_categorical_dtype(self.dtype)\n                # \"Index\" has no attribute \"categories\"  [attr-defined]\n                and is_interval_dtype(\n                    self.categories.dtype  # type: ignore[attr-defined]\n                )\n            )\n    \n            if nmissing == len(indexer):\n                if use_interval_msg:\n                    key = list(key)\n                raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n    \n            not_found = list(ensure_index(key)[missing_mask.nonzero()[0]].unique())\n>           raise KeyError(f\"{not_found} not in index\")\nE           KeyError: \"['LDD (mg)', 'Unit Weight (mg)'] not in index\"\n\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5941: KeyError","steps":[],"attachments":[{"uid":"de619822bdc245b2","name":"excel_data","source":"de619822bdc245b2.html","type":"text/html","size":8947}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"tag","value":"validate_master_data_snapshot_report_products"},{"name":"tag","value":"formulation"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"12592-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt9r1cd","url":"https://app.clickup.com/t/85zt9r1cd","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_master_data_snapshot_report_products","scenario","run(order=1)","formulation","audit_portal_limits","second"]},"source":"39c7662c103a665d.json","parameterValues":[]}