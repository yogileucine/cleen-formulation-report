{"uid":"d895fd308cc4bd34","name":"Test the swab & rinse limit of Nitrosamine map to production","fullName":"tests.scenarios.test_nitrosamine_chemical_limits.TestNitrosamineChemicalSampleLimit#test_validate_nitrosamine_swab_rinse_sampling_upper_limit_sqm","historyId":"da66578dd95c2129d31d8dace0eaa41e","time":{"start":1708258685465,"stop":1708258689064,"duration":3599},"description":"This test case test the swab & rinse sample limit of Nitrosamine map with production whenupper cap for on sample limit is On & surface area is sqm and volume is L","descriptionHtml":"<p>This test case test the swab &amp; rinse sample limit of Nitrosamine map with production whenupper cap for on sample limit is On &amp; surface area is sqm and volume is L</p>\n","status":"failed","statusMessage":"AssertionError: N2 5.6806e-10 Not Equal 5.6806079e-07","statusTrace":"self = <test_nitrosamine_chemical_limits.TestNitrosamineChemicalSampleLimit object at 0x000002B7B53B0590>\n\n    @allure.title(\"Test the swab & rinse limit of Nitrosamine map to production\")\n    @allure.description(\"This test case test the swab & rinse sample limit of Nitrosamine map with production when\"\n                        \"upper cap for on sample limit is On & surface area is sqm and volume is L\")\n    @allure.link(\"https://app.clickup.com/t/86ctyn4c8\")\n    @pytest.mark.nitrosamine_swab_rinse_limit\n    @pytest.mark.validate_nitrosamine_swab_rinse_sampling_upper_limit_sqm\n    def test_validate_nitrosamine_swab_rinse_sampling_upper_limit_sqm(self):\n        columns = [\"upper_swab_sample_limit\", \"upper_rinse_sample_limit\"]\n        excel_upper_cap_active = Excel.read_excel_columns(const.get_master_data(), \"config\", columns)\n        excel_swab_sampling_limit = excel_upper_cap_active[\"upper_swab_sample_limit\"][0]\n        excel_rinse_sampling_limit = excel_upper_cap_active[\"upper_rinse_sample_limit\"][0]\n        policy_data = {\"useSwabPerSampleLimit\": False, \"useRinsePerSampleLimit\": False, \"rinseSampleUnit\": \"ppm\",\n                       \"swabSampleUnit\": \"ppm\", \"useSampleLimit\": True, \"swabUpperCapActive\": excel_swab_sampling_limit,\n                       \"rinseUpperCapActive\": excel_rinse_sampling_limit}\n        data = {}\n        get_policy = json.loads(self.update_nitrosamine.test_get_nitrosamine_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        rinse_upper_cap_active = get_policy[\"rinseSampleLimit\"]\n        swab_upper_cap_active = get_policy[\"swabSampleLimit\"]\n        update_policy = create_cleaning_limit_policy_nitrosamine_payload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        if get_policy != update_policy[\"data\"] or rinse_upper_cap_active != excel_rinse_sampling_limit \\\n                or swab_upper_cap_active != excel_swab_sampling_limit:\n            self.update_nitrosamine.test_update_nitrosamine_limit_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n        production_id = PRODUCTION_ID\n        for prod in production_id:\n            data.update({\"production_id\": prod})\n            swab_sheet_name = prod.lower() + \"_nitro_swab\"\n            rinse_sheet_name = prod.lower() + \"_nitro_rinse\"\n            swab_columns = [\"Nitrosamine ID\", \"upper_swab_sample_limit\"]\n            rinse_columns = [\"Nitrosamine ID\", \"upper_rinse_sample_limit\"]\n            manually_calculated_swab_limit = self.calculated_chemical_excel(swab_sheet_name, swab_columns)\n            manually_calculated_rinse_limit = self.calculated_chemical_excel(rinse_sheet_name, rinse_columns)\n            data.update({\"production\": prod})\n            swab_limit = self.get_production.get_production_nitrosamine_swab_limit(data)\n            rinse_limit = self.get_production.get_production_nitrosamine_rinse_limit(data)\n>           compare_sal(swab_limit, manually_calculated_swab_limit, swab_columns, self.ERROR_MESSAGE)\n\ntests\\scenarios\\test_nitrosamine_chemical_limits.py:511: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\common_methods.py:22: in compare_sal\n    compare(sal_application[i], n, i)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = 5.6806e-10, sal2 = 5.6806079e-07, error_message = 'N2'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n>               assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\nE               AssertionError: N2 5.6806e-10 Not Equal 5.6806079e-07\n\nutil\\common_methods.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708258234523,"stop":1708258234954,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708258234954,"stop":1708258235780,"duration":826},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"This method will setup the default unit","time":{"start":1708258645007,"stop":1708258649250,"duration":4243},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_nitrosamine_swab_rinse_sampling_upper_limit_sqm"},{"name":"tag","value":"nitrosamine_swab_rinse_limit"},{"name":"tag","value":"nitrosamine_sample_limit"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_nitrosamine_chemical_limits"},{"name":"subSuite","value":"TestNitrosamineChemicalSampleLimit"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"12592-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_nitrosamine_chemical_limits"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86ctyn4c8","url":"https://app.clickup.com/t/86ctyn4c8","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["nitrosamine_swab_rinse_limit","validate_nitrosamine_swab_rinse_sampling_upper_limit_sqm","nitrosamine_sample_limit"]},"source":"d895fd308cc4bd34.json","parameterValues":[]}