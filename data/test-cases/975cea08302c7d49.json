{"uid":"975cea08302c7d49","name":"Create Protocol for bioburden residue verification for non split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_bioburden_residue_verification_protocol_sqin_ml","historyId":"540dec3fdb895ce566c0ec65b06bfab3","time":{"start":1709039235919,"stop":1709039241484,"duration":5565},"description":"This test case tests API to Create Protocol bioburden residue verification for split when select based on policy for fungal & bacterial of direct, and  for bacterial & fungal of Indirect when default surface unit is sqin and volume is ml","descriptionHtml":"<p>This test case tests API to Create Protocol bioburden residue verification for split when select based on policy for fungal &amp; bacterial of direct, and  for bacterial &amp; fungal of Indirect when default surface unit is sqin and volume is ml</p>\n","status":"failed","statusMessage":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002CCA3601050>\n\n    @allure.title(\"Create Protocol for bioburden residue verification for non split\")\n    @allure.description(\"This test case tests API to Create Protocol bioburden residue verification for split \"\n                        \"when select based on policy for fungal & bacterial of direct, and  for bacterial & \"\n                        \"fungal of Indirect when default surface unit is sqin and volume is ml\")\n    @allure.link(\"https://app.clickup.com/t/86cubgm07\")\n    @pytest.mark.formulation\n    @pytest.mark.create_bioburden_residue_verification_protocol_sqin_ml\n    def test_create_bioburden_residue_verification_protocol_sqin_ml(self):\n        bioburden_data = {}\n        bioburden_data.update(self.DEFAULT_SURFACE_AREA_SQIN)\n        unit = self.update_default_unit.test_get_default_unit(bioburden_data)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n        if unit != \"sqin\":\n            self.update_default_unit.test_update_default_unit(bioburden_data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"bioburden_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_bioburden.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = \\\n            self.protocol_bioburden.get_bioburden_direct_contact_surface_area_details(data)[\"response\"]\n        self.protocol_bioburden.DIRECT_BIOBURDEN_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = \\\n            self.protocol_bioburden.get_bioburden_indirect_contact_surface_area_details(data)[\"response\"]\n        self.protocol_bioburden.INDIRECT_BIOBURDEN_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_bioburden.direct_update_policy_payload()\n        indirect_equipment = self.protocol_bioburden.indirect_update_policy_payload()\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_fungal_policy\": \"policyBased\", \"direct_bacterial_policy\": \"policyBased\",\n                     \"indirect_fungal_policy\": \"policyBased\", \"indirect_bacterial_policy\": \"policyBased\"})\n        data.update({\n            \"update_bioburden_residue_verification_payload\": update_bioburden_residue_verification_fungal_bacterial_payload(\n                data)})\n    \n        updated_data = self.protocol_bioburden.update_bioburden_residue_verification_protocol(data)[\"response\"]\n        updated_data = json.loads(updated_data)[\"result\"][\"bioburdenResidueVerification\"]\n>       self.protocol_bioburden.compare_bioburden_limits_split(updated_data, \"direct\", \"fungal\")\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:3144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_bioburden_residue_verification.ProtocolBioburdenAcceptanceCriteria object at 0x000002CCA186B9D0>\ndata = {'direct': {'bacterial': {'equipments': {'54': {'enabled': True, 'perUnitArea': {'unit': 'sqcm', 'value': 8.0000000000...', 'value': 22}, 'perUnitVolume': {'unit': 'ml', 'value': 26}, 'rinseLimit': 34, ...}, ...}, 'policy': 'policyBased'}}}\nresponse_type = 'direct', microbial_type = 'fungal'\n\n    def compare_bioburden_limits_split(self, data, response_type, microbial_type):\n        microbial_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy_data = json.loads(microbial_policy)\n    \n        first_response = self.extract_values(policy_data, response_type)\n        second_response = self.get_limits(data, response_type, microbial_type)\n    \n        def extract_microbial_values(response, microbial_type):\n            unclassified_values = response.get('unclassified', {}).get(microbial_type)\n            default_values = response.get('default', {}).get(microbial_type)\n            return unclassified_values or default_values\n    \n        # Extract microbial values from the first response\n        swab_response = first_response.get(f'{response_type.capitalize()} - Swab', {})\n        microbial_swab_first_response = extract_microbial_values(swab_response, microbial_type)\n        per_unit_area_and_volume_first_response = None\n        if microbial_type == \"fungal\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'fungal_per_unit_volume')\n    \n        if microbial_type == \"bacterial\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'bacterial_per_unit_volume')\n    \n        # Extract microbial values from the second response more explicitly\n        second_response_key = list(second_response.keys())[0] if second_response else None\n        microbial_swab_second_response = second_response.get(second_response_key, {}).get('swab_limit', {}).get('value')\n        per_unit_area_and_volume_second_response = second_response.get(second_response_key, {}).get('swab_limit',\n                                                                                                    {}).get(\n            'perUnitArea', {}).get('value')\n    \n        # Compare values with assert statements\n        if microbial_swab_first_response is not None and microbial_swab_second_response is not None:\n            assert microbial_swab_first_response == microbial_swab_second_response, f\"{response_type.capitalize()} Swab {microbial_type.capitalize()} Values Do Not Match\"\n        if per_unit_area_and_volume_first_response is not None and per_unit_area_and_volume_second_response is not None:\n>           assert per_unit_area_and_volume_first_response == per_unit_area_and_volume_second_response, f\"{response_type.capitalize()} Swab perUnitAreaAndVolume Values Do Not Match\"\nE           AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match\n\ntests\\unit\\protocols\\protocol_bioburden_residue_verification.py:287: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":36,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1709038682534,"stop":1709038683052,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1709038683052,"stop":1709038683859,"duration":807},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_bioburden_residue_verification_protocol_sqin_ml"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cubgm07","url":"https://app.clickup.com/t/86cubgm07","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d7cfb5541ca34f50","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708873358059,"stop":1708873363835,"duration":5776}},{"uid":"1088eacd23903d2f","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708872961548,"stop":1708872961548,"duration":0}},{"uid":"9f4743e08917d76a","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708872541511,"stop":1708872541511,"duration":0}},{"uid":"272889173e4ee842","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708598695485,"stop":1708598708616,"duration":13131}},{"uid":"31518792469fdd35","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708597471179,"stop":1708597471179,"duration":0}},{"uid":"9188a32d679addb","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708596842998,"stop":1708596854969,"duration":11971}},{"uid":"f3253068436a99a5","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595632809,"stop":1708595632809,"duration":0}},{"uid":"abd45cc4ed2d9f38","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595191431,"stop":1708595191431,"duration":0}},{"uid":"b434bf9d513a2e0e","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708589301538,"stop":1708589305294,"duration":3756}},{"uid":"b45f077881078dde","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708587040826,"stop":1708587050015,"duration":9189}},{"uid":"340d8bf975992540","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708586198034,"stop":1708586198034,"duration":0}},{"uid":"1caf8f3e19e20539","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708521281246,"stop":1708521286545,"duration":5299}},{"uid":"ea321c4a62d1d2d","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520657470,"stop":1708520657470,"duration":0}},{"uid":"877441fc2fc99ab6","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520580492,"stop":1708520580492,"duration":0}},{"uid":"2356e3c31c20193c","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708519625630,"stop":1708519630871,"duration":5241}},{"uid":"fb1d7a0ca6d2d770","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708519088704,"stop":1708519088704,"duration":0}},{"uid":"c48dd8a44fe9e1c7","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708519070949,"stop":1708519070949,"duration":0}},{"uid":"e90f6128d9a78b9","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708508758337,"stop":1708508762082,"duration":3745}},{"uid":"33f40596b1e3d95a","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708258550824,"stop":1708258557295,"duration":6471}},{"uid":"6bd9037fd37f6816","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708246741470,"stop":1708246745238,"duration":3768}},{"uid":"89e41cd514770de7","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708241889236,"stop":1708241893451,"duration":4215}},{"uid":"62f60911d70c870f","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708241643895,"stop":1708241643895,"duration":0}},{"uid":"d96c349c2696ef51","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708235045961,"stop":1708235045961,"duration":0}},{"uid":"f2e23891cfbccbaf","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708232037396,"stop":1708232037396,"duration":0}},{"uid":"2ac05aad3a3e3b01","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231704869,"stop":1708231704869,"duration":0}},{"uid":"261be55d06821e77","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231509541,"stop":1708231509541,"duration":0}},{"uid":"643e5eeaf8e82d0b","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707903225283,"stop":1707903229417,"duration":4134}},{"uid":"2ecb2aaa6b17a744","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707816304409,"stop":1707816309173,"duration":4764}},{"uid":"fca227bfd936f3fe","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707801435945,"stop":1707801440029,"duration":4084}},{"uid":"143f5ec3208e5466","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707800941538,"stop":1707800941538,"duration":0}},{"uid":"218d0fd34ca32fad","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707800530561,"stop":1707800535985,"duration":5424}},{"uid":"93905cdf8e8a809a","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707799794825,"stop":1707799799455,"duration":4630}},{"uid":"277b1bb4818dba56","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799372321,"stop":1707799372321,"duration":0}},{"uid":"7935aa77223d1026","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799327170,"stop":1707799327170,"duration":0}},{"uid":"87e57e7089591434","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1707799308245,"stop":1707799308245,"duration":0}},{"uid":"f30ef5e818a39d25","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707719841353,"stop":1707719845234,"duration":3881}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["multi_production_protocol","scenario","create_bioburden_residue_verification_protocol_sqin_ml","formulation"]},"source":"975cea08302c7d49.json","parameterValues":[]}