{"uid":"8617b04dc59d9a9c","name":"Create Protocol and validate active residue verification SAL when surface area unit is sqcm","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_active_residue_direct_indirect_sal_for_mg_sqin","historyId":"a8cfc4a13e25971e6405218ba9d6218b","time":{"start":1708519416714,"stop":1708519422114,"duration":5400},"description":"This test case tests API to Create Protocol and validate active residue verification SAL when surface area unit is sqin and SAL mass unit is mg","descriptionHtml":"<p>This test case tests API to Create Protocol and validate active residue verification SAL when surface area unit is sqin and SAL mass unit is mg</p>\n","status":"broken","statusMessage":"KeyError: 'indirect_policy'","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001B3C4CE84D0>\n\n    @allure.title(\"Create Protocol and validate active residue verification SAL when surface area unit is sqcm\")\n    @allure.description(\"This test case tests API to Create Protocol and validate active residue verification SAL \"\n                        \"when surface area unit is sqin and SAL mass unit is mg\")\n    @allure.link(\"https://app.clickup.com/t/86cu5qcfy\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_active_residue_direct_indirect_sal_for_mg_sqin\n    def test_validate_active_residue_direct_indirect_sal_for_mg_sqin(self):\n        policy_data = {\"useDosage\": True, \"useToxicity\": True, \"useProductLimit\": True, \"useARL\": True,\n                       \"salMassUnit\": \"mg\", \"ignoreCombo\": False}\n        active_data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        sal_unit = get_policy[\"limitRepresentation\"][\"productAndEquipmentLimits\"][\"salMassUnit\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        active_data.update({\"update_policy_payload\": update_policy})\n        update_policy.update(self.DEFAULT_SURFACE_AREA_SQIN)\n    \n        unit = self.update_default_unit.test_get_default_unit(update_policy)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n    \n        if get_policy != update_policy[\"data\"] or sal_unit != \"mg\" or unit != \"sqin\":\n            self.update_default_unit.test_update_default_unit(update_policy)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n    \n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"actives_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n        self.active_criteria.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n        self.protocol_verification.update_inspection_protocol(data)\n        lowest_sal_on_equipment = self.active_criteria.get_active_direct_details_lowest_sal_on_equipment(data)[\n            \"response\"]\n        self.active_criteria.DIRECT_ACTIVE_EQUIPMENT = json.loads(lowest_sal_on_equipment)\n        indirect_active_sal = self.active_criteria.get_active_indirect_contact_surface_area_details(data)[\"response\"]\n        self.active_criteria.INDIRECT_ACTIVE_EQUIPMENT = json.loads(indirect_active_sal)\n        direct_equipment = self.active_criteria.direct_update_policy_payload()[\"equipments\"]\n        indirect_equipment = self.active_criteria.indirect_update_policy_payload()[\"equipments\"]\n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"policy_wise\": \"equipmentWise\"})\n>       data.update({\"update_active_residue_verification_payload\": active_residue_verification_payload(data)})\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:704: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'actives_verification': True, 'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'exte...', 'alertLimitL3': 8.0668927309281, 'amId': '5a3a07bb-6974-4655-b71d-57f4dcdf6afd', 'enabled': True, ...}}}, ...}, ...}\n\n    def active_residue_verification_payload(data):\n        index_counter = 0\n        indirect_counter = 0\n        direct_limit = calculated_sal_excel(sheet_name=\"custom_active\",\n                                            columns=[\"Equipment ID\", \"final_sal_mg_sqcm\"],\n                                            contact_type=\"direct_minimum\")\n    \n        indirect_limit = calculated_sal_excel(sheet_name=\"custom_active\",\n                                              columns=[\"Equipment ID\", \"final_sal_mg_sqcm\"],\n                                              contact_type=\"indirect_minimum\")\n    \n        if data[\"policy_wise\"] == \"custom\":\n            index_counter = 0\n            for equipment in data[\"direct_equipment\"].values():\n                for item in equipment.values():\n                    for obj in item.values():\n                        obj[\"alertLimitL3\"] = direct_limit[\"final_sal_mg_sqcm\"][index_counter]\n                        index_counter += 1\n    \n>       if data[\"indirect_policy\"] == \"custom\":\nE       KeyError: 'indirect_policy'\n\npayload\\facility\\protocol_payload\\on_demand_protocol_payload.py:101: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708519098903,"stop":1708519099306,"duration":403},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708519099306,"stop":1708519100173,"duration":867},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_active_residue_direct_indirect_sal_for_mg_sqin"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"26164-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu5qcfy","url":"https://app.clickup.com/t/86cu5qcfy","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_active_residue_direct_indirect_sal_for_mg_sqin","multi_production_protocol","scenario","formulation"]},"source":"8617b04dc59d9a9c.json","parameterValues":[]}