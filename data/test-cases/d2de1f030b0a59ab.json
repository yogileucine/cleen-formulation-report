{"uid":"d2de1f030b0a59ab","name":"Test the swab & rinse limit of equipment map to production","fullName":"tests.scenarios.test_chemical_sample_limit_production.TestChemicalSampleLimitProduction#test_validate_swab_rinse_sampling_limit_for_all_mg","historyId":"f86af82a6079e672db0cc0dccb2f8981","time":{"start":1708246560795,"stop":1708246564044,"duration":3249},"description":"This test case test the swab & rinse sample limit of equipment map with production forformulation when all (toxicity, dosage, default) criteria is selected & for active facility when all (toxicity, dosage, default, LD50) and swab & rinse sample unit is in mg","descriptionHtml":"<p>This test case test the swab &amp; rinse sample limit of equipment map with production forformulation when all (toxicity, dosage, default) criteria is selected &amp; for active facility when all (toxicity, dosage, default, LD50) and swab &amp; rinse sample unit is in mg</p>\n","status":"failed","statusMessage":"AssertionError: Automation Test 7.8463e-15 Not Equal 7.8462904113e-09","statusTrace":"self = <test_chemical_sample_limit_production.TestChemicalSampleLimitProduction object at 0x000001ED49416950>\n\n    @allure.title(\"Test the swab & rinse limit of equipment map to production\")\n    @allure.description(\"This test case test the swab & rinse sample limit of equipment map with production for\"\n                        \"formulation when all (toxicity, dosage, default) criteria is selected & for active \"\n                        \"facility when all (toxicity, dosage, default, LD50) and swab & rinse sample unit is in mg\")\n    @allure.link(\"https://app.clickup.com/t/85zrgpm22\")\n    @pytest.mark.swab_rinse_limit\n    @pytest.mark.validate_swab_rinse_sampling_limit_for_all_mg\n    def test_validate_swab_rinse_sampling_limit_for_all_mg(self):\n        policy_data = {\"useSwabPerSampleLimit\": True, \"useRinsePerSampleLimit\": True, \"swabSampleUnit\": \"mg\",\n                       \"rinseSampleUnit\": \"mg\"}\n        data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        swab_unit = get_policy[\"limitRepresentation\"][\"sampleLimits\"][\"swab\"][\"unit\"]\n        rinse_unit = get_policy[\"limitRepresentation\"][\"sampleLimits\"][\"rinse\"][\"unit\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        if get_policy != update_policy[\"data\"] or rinse_unit != \"ug\" or swab_unit != \"mg\":\n            self.update_active_policy.test_update_active_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        production_id = PRODUCTION_ID\n        for prod in production_id:\n            data.update({\"production_id\": prod})\n            swab_sheet_name = prod.lower() + \"_swab\"\n            rinse_sheet_name = prod.lower() + \"_rinse\"\n            swab_columns = [\"Equipment ID\", \"swab_limit_mg\"]\n            rinse_columns = [\"Equipment ID\", \"rinse_limit_mg\"]\n            manually_calculated_swab_limit = self.calculated_chemical_excel(swab_sheet_name, swab_columns)\n            manually_calculated_rinse_limit = self.calculated_chemical_excel(rinse_sheet_name, rinse_columns)\n            data.update({\"production\": prod})\n            swab_limit = self.get_production.get_production_swab_limit_each_equipment(data)\n>           compare_chemical(swab_limit, manually_calculated_swab_limit, swab_columns, self.ERROR_MESSAGE)\n\ntests\\scenarios\\test_chemical_sample_limit_production.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\common_methods.py:35: in compare_chemical\n    compare(swab_rinse[i], v, error_message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = 7.8463e-15, sal2 = 7.8462904113e-09, error_message = 'Automation Test'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n>               assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\nE               AssertionError: Automation Test 7.8463e-15 Not Equal 7.8462904113e-09\n\nutil\\common_methods.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708246535629,"stop":1708246536176,"duration":547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708246536176,"stop":1708246537058,"duration":882},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"This method will setup the cleaning limit policy for Formulation Facility","time":{"start":1708246548510,"stop":1708246552782,"duration":4272},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_swab_rinse_sampling_limit_for_all_mg"},{"name":"tag","value":"swab_rinse_limit"},{"name":"tag","value":"chemical_sample_limit"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_chemical_sample_limit_production"},{"name":"subSuite","value":"TestChemicalSampleLimitProduction"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_chemical_sample_limit_production"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zrgpm22","url":"https://app.clickup.com/t/85zrgpm22","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["chemical_sample_limit","swab_rinse_limit","validate_swab_rinse_sampling_limit_for_all_mg"]},"source":"d2de1f030b0a59ab.json","parameterValues":[]}