{"uid":"c24e43f9fd9fa5f3","name":"Create Protocol for microbial residue verification for non split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_microbial_residue_verification_protocol_direct_custom_indirect_bop_non_split","historyId":"10a07e560d1d3a48bcbc29138ad16ab6","time":{"start":1709039267612,"stop":1709039270355,"duration":2743},"description":"This test case tests API to Create Protocol microbial residue verification for non split when select custom of direct and based on policy for indirect and validate the limits","descriptionHtml":"<p>This test case tests API to Create Protocol microbial residue verification for non split when select custom of direct and based on policy for indirect and validate the limits</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"AcceptanceCriteriaForAllSelectedEquipment\",\"where\":{\"domain\":\"OnDemandProtocol\",\"action\":\"Modify\"},\"name\":\"Protocol\",\"message\":\"Acceptance Criteria needs to be defined for all selected Equipment\",\"action\":\"Modify\",\"domain\":\"OnDemandProtocol\"}}","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002CCA3616B10>\n\n    @allure.title(\"Create Protocol for microbial residue verification for non split\")\n    @allure.description(\"This test case tests API to Create Protocol microbial residue verification for non split when \"\n                        \"select custom of direct and based on policy for indirect and validate the limits\")\n    @allure.link(\"https://app.clickup.com/t/86cuhb50b\")\n    @pytest.mark.formulation\n    @pytest.mark.create_microbial_residue_verification_protocol_direct_custom_indirect_bop_non_split\n    def test_create_microbial_residue_verification_protocol_direct_custom_indirect_bop_non_split(self):\n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"microbial_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_microbial.PROTOCOL_MICROBIAL_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = self.protocol_microbial.get_microbial_custom_direct_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_microbial.CUSTOM_DIRECT_MICROBIAL_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = self.protocol_microbial.get_microbial_indirect_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_microbial.INDIRECT_MICROBIAL_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_microbial.custom_direct_update_policy_payload()[\"bioburden\"][\"equipments\"]\n        indirect_equipment = self.protocol_microbial.indirect_update_policy_payload()[\"bioburden\"][\"equipments\"]\n    \n        direct_endo_equipment = self.protocol_microbial.custom_direct_update_policy_payload()[\"endotoxin\"][\"equipments\"]\n        indirect_endo_equipment = self.protocol_microbial.custom_indirect_update_policy_payload()[\"endotoxin\"][\n            \"equipments\"]\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_endo_equipment\": direct_endo_equipment, \"indirect_endo_equipment\": indirect_endo_equipment,\n                     \"direct_policy\": \"custom\", \"indirect_policy\": \"policyBased\"})\n        data.update(\n            {\"update_microbial_residue_verification_payload\": update_microbial_residue_verification_payload(data)})\n    \n>       updated_data = self.protocol_microbial.update_microbial_residue_verification_protocol(data)[\"response\"]\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:3514: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\protocols\\protocol_microbial_residue_verification.py:316: in update_microbial_residue_verification_protocol\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"AcceptanceCriteriaForAllSelectedEquipment\",\"where\":{\"domain\":\"OnDemandProtocol\",\"action\":\"Modify\"},\"name\":\"Protocol\",\"message\":\"Acceptance Criteria needs to be defined for all selected Equipment\",\"action\":\"Modify\",\"domain\":\"OnDemandProtocol\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":35,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1709038682534,"stop":1709038683052,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1709038683052,"stop":1709038683859,"duration":807},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_microbial_residue_verification_protocol_direct_custom_indirect_bop_non_split"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuhb50b","url":"https://app.clickup.com/t/86cuhb50b","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5c2f0d27d9cecbe8","status":"passed","time":{"start":1708873394711,"stop":1708873400804,"duration":6093}},{"uid":"52d77f811105f288","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708872961623,"stop":1708872961623,"duration":0}},{"uid":"b5253080a742def1","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708872541577,"stop":1708872541577,"duration":0}},{"uid":"3c2d6087d47da62c","status":"passed","time":{"start":1708598766588,"stop":1708598773597,"duration":7009}},{"uid":"3a956e9cd2852c5e","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708597471252,"stop":1708597471252,"duration":0}},{"uid":"26682a64aa06dd29","status":"passed","time":{"start":1708596907769,"stop":1708596914897,"duration":7128}},{"uid":"bf4f7def9309f0c7","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595632881,"stop":1708595632881,"duration":0}},{"uid":"54bf816b0cc30dcb","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595191496,"stop":1708595191496,"duration":0}},{"uid":"3ffdc9b3cebed72a","status":"passed","time":{"start":1708589321038,"stop":1708589323071,"duration":2033}},{"uid":"c3169da97b1f01e0","status":"passed","time":{"start":1708587088254,"stop":1708587092107,"duration":3853}},{"uid":"ff3b52dd01140ce4","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708586198096,"stop":1708586198096,"duration":0}},{"uid":"8160bb47b56fa618","status":"passed","time":{"start":1708521313963,"stop":1708521319392,"duration":5429}},{"uid":"a3c953b3aee00033","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520657528,"stop":1708520657528,"duration":0}},{"uid":"f0d7524714fd3021","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520580584,"stop":1708520580585,"duration":1}},{"uid":"40ef57e69e699977","status":"passed","time":{"start":1708519659063,"stop":1708519664019,"duration":4956}},{"uid":"663c792c667241ad","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708519088774,"stop":1708519088774,"duration":0}},{"uid":"9ecc6c1dd6359ad7","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708519071026,"stop":1708519071026,"duration":0}},{"uid":"b45cd199c7447b4a","status":"passed","time":{"start":1708508777563,"stop":1708508779439,"duration":1876}},{"uid":"2c454ea56c22ece","status":"passed","time":{"start":1708258582985,"stop":1708258586183,"duration":3198}},{"uid":"30a21fdce427022","status":"passed","time":{"start":1708246761167,"stop":1708246763129,"duration":1962}},{"uid":"3646704426235f24","status":"passed","time":{"start":1708241912101,"stop":1708241914386,"duration":2285}},{"uid":"44cda593cf996858","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708241643971,"stop":1708241643971,"duration":0}},{"uid":"97de72c2ee6f81f4","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708235045978,"stop":1708235045978,"duration":0}},{"uid":"6b18c61cffcc74de","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708232037413,"stop":1708232037413,"duration":0}},{"uid":"6fdedf58a74a1de8","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231704885,"stop":1708231704885,"duration":0}},{"uid":"31d928fdc936d921","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231509556,"stop":1708231509556,"duration":0}},{"uid":"262b9fb2c2742880","status":"passed","time":{"start":1707903246124,"stop":1707903248163,"duration":2039}},{"uid":"14dbbb5c786f9aea","status":"passed","time":{"start":1707816326274,"stop":1707816328302,"duration":2028}},{"uid":"3c7f04e209b0c7b0","status":"passed","time":{"start":1707801457802,"stop":1707801459940,"duration":2138}},{"uid":"16e358f2a9ca9e35","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707800941604,"stop":1707800941604,"duration":0}},{"uid":"cae0409cc66715e0","status":"passed","time":{"start":1707800555542,"stop":1707800557768,"duration":2226}},{"uid":"c5b602e3e5e04a90","status":"broken","statusDetails":"NameError: name 'update_microbial_residue_verification_payload' is not defined","time":{"start":1707799808776,"stop":1707799809241,"duration":465}},{"uid":"358918d241d543ff","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799372382,"stop":1707799372382,"duration":0}},{"uid":"559b80e7ec17ff4c","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799327263,"stop":1707799327263,"duration":0}},{"uid":"61d2186697899e77","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1707799308360,"stop":1707799308360,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["multi_production_protocol","create_microbial_residue_verification_protocol_direct_custom_indirect_bop_non_split","scenario","formulation"]},"source":"c24e43f9fd9fa5f3.json","parameterValues":[]}