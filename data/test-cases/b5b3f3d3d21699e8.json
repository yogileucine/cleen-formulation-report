{"uid":"b5b3f3d3d21699e8","name":"Validate master data snapshot report for Sampling location risk assessment","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_master_data_snapshot_report_sampling_location_risk_assessment","historyId":"8ba20a8985797546965bb4ba13359131","time":{"start":1709038695478,"stop":1709038695686,"duration":208},"description":"This test case test API to validate the master data snapshot report for Sampling location risk assessment with excel file data","descriptionHtml":"<p>This test case test API to validate the master data snapshot report for Sampling location risk assessment with excel file data</p>\n","status":"failed","statusMessage":"AssertionError: Mismatch in column 'location name' at index (2) Dryers(Indirect)(Rinse) Not Equal Dryers(Indirect)(Swab)","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x000002CCA33F05D0>\n\n    @allure.title(\"Validate master data snapshot report for Sampling location risk assessment\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for Sampling location \"\n                        \"risk assessment with excel file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9qy9q\")\n    @pytest.mark.validate_master_data_snapshot_report_sampling_location_risk_assessment\n    def test_validate_master_data_snapshot_report_sampling_location_risk_assessment(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"SamplingLocationRiskAssessment\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"equipmentExternalId\": \"equipment id\", \"locationName\": \"location name\",\n                               \"contactType\": \"contact type\", \"selectForSampling\": \"Select for Sampling? (Yes/No)\",\n                               \"reasonForManualSelection\": \"Justification for manual selection/de-selection\",\n                               \"Solubility\": \"Solubility\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"sampling risk assessment\", usecols='A:F',\n                                       nrows=11)\n    \n            api_df = master_data_snapshot[columns_mapping.keys()]\n    \n            excel_df = excel_data[columns_mapping.values()]\n    \n            api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n            excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n            api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n    \n            max_rows = max(len(api_df_sorted), len(excel_df_sorted))\n    \n            numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n            string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n            for row in range(max_rows):\n                if row >= len(excel_df_sorted):\n                    mismatched_rows.append(row)\n                    continue\n                comparison_successful = True\n                for column in string_columns:\n                    api_value = api_df_sorted.loc[row, column]\n                    excel_value = excel_df_sorted.loc[row, column]\n                    if api_value is None and math.isnan(excel_value):\n                        continue\n>                   comparison_successful &= compare_portal(api_value, excel_value, column, row)\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:1025: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse_value = 'Dryers(Indirect)(Rinse)', excel_value = 'Dryers(Indirect)(Swab)', column = 'location name', row = 2\n\n    def compare_portal(response_value, excel_value, column, row):\n        error_message = f\"Mismatch in column '{column}' at index ({row})\"\n    \n        if response_value == \"-\" and math.isnan(excel_value):\n            return True\n    \n        if str(response_value) != \"#N/A\" and str(excel_value) != \"#N/A\":\n            if isinstance(response_value, (int, float)) and isinstance(excel_value, (int, float)):\n                if math.isnan(response_value) or math.isnan(excel_value):\n                    return True\n                if response_value < 1:\n                    length = (floor(log10(response_value)) - 1)\n                else:\n                    length = 15 - len(str(int(response_value)))\n                if length < 0:\n                    response_value = (round(response_value, -length + 3))\n                    excel_value = (round(excel_value, -length + 1))\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n                else:\n                    response_value = round(response_value, 3)\n                    excel_value = round(excel_value, 3)\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n            else:\n>               assert str(response_value).lower() == str(excel_value).lower(), error_message + \" \" + str(\n                    response_value) + \" Not Equal \" + str(excel_value)\nE               AssertionError: Mismatch in column 'location name' at index (2) Dryers(Indirect)(Rinse) Not Equal Dryers(Indirect)(Swab)\n\nutil\\common_methods.py:99: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":43,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1709038682534,"stop":1709038683052,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1709038683052,"stop":1709038683859,"duration":807},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_master_data_snapshot_report_sampling_location_risk_assessment"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt9qy9q","url":"https://app.clickup.com/t/85zt9qy9q","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"99252b6b4e4ebc7d","status":"failed","statusDetails":"AssertionError: Mismatch in column 'location name' at index (2) Dryers(Indirect)(Rinse) Not Equal Dryers(Indirect)(Swab)","time":{"start":1708597527575,"stop":1708597528945,"duration":1370}},{"uid":"2713913d6866f897","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708597469535,"stop":1708597469535,"duration":0}},{"uid":"2c565b0f0cdce497","status":"failed","statusDetails":"AssertionError: Mismatch in column 'location name' at index (2) Dryers(Indirect)(Rinse) Not Equal Dryers(Indirect)(Swab)","time":{"start":1708595759634,"stop":1708595761226,"duration":1592}},{"uid":"8c58d1d0a7f1f63a","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595631346,"stop":1708595631346,"duration":0}},{"uid":"3bb242c233bbab79","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595189798,"stop":1708595189798,"duration":0}},{"uid":"3c5a36e62b07ca78","status":"passed","time":{"start":1708588964270,"stop":1708588964472,"duration":202}},{"uid":"d0f2be6bbca677bb","status":"passed","time":{"start":1708586262412,"stop":1708586263541,"duration":1129}},{"uid":"fbf5f80222be148b","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708586196551,"stop":1708586196551,"duration":0}},{"uid":"5c256890c9af6908","status":"failed","statusDetails":"AssertionError: Mismatch in column 'location name' at index (2) Dryers(Indirect)(Rinse) Not Equal Dryers(Indirect)(Swab)","time":{"start":1708520699551,"stop":1708520699767,"duration":216}},{"uid":"9df64cca0b342964","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520674894,"stop":1708520674897,"duration":3}},{"uid":"89652db9b2854468","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520656014,"stop":1708520656014,"duration":0}},{"uid":"65bab2d833349180","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520579007,"stop":1708520579007,"duration":0}},{"uid":"13481d52bf8158c6","status":"failed","statusDetails":"AssertionError: Mismatch in column 'location name' at index (2) Dryers(Indirect)(Rinse) Not Equal Dryers(Indirect)(Swab)","time":{"start":1708519113859,"stop":1708519114137,"duration":278}},{"uid":"79aab5d4bc7b657a","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708519087070,"stop":1708519087070,"duration":0}},{"uid":"f456f5b01993bcfc","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708519069270,"stop":1708519069270,"duration":0}},{"uid":"1c1faf8debf56dc","status":"passed","time":{"start":1708508431581,"stop":1708508431747,"duration":166}},{"uid":"ed6d7a6f6430b932","status":"passed","time":{"start":1708258248211,"stop":1708258248391,"duration":180}},{"uid":"5a87b625d3aead95","status":"passed","time":{"start":1708246547423,"stop":1708246547723,"duration":300}},{"uid":"9bcddf69fd850a90","status":"passed","time":{"start":1708241667463,"stop":1708241667661,"duration":198}},{"uid":"fe2d10aa35d7937e","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708241642373,"stop":1708241642373,"duration":0}},{"uid":"f4b0a5e4c1ae6e32","status":"failed","statusDetails":"AssertionError: {\"error\":{}}","time":{"start":1708236868157,"stop":1708236868222,"duration":65}},{"uid":"704171f239bef7ff","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708234859611,"stop":1708234859611,"duration":0}},{"uid":"1a279f4f4a06eb","status":"failed","statusDetails":"AssertionError: Mismatch in column 'equipment id' at index (0) EQM-1 Not Equal EQM-16","time":{"start":1708231842746,"stop":1708231842922,"duration":176}},{"uid":"bc117db27b95d74e","status":"failed","statusDetails":"AssertionError: Mismatch in column 'equipment id' at index (0) EQM-1 Not Equal EQM-16","time":{"start":1708231530240,"stop":1708231530405,"duration":165}},{"uid":"4ef976de71a7f6c5","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708231508469,"stop":1708231508469,"duration":0}},{"uid":"ddd2b9f24dc58109","status":"passed","time":{"start":1707902882156,"stop":1707902882331,"duration":175}},{"uid":"c4bf536d5bdc4b1b","status":"passed","time":{"start":1707815934098,"stop":1707815934283,"duration":185}},{"uid":"ca0ed3c0fef7d06e","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707815893815,"stop":1707815893815,"duration":0}},{"uid":"600dfe91f3d2d22a","status":"passed","time":{"start":1707800969319,"stop":1707800969507,"duration":188}},{"uid":"e063cff4a9c4b57c","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707800940035,"stop":1707800940035,"duration":0}},{"uid":"576ea9e616a79e40","status":"passed","time":{"start":1707799394313,"stop":1707799394491,"duration":178}},{"uid":"693fdf04e7d6cd62","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799370855,"stop":1707799370855,"duration":0}},{"uid":"72dbcd4e604a464a","status":"passed","time":{"start":1707799349999,"stop":1707799350189,"duration":190}},{"uid":"7f0f5d9d72344022","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799325155,"stop":1707799325155,"duration":0}},{"uid":"6fc5fd88fefb2364","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1707799305973,"stop":1707799305973,"duration":0}},{"uid":"43425c48cde776d2","status":"passed","time":{"start":1707719496664,"stop":1707719496838,"duration":174}},{"uid":"12cd346d988c9cdf","status":"passed","time":{"start":1707719137262,"stop":1707719137434,"duration":172}},{"uid":"6150f8a1c8f428bb","status":"passed","time":{"start":1707718672268,"stop":1707718672449,"duration":181}},{"uid":"db863a82ccc7dc36","status":"failed","statusDetails":"AssertionError: {\"error\":{}}","time":{"start":1707718458453,"stop":1707718458453,"duration":0}},{"uid":"f240401093db7ec5","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1707718430603,"stop":1707718430603,"duration":0}},{"uid":"ccc7ac10d79fb6d3","status":"passed","time":{"start":1707717414964,"stop":1707717415136,"duration":172}},{"uid":"fcfeba073cf9e467","status":"passed","time":{"start":1707716392515,"stop":1707716392831,"duration":316}},{"uid":"d49b65362c9f0cbd","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707716357686,"stop":1707716357686,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","run(order=1)","audit_portal_limits","validate_master_data_snapshot_report_sampling_location_risk_assessment","second"]},"source":"b5b3f3d3d21699e8.json","parameterValues":[]}