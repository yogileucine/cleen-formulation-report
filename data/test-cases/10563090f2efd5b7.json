{"uid":"10563090f2efd5b7","name":"Test SAL of Production(API) for All Criteria in API Facility","fullName":"tests.scenarios.test_limit_productions.TestLimitOnProduction#test_validate_api_production_sal_upper_limit_all_criteria","historyId":"49075315e629c91f69d6f88b2cf3cf86","time":{"start":1708232033908,"stop":1708232037225,"duration":3317},"description":"This test case tests SAL when All Criteria in Policy is selected for each Equipment mapped to Production in API Facility","descriptionHtml":"<p>This test case tests SAL when All Criteria in Policy is selected for each Equipment mapped to Production in API Facility</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"DataValidationError\",\"where\":{\"domain\":\"ReportDocument\",\"action\":\"SignDocument\"},\"name\":\"Data Validation Issue\",\"errors\":[{\"children\":[],\"property\":\"completed\",\"constraints\":{\"id\":\"QualificationTask is already completed\"}}],\"message\":\"\",\"action\":\"SignDocument\",\"domain\":\"ReportDocument\"}}","statusTrace":"self = <test_limit_productions.TestLimitOnProduction object at 0x000001A873A2CF10>\n\n    @allure.title(\"Test SAL of Production(API) for All Criteria in API Facility\")\n    @allure.description(\"This test case tests SAL when All Criteria in Policy is selected\"\n                        \" for each Equipment mapped to Production in API Facility\")\n    @allure.link(\"https://app.clickup.com/t/2uayp19\")\n    @pytest.mark.active\n    @pytest.mark.validate_api_production_sal_upper_limit_all_criteria\n    def test_validate_api_production_sal_upper_limit_all_criteria(self):\n        upper_limit_sal = Excel.read_excel_col_name_row_number(const.get_master_data(),\n                                                               \"config\", \"upper_limit\", 2)\n        policy_data = {\"useDosage\": True, \"useToxicity\": True, \"useARL\": True, \"useLd50\": True, \"useResidueLimit\": True,\n                       \"residueLimit\": upper_limit_sal}\n        data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        if get_policy != update_policy[\"data\"] or upper_limit_sal != policy_data[\"residueLimit\"]:\n            self.update_active_policy.test_update_active_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n    \n        production_id = PRODUCTION_LIST[\"api_production_id\"]\n        for prod in production_id:\n            data.update({\"production\": prod})\n            sheet_name = prod.lower()\n            columns = [\"Equipment ID\", \"upperlimit_mg_sqcm\"]\n            manually_calculated_limit, lowest_manually_calculated_sal = self.calculated_sal_excel(sheet_name, columns)\n            data.update({\"production\": prod})\n            sal = self.get_production.get_production_sal_each_equipment(data)\n            lowest_sal = self.get_production.get_production_lowest_sal(data)\n            compare_sal(sal, manually_calculated_limit, columns, self.ERROR_MESSAGE)\n            compare(lowest_sal, lowest_manually_calculated_sal[\"upperlimit_mg_sqcm\"][0], prod)\n        policy_data = {\"useResidueLimit\": False}\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        self.update_active_policy.test_update_active_policy(data)\n        self.change_assessment.test_start_cleaning_assessment(scenario=True)\n        self.change_assessment.test_submit_approve_cleaning_assessment()\n>       self.change_assessment.test_submit_approve_cleaning_assessment()\n\ntests\\scenarios\\test_limit_productions.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\change_assessment\\test_cleaning_assessment.py:68: in test_submit_approve_cleaning_assessment\n    status_200(lwcr_submit)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [422]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"DataValidationError\",\"where\":{\"domain\":\"ReportDocument\",\"action\":\"SignDocument\"},\"name\":\"Data Validation Issue\",\"errors\":[{\"children\":[],\"property\":\"completed\",\"constraints\":{\"id\":\"QualificationTask is already completed\"}}],\"message\":\"\",\"action\":\"SignDocument\",\"domain\":\"ReportDocument\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708231831983,"stop":1708231832370,"duration":387},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708231832370,"stop":1708231833427,"duration":1057},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"This method will setup the cleaning limit policy for actives","time":{"start":1708232026436,"stop":1708232026962,"duration":526},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_api_production_sal_upper_limit_all_criteria"},{"name":"tag","value":"active"},{"name":"tag","value":"production_limits"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_productions"},{"name":"subSuite","value":"TestLimitOnProduction"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"38200-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_productions"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/2uayp19","url":"https://app.clickup.com/t/2uayp19","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","active","production_limits","validate_api_production_sal_upper_limit_all_criteria"]},"source":"10563090f2efd5b7.json","parameterValues":[]}