{"uid":"b5347b4c2d568463","name":"Validate the sample limits of active residue verification for direct indirect custom","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_active_residue_sample_limits_direct_indirect_custom","historyId":"d547fc936d6813049969d2296e9cc412","time":{"start":1708520376834,"stop":1708520380174,"duration":3340},"description":"This test case tests API to Create Protocol for active residue verification and validate the sample limits when select custom for both direct and indirect","descriptionHtml":"<p>This test case tests API to Create Protocol for active residue verification and validate the sample limits when select custom for both direct and indirect</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x0000024D56083410>\n\n    @allure.title(\"Validate the sample limits of active residue verification for direct indirect custom\")\n    @allure.description(\"This test case tests API to Create Protocol for active residue verification and validate \"\n                        \"the sample limits when select custom for both direct and indirect\")\n    @allure.link(\"https://app.clickup.com/t/86cumc3nn\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_active_residue_sample_limits_direct_indirect_custom\n    def test_validate_active_residue_sample_limits_direct_indirect_custom(self):\n        data = self.test_active_select_direct_indirect_custom_multi_production_protocol()\n        equipments_id = self.active_criteria.get_protocol_equipments_ids()\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": [\"sample type\", \"contact type\", \"sample id\", \"swab_limit_ppm\", \"rinse_limit_ppm\"],\n                         \"sample_type\": \"Chemical\", \"contact_type\": [\"Direct\", \"Indirect\"]})\n            get_sample_limits = self.active_criteria.get_sample_limits_active_residue_verification_protocol(data)[\n                \"response\"]\n            sample_limits = json.loads(get_sample_limits)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n>           self.active_criteria.compare_samples_swab_rinse_surface_area_active(data)\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:4511: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'actives_verification': True, 'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'exte... type', 'contact type', 'sample id', 'swab_limit_ppm', 'rinse_limit_ppm'], 'contact_type': ['Direct', 'Indirect'], ...}\n\n    @staticmethod\n    def compare_samples_swab_rinse_surface_area_active(data):\n        policies = [data[\"policy_wise\"], data[\"indirect_policy\"]]  # Include the direct policy and indirect policy\n        for policy in policies:\n            if policy == \"custom\":\n                sheet_name = data[\"external_id\"] + \"_samples_custom\"\n            else:\n                sheet_name = data[\"external_id\"] + \"_samples\"\n    \n            print(sheet_name)\n    \n            sample_limits = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name,\n                                                                    data[\"columns\"], data[\"sample_type\"])\n    \n            swab_list = [item for item in sample_limits[\"swab_limit_ppm\"] if item != '#VALUE!']\n            result_list = [item for item in sample_limits[\"rinse_limit_ppm\"] if item != '#VALUE!']\n            index = 0\n            rinse_index = 0\n            for sample_limit in data[\"sample_profile\"]['sampleLimitsDetails']:\n                if sample_limit.get('sampleType') == data['sample_type']:\n                    sample_id = sample_limit.get('sampleId')\n                    if sample_id is not None and sample_id in sample_limits.get(\"sample id\"):\n                        method_type = sample_limit.get('methodType')\n                        limit_value = sample_limit['limit']['value']\n                        if limit_value is not None:\n                            if method_type == 'swab':\n                                print(limit_value)\n>                               assert round(limit_value, 3) == round(swab_list[index], 3)\nE                               AssertionError\n\ntests\\unit\\protocols\\protocol_active_acceptance_criteria.py:215: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708520375595,"stop":1708520376023,"duration":428},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708520376023,"stop":1708520376833,"duration":810},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_active_residue_sample_limits_direct_indirect_custom"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"804-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cumc3nn","url":"https://app.clickup.com/t/86cumc3nn","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","validate_active_residue_sample_limits_direct_indirect_custom","scenario","formulation"]},"source":"b5347b4c2d568463.json","parameterValues":[]}