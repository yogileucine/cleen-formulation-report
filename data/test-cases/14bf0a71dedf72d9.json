{"uid":"14bf0a71dedf72d9","name":"Validate the sample limits of microbial residue verification for direct indirect bop","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_microbial_residue_sample_limits_direct_indirect_bop","historyId":"b7dbedb4b0c28aa5d281be9ab87299b8","time":{"start":1709039527665,"stop":1709039533853,"duration":6188},"description":"This test case tests API to Create Protocol for microbial residue verification and validate the sample limits when select based on policy for direct and indirect","descriptionHtml":"<p>This test case tests API to Create Protocol for microbial residue verification and validate the sample limits when select based on policy for direct and indirect</p>\n","status":"broken","statusMessage":"KeyError: 'samplingProfile'","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002CCA3637C10>\n\n    @allure.title(\"Validate the sample limits of microbial residue verification for direct indirect bop\")\n    @allure.description(\n        \"This test case tests API to Create Protocol for microbial residue verification and validate \"\n        \"the sample limits when select based on policy for direct and indirect\")\n    @allure.link(\"https://app.clickup.com/t/86cumc7f6\")\n    @pytest.mark.formulation  # bop = based on policy\n    @pytest.mark.validate_microbial_residue_sample_limits_direct_indirect_bop\n    def test_validate_microbial_residue_sample_limits_direct_indirect_bop(self):\n        data = self.test_create_microbial_residue_verification_protocol_direct_indirect_bop_non_split()\n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": [\"sample id\", \"Analytical Method\", \"sampling area (sqcm)\", \"Rinse volume(ml)\"],\n                         \"sample_type\": \"Microbial\", \"contact_custom\": \"Direct\", \"contact_bop\": \"Indirect\"})\n            get_sample_limits = \\\n                self.protocol_common_method.get_sample_limits_protocol_residue_verification_protocol(data)[\n                    \"response\"]\n            sample_limits = json.loads(get_sample_limits)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n>           self.protocol_microbial.compare_samples_swab_rinse_surface_area_microbial(data)\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:5140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-RQSK', 'nam...tical Method', 'sampling area (sqcm)', 'Rinse volume(ml)'], 'contact_bop': 'Indirect', 'contact_custom': 'Direct', ...}\n\n    @staticmethod\n    def compare_samples_swab_rinse_surface_area_microbial(data):\n        columns = [\"sample type\", \"sampling area (sqcm)\", \"rinse_volume\"]\n        sheet_name = data[\"external_id\"] + \"_samples\"\n        sample_area = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name, columns,\n                                                              \"Microbial\")\n        result_list = [item for item in sample_area[\"rinse_volume\"] if item != 'a']\n        index = 0\n        rinse_index = 0\n>       for profile in data['sample_profile']['samplingProfile'].values():\nE       KeyError: 'samplingProfile'\n\ntests\\unit\\protocols\\protocol_microbial_residue_verification.py:259: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1709038682534,"stop":1709038683052,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1709038683052,"stop":1709038683859,"duration":807},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_microbial_residue_sample_limits_direct_indirect_bop"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cumc7f6","url":"https://app.clickup.com/t/86cumc7f6","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"537eed5aab5382ce","status":"broken","statusDetails":"AttributeError: 'ProtocolMicrobialAcceptanceCriteria' object has no attribute 'compare_samples_swab_rinse_surface_area_microbial'","time":{"start":1708873655002,"stop":1708873661431,"duration":6429}},{"uid":"c063eafb07e333dd","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708872961968,"stop":1708872961968,"duration":0}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["validate_microbial_residue_sample_limits_direct_indirect_bop","multi_production_protocol","scenario","formulation"]},"source":"14bf0a71dedf72d9.json","parameterValues":[]}