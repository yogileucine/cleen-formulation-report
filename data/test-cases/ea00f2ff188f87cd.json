{"uid":"ea00f2ff188f87cd","name":"Validate production limits report","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_production_limits_report","historyId":"d2de5edde619e79bf590b5881b967683","time":{"start":1708595730910,"stop":1708595732284,"duration":1374},"description":"This test case test API to validate the production limit report generated on audit portal with excel data","descriptionHtml":"<p>This test case test API to validate the production limit report generated on audit portal with excel data</p>\n","status":"failed","statusMessage":"AssertionError: Mismatch in column 'Equipment' at index (12) Vibratory Sifter - 1 Not Equal Vibratory Sifter","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x00000264246A8A10>\n\n    @allure.title(\"Validate production limits report\")\n    @allure.description(\"This test case test API to validate the production limit report generated on audit portal \"\n                        \"with excel data\")\n    @allure.link(\"https://app.clickup.com/t/85zt0kxcr\")\n    @pytest.mark.validate_production_limits_report\n    def test_validate_production_limits_report(self):\n        data = {}\n        columns_prod = [\"production_id\"]\n        production = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n    \n        production_id = production[\"production_id\"][0]\n    \n        update_data = {\"production_external_id\": production_id}\n    \n        data.update(update_data)\n    \n        production_limit = self.get_audit_portal.test_generate_production_limits_report_using_production(data)\n    \n        production_limit = json.loads(production_limit[\"response\"])\n    \n        production_data = pd.json_normalize(production_limit[\"data\"])\n    \n        columns_mapping = {\"equipmentName\": \"Equipment\", \"equipmentId\": \"Equipment ID\",\n                           \"prevProductionId\": \"Previous Production ID (A)\",\n                           \"prevProductNameA\": \"Previous Production (A)\",\n                           \"prevApiNameA\": \"Previous API / Intermediate (A)\",\n                           \"nextProductionId\": \"Next Production (B)\", \"pdeA\": \"ADE (mg) (A)\",\n                           \"minTdA\": \"Minimum Daily Dose (mg)(A)\", \"lddB\": \"Largest Daily Dose(mg)(B)\",\n                           \"sharedSurfaceArea\": \"Shared Contact Surface Area (sqcm) (A-B)\",\n                           \"toxicityL3\": \"sal_toxicity_mg_sqcm\", \"dosageL3\": \"sal_dosage_mg_sqcm\",\n                           \"generalL3\": \"sal_default_mg_sqcm\", \"minBsB\": \"Batch Size (kg) (B)\"}\n    \n        sheet_name = production_id.lower() + \"_productwise_sal\"\n    \n        excel_data = pd.read_excel(const.get_master_data(), sheet_name=sheet_name, usecols='A:P',\n                                   skiprows=[7, 14, 17, 18], nrows=20)\n    \n        allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n        allure.attach(production_data.to_html(), name=\"production_data\", attachment_type=allure.attachment_type.HTML)\n    \n        api_df = production_data[columns_mapping.keys()]\n        excel_df = excel_data[columns_mapping.values()]\n    \n        api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n        excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n        api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n    \n        numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n        string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n        for column in string_columns:\n            for row in range(len(api_df_sorted)):\n                api_value = api_df_sorted.loc[row, column]\n                excel_value = excel_df_sorted.loc[row, column]\n>               compare_portal(api_value, excel_value, column, row)\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse_value = 'Vibratory Sifter - 1', excel_value = 'Vibratory Sifter', column = 'Equipment', row = 12\n\n    def compare_portal(response_value, excel_value, column, row):\n        error_message = f\"Mismatch in column '{column}' at index ({row})\"\n    \n        if response_value == \"-\" and math.isnan(excel_value):\n            return True\n    \n        if str(response_value) != \"#N/A\" and str(excel_value) != \"#N/A\":\n            if isinstance(response_value, (int, float)) and isinstance(excel_value, (int, float)):\n                if math.isnan(response_value) or math.isnan(excel_value):\n                    return True\n                if response_value < 1:\n                    length = (floor(log10(response_value)) - 1)\n                else:\n                    length = 15 - len(str(int(response_value)))\n                if length < 0:\n                    response_value = (round(response_value, -length + 3))\n                    excel_value = (round(excel_value, -length + 1))\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n                else:\n                    response_value = round(response_value, 3)\n                    excel_value = round(excel_value, 3)\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n            else:\n>               assert str(response_value).lower() == str(excel_value).lower(), error_message + \" \" + str(\n                    response_value) + \" Not Equal \" + str(excel_value)\nE               AssertionError: Mismatch in column 'Equipment' at index (12) Vibratory Sifter - 1 Not Equal Vibratory Sifter\n\nutil\\common_methods.py:99: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708595712302,"stop":1708595712999,"duration":697},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708595712999,"stop":1708595714400,"duration":1401},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"This test case test API to validate the production limit report generated on audit portal with excel data","status":"failed","statusMessage":"AssertionError: Mismatch in column 'Equipment' at index (12) Vibratory Sifter - 1 Not Equal Vibratory Sifter","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x00000264246A8A10>\n\n    @allure.title(\"Validate production limits report\")\n    @allure.description(\"This test case test API to validate the production limit report generated on audit portal \"\n                        \"with excel data\")\n    @allure.link(\"https://app.clickup.com/t/85zt0kxcr\")\n    @pytest.mark.validate_production_limits_report\n    def test_validate_production_limits_report(self):\n        data = {}\n        columns_prod = [\"production_id\"]\n        production = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n    \n        production_id = production[\"production_id\"][0]\n    \n        update_data = {\"production_external_id\": production_id}\n    \n        data.update(update_data)\n    \n        production_limit = self.get_audit_portal.test_generate_production_limits_report_using_production(data)\n    \n        production_limit = json.loads(production_limit[\"response\"])\n    \n        production_data = pd.json_normalize(production_limit[\"data\"])\n    \n        columns_mapping = {\"equipmentName\": \"Equipment\", \"equipmentId\": \"Equipment ID\",\n                           \"prevProductionId\": \"Previous Production ID (A)\",\n                           \"prevProductNameA\": \"Previous Production (A)\",\n                           \"prevApiNameA\": \"Previous API / Intermediate (A)\",\n                           \"nextProductionId\": \"Next Production (B)\", \"pdeA\": \"ADE (mg) (A)\",\n                           \"minTdA\": \"Minimum Daily Dose (mg)(A)\", \"lddB\": \"Largest Daily Dose(mg)(B)\",\n                           \"sharedSurfaceArea\": \"Shared Contact Surface Area (sqcm) (A-B)\",\n                           \"toxicityL3\": \"sal_toxicity_mg_sqcm\", \"dosageL3\": \"sal_dosage_mg_sqcm\",\n                           \"generalL3\": \"sal_default_mg_sqcm\", \"minBsB\": \"Batch Size (kg) (B)\"}\n    \n        sheet_name = production_id.lower() + \"_productwise_sal\"\n    \n        excel_data = pd.read_excel(const.get_master_data(), sheet_name=sheet_name, usecols='A:P',\n                                   skiprows=[7, 14, 17, 18], nrows=20)\n    \n        allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n        allure.attach(production_data.to_html(), name=\"production_data\", attachment_type=allure.attachment_type.HTML)\n    \n        api_df = production_data[columns_mapping.keys()]\n        excel_df = excel_data[columns_mapping.values()]\n    \n        api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n        excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n        api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n    \n        numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n        string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n        for column in string_columns:\n            for row in range(len(api_df_sorted)):\n                api_value = api_df_sorted.loc[row, column]\n                excel_value = excel_df_sorted.loc[row, column]\n>               compare_portal(api_value, excel_value, column, row)\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse_value = 'Vibratory Sifter - 1', excel_value = 'Vibratory Sifter', column = 'Equipment', row = 12\n\n    def compare_portal(response_value, excel_value, column, row):\n        error_message = f\"Mismatch in column '{column}' at index ({row})\"\n    \n        if response_value == \"-\" and math.isnan(excel_value):\n            return True\n    \n        if str(response_value) != \"#N/A\" and str(excel_value) != \"#N/A\":\n            if isinstance(response_value, (int, float)) and isinstance(excel_value, (int, float)):\n                if math.isnan(response_value) or math.isnan(excel_value):\n                    return True\n                if response_value < 1:\n                    length = (floor(log10(response_value)) - 1)\n                else:\n                    length = 15 - len(str(int(response_value)))\n                if length < 0:\n                    response_value = (round(response_value, -length + 3))\n                    excel_value = (round(excel_value, -length + 1))\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n                else:\n                    response_value = round(response_value, 3)\n                    excel_value = round(excel_value, 3)\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n            else:\n>               assert str(response_value).lower() == str(excel_value).lower(), error_message + \" \" + str(\n                    response_value) + \" Not Equal \" + str(excel_value)\nE               AssertionError: Mismatch in column 'Equipment' at index (12) Vibratory Sifter - 1 Not Equal Vibratory Sifter\n\nutil\\common_methods.py:99: AssertionError","steps":[],"attachments":[{"uid":"178baaae7aaea1cf","name":"excel_data","source":"178baaae7aaea1cf.html","type":"text/html","size":7580},{"uid":"5075712d9b15b10d","name":"production_data","source":"5075712d9b15b10d.html","type":"text/html","size":10395}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"tag","value":"validate_production_limits_report"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22252-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt0kxcr","url":"https://app.clickup.com/t/85zt0kxcr","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_production_limits_report","scenario","run(order=1)","audit_portal_limits","second"]},"source":"ea00f2ff188f87cd.json","parameterValues":[]}