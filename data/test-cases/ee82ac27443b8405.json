{"uid":"ee82ac27443b8405","name":"Validate production limits report","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_production_limits_report","historyId":"d2de5edde619e79bf590b5881b967683","time":{"start":1708595224264,"stop":1708595225760,"duration":1496},"description":"This test case test API to validate the production limit report generated on audit portal with excel data","descriptionHtml":"<p>This test case test API to validate the production limit report generated on audit portal with excel data</p>\n","status":"broken","statusMessage":"KeyError: \"['Previous Production ID (A)', 'Previous Production (A)', 'Previous API / Intermediate (A)', 'Next Production (B)', 'ADE (mg) (A)', 'Shared Contact Surface Area (sqcm) (A-B)', 'Batch Size (kg) (B)'] not in index\"","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x000001751AC15AD0>\n\n    @allure.title(\"Validate production limits report\")\n    @allure.description(\"This test case test API to validate the production limit report generated on audit portal \"\n                        \"with excel data\")\n    @allure.link(\"https://app.clickup.com/t/85zt0kxcr\")\n    @pytest.mark.validate_production_limits_report\n    def test_validate_production_limits_report(self):\n        data = {}\n        columns_prod = [\"production_id\"]\n        production = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n    \n        production_id = production[\"production_id\"][0]\n    \n        update_data = {\"production_external_id\": production_id}\n    \n        data.update(update_data)\n    \n        production_limit = self.get_audit_portal.test_generate_production_limits_report_using_production(data)\n    \n        production_limit = json.loads(production_limit[\"response\"])\n    \n        production_data = pd.json_normalize(production_limit[\"data\"])\n    \n        columns_mapping = {\"equipmentName\": \"Equipment\", \"equipmentId\": \"Equipment ID\",\n                           \"prevProductionId\": \"Previous Production ID (A)\",\n                           \"prevProductNameA\": \"Previous Production (A)\",\n                           \"prevApiNameA\": \"Previous API / Intermediate (A)\",\n                           \"nextProductionId\": \"Next Production (B)\", \"pdeA\": \"ADE (mg) (A)\",\n                           \"minTdA\": \"Minimum Daily Dose (mg)(A)\", \"lddB\": \"Largest Daily Dose(mg)(B)\",\n                           \"sharedSurfaceArea\": \"Shared Contact Surface Area (sqcm) (A-B)\",\n                           \"toxicityL3\": \"sal_toxicity_mg_sqcm\", \"dosageL3\": \"sal_dosage_mg_sqcm\",\n                           \"generalL3\": \"sal_default_mg_sqcm\", \"minBsB\": \"Batch Size (kg) (B)\"}\n    \n        sheet_name = production_id.lower() + \"_productwise_sal\"\n    \n        excel_data = pd.read_excel(const.get_master_data(), sheet_name=sheet_name, usecols='A:P',\n                                   skiprows=[7, 14, 17, 18], nrows=20)\n    \n        allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n        allure.attach(production_data.to_html(), name=\"production_data\", attachment_type=allure.attachment_type.HTML)\n    \n        api_df = production_data[columns_mapping.keys()]\n>       excel_df = excel_data[columns_mapping.values()]\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\pandas\\core\\frame.py:3767: in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5877: in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Index(['Equipment', 'Equipment ID', 'Previous Production ID\\n(A)',\n       'Previous Production\\n(A)', 'Previous API / ...Area (sqcm)\\n(A-B)', 'sal_toxicity_mg_sqcm',\n       'sal_dosage_mg_sqcm', 'sal_default_mg_sqcm'],\n      dtype='object')\nkey = Index(['Equipment', 'Equipment ID', 'Previous Production ID (A)',\n       'Previous Production (A)', 'Previous API / In...al_toxicity_mg_sqcm', 'sal_dosage_mg_sqcm', 'sal_default_mg_sqcm',\n       'Batch Size (kg) (B)'],\n      dtype='object')\nindexer = array([ 0,  1, -1, -1, -1, -1, -1,  9, 10, -1, 13, 14, 15, -1],\n      dtype=int64), axis_name = 'columns'\n\n    def _raise_if_missing(self, key, indexer, axis_name: str_t) -> None:\n        \"\"\"\n        Check that indexer can be used to return a result.\n    \n        e.g. at least one element was found,\n        unless the list of keys was actually empty.\n    \n        Parameters\n        ----------\n        key : list-like\n            Targeted labels (only used to show correct error message).\n        indexer: array-like of booleans\n            Indices corresponding to the key,\n            (with -1 indicating not found).\n        axis_name : str\n    \n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found.\n        \"\"\"\n        if len(key) == 0:\n            return\n    \n        # Count missing values\n        missing_mask = indexer < 0\n        nmissing = missing_mask.sum()\n    \n        if nmissing:\n            # TODO: remove special-case; this is just to keep exception\n            #  message tests from raising while debugging\n            use_interval_msg = is_interval_dtype(self.dtype) or (\n                is_categorical_dtype(self.dtype)\n                # \"Index\" has no attribute \"categories\"  [attr-defined]\n                and is_interval_dtype(\n                    self.categories.dtype  # type: ignore[attr-defined]\n                )\n            )\n    \n            if nmissing == len(indexer):\n                if use_interval_msg:\n                    key = list(key)\n                raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n    \n            not_found = list(ensure_index(key)[missing_mask.nonzero()[0]].unique())\n>           raise KeyError(f\"{not_found} not in index\")\nE           KeyError: \"['Previous Production ID (A)', 'Previous Production (A)', 'Previous API / Intermediate (A)', 'Next Production (B)', 'ADE (mg) (A)', 'Shared Contact Surface Area (sqcm) (A-B)', 'Batch Size (kg) (B)'] not in index\"\n\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5941: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708595204784,"stop":1708595205507,"duration":723},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708595205507,"stop":1708595206854,"duration":1347},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"This test case test API to validate the production limit report generated on audit portal with excel data","status":"broken","statusMessage":"KeyError: \"['Previous Production ID (A)', 'Previous Production (A)', 'Previous API / Intermediate (A)', 'Next Production (B)', 'ADE (mg) (A)', 'Shared Contact Surface Area (sqcm) (A-B)', 'Batch Size (kg) (B)'] not in index\"","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x000001751AC15AD0>\n\n    @allure.title(\"Validate production limits report\")\n    @allure.description(\"This test case test API to validate the production limit report generated on audit portal \"\n                        \"with excel data\")\n    @allure.link(\"https://app.clickup.com/t/85zt0kxcr\")\n    @pytest.mark.validate_production_limits_report\n    def test_validate_production_limits_report(self):\n        data = {}\n        columns_prod = [\"production_id\"]\n        production = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n    \n        production_id = production[\"production_id\"][0]\n    \n        update_data = {\"production_external_id\": production_id}\n    \n        data.update(update_data)\n    \n        production_limit = self.get_audit_portal.test_generate_production_limits_report_using_production(data)\n    \n        production_limit = json.loads(production_limit[\"response\"])\n    \n        production_data = pd.json_normalize(production_limit[\"data\"])\n    \n        columns_mapping = {\"equipmentName\": \"Equipment\", \"equipmentId\": \"Equipment ID\",\n                           \"prevProductionId\": \"Previous Production ID (A)\",\n                           \"prevProductNameA\": \"Previous Production (A)\",\n                           \"prevApiNameA\": \"Previous API / Intermediate (A)\",\n                           \"nextProductionId\": \"Next Production (B)\", \"pdeA\": \"ADE (mg) (A)\",\n                           \"minTdA\": \"Minimum Daily Dose (mg)(A)\", \"lddB\": \"Largest Daily Dose(mg)(B)\",\n                           \"sharedSurfaceArea\": \"Shared Contact Surface Area (sqcm) (A-B)\",\n                           \"toxicityL3\": \"sal_toxicity_mg_sqcm\", \"dosageL3\": \"sal_dosage_mg_sqcm\",\n                           \"generalL3\": \"sal_default_mg_sqcm\", \"minBsB\": \"Batch Size (kg) (B)\"}\n    \n        sheet_name = production_id.lower() + \"_productwise_sal\"\n    \n        excel_data = pd.read_excel(const.get_master_data(), sheet_name=sheet_name, usecols='A:P',\n                                   skiprows=[7, 14, 17, 18], nrows=20)\n    \n        allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n        allure.attach(production_data.to_html(), name=\"production_data\", attachment_type=allure.attachment_type.HTML)\n    \n        api_df = production_data[columns_mapping.keys()]\n>       excel_df = excel_data[columns_mapping.values()]\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\pandas\\core\\frame.py:3767: in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5877: in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Index(['Equipment', 'Equipment ID', 'Previous Production ID\\n(A)',\n       'Previous Production\\n(A)', 'Previous API / ...Area (sqcm)\\n(A-B)', 'sal_toxicity_mg_sqcm',\n       'sal_dosage_mg_sqcm', 'sal_default_mg_sqcm'],\n      dtype='object')\nkey = Index(['Equipment', 'Equipment ID', 'Previous Production ID (A)',\n       'Previous Production (A)', 'Previous API / In...al_toxicity_mg_sqcm', 'sal_dosage_mg_sqcm', 'sal_default_mg_sqcm',\n       'Batch Size (kg) (B)'],\n      dtype='object')\nindexer = array([ 0,  1, -1, -1, -1, -1, -1,  9, 10, -1, 13, 14, 15, -1],\n      dtype=int64), axis_name = 'columns'\n\n    def _raise_if_missing(self, key, indexer, axis_name: str_t) -> None:\n        \"\"\"\n        Check that indexer can be used to return a result.\n    \n        e.g. at least one element was found,\n        unless the list of keys was actually empty.\n    \n        Parameters\n        ----------\n        key : list-like\n            Targeted labels (only used to show correct error message).\n        indexer: array-like of booleans\n            Indices corresponding to the key,\n            (with -1 indicating not found).\n        axis_name : str\n    \n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found.\n        \"\"\"\n        if len(key) == 0:\n            return\n    \n        # Count missing values\n        missing_mask = indexer < 0\n        nmissing = missing_mask.sum()\n    \n        if nmissing:\n            # TODO: remove special-case; this is just to keep exception\n            #  message tests from raising while debugging\n            use_interval_msg = is_interval_dtype(self.dtype) or (\n                is_categorical_dtype(self.dtype)\n                # \"Index\" has no attribute \"categories\"  [attr-defined]\n                and is_interval_dtype(\n                    self.categories.dtype  # type: ignore[attr-defined]\n                )\n            )\n    \n            if nmissing == len(indexer):\n                if use_interval_msg:\n                    key = list(key)\n                raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n    \n            not_found = list(ensure_index(key)[missing_mask.nonzero()[0]].unique())\n>           raise KeyError(f\"{not_found} not in index\")\nE           KeyError: \"['Previous Production ID (A)', 'Previous Production (A)', 'Previous API / Intermediate (A)', 'Next Production (B)', 'ADE (mg) (A)', 'Shared Contact Surface Area (sqcm) (A-B)', 'Batch Size (kg) (B)'] not in index\"\n\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5941: KeyError","steps":[],"attachments":[{"uid":"3640865fd25ca4e5","name":"excel_data","source":"3640865fd25ca4e5.html","type":"text/html","size":7579},{"uid":"4ae9f795de128294","name":"production_data","source":"4ae9f795de128294.html","type":"text/html","size":10395}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"tag","value":"validate_production_limits_report"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"24652-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt0kxcr","url":"https://app.clickup.com/t/85zt0kxcr","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_production_limits_report","scenario","run(order=1)","audit_portal_limits","second"]},"source":"ee82ac27443b8405.json","parameterValues":[]}