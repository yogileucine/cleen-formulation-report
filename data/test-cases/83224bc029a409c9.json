{"uid":"83224bc029a409c9","name":"Create Protocol for bioburden residue verification for non split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_bioburden_residue_verification_protocol_sqm_ml","historyId":"03798c4c924fafb7218dfe10aa5e2e9b","time":{"start":1709039229901,"stop":1709039235732,"duration":5831},"description":"This test case tests API to Create Protocol bioburden residue verification for split when select based on policy for fungal & bacterial of direct, and  for bacterial & fungal of Indirect when default surface unit is sqm and volume is ml","descriptionHtml":"<p>This test case tests API to Create Protocol bioburden residue verification for split when select based on policy for fungal &amp; bacterial of direct, and  for bacterial &amp; fungal of Indirect when default surface unit is sqm and volume is ml</p>\n","status":"failed","statusMessage":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002CCA36050D0>\n\n    @allure.title(\"Create Protocol for bioburden residue verification for non split\")\n    @allure.description(\"This test case tests API to Create Protocol bioburden residue verification for split \"\n                        \"when select based on policy for fungal & bacterial of direct, and  for bacterial & \"\n                        \"fungal of Indirect when default surface unit is sqm and volume is ml\")\n    @allure.link(\"https://app.clickup.com/t/86cubgkqq\")\n    @pytest.mark.formulation\n    @pytest.mark.create_bioburden_residue_verification_protocol_sqm_ml\n    def test_create_bioburden_residue_verification_protocol_sqm_ml(self):\n        bioburden_data = {}\n        bioburden_data.update(self.DEFAULT_SURFACE_AREA_SQM)\n        unit = self.update_default_unit.test_get_default_unit(bioburden_data)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n        if unit != \"sqm\":\n            self.update_default_unit.test_update_default_unit(bioburden_data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"bioburden_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_bioburden.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = \\\n            self.protocol_bioburden.get_bioburden_direct_contact_surface_area_details(data)[\"response\"]\n        self.protocol_bioburden.DIRECT_BIOBURDEN_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = \\\n            self.protocol_bioburden.get_bioburden_indirect_contact_surface_area_details(data)[\"response\"]\n        self.protocol_bioburden.INDIRECT_BIOBURDEN_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_bioburden.direct_update_policy_payload()\n        indirect_equipment = self.protocol_bioburden.indirect_update_policy_payload()\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_fungal_policy\": \"policyBased\", \"direct_bacterial_policy\": \"policyBased\",\n                     \"indirect_fungal_policy\": \"policyBased\", \"indirect_bacterial_policy\": \"policyBased\"})\n        data.update({\n            \"update_bioburden_residue_verification_payload\": update_bioburden_residue_verification_fungal_bacterial_payload(\n                data)})\n    \n        updated_data = self.protocol_bioburden.update_bioburden_residue_verification_protocol(data)[\"response\"]\n        updated_data = json.loads(updated_data)[\"result\"][\"bioburdenResidueVerification\"]\n>       self.protocol_bioburden.compare_bioburden_limits_split(updated_data, \"direct\", \"fungal\")\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:3088: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_bioburden_residue_verification.ProtocolBioburdenAcceptanceCriteria object at 0x000002CCA186B9D0>\ndata = {'direct': {'bacterial': {'equipments': {'54': {'enabled': True, 'perUnitArea': {'unit': 'sqcm', 'value': 8}, 'perUnit...', 'value': 22}, 'perUnitVolume': {'unit': 'ml', 'value': 26}, 'rinseLimit': 34, ...}, ...}, 'policy': 'policyBased'}}}\nresponse_type = 'direct', microbial_type = 'fungal'\n\n    def compare_bioburden_limits_split(self, data, response_type, microbial_type):\n        microbial_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy_data = json.loads(microbial_policy)\n    \n        first_response = self.extract_values(policy_data, response_type)\n        second_response = self.get_limits(data, response_type, microbial_type)\n    \n        def extract_microbial_values(response, microbial_type):\n            unclassified_values = response.get('unclassified', {}).get(microbial_type)\n            default_values = response.get('default', {}).get(microbial_type)\n            return unclassified_values or default_values\n    \n        # Extract microbial values from the first response\n        swab_response = first_response.get(f'{response_type.capitalize()} - Swab', {})\n        microbial_swab_first_response = extract_microbial_values(swab_response, microbial_type)\n        per_unit_area_and_volume_first_response = None\n        if microbial_type == \"fungal\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'fungal_per_unit_volume')\n    \n        if microbial_type == \"bacterial\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'bacterial_per_unit_volume')\n    \n        # Extract microbial values from the second response more explicitly\n        second_response_key = list(second_response.keys())[0] if second_response else None\n        microbial_swab_second_response = second_response.get(second_response_key, {}).get('swab_limit', {}).get('value')\n        per_unit_area_and_volume_second_response = second_response.get(second_response_key, {}).get('swab_limit',\n                                                                                                    {}).get(\n            'perUnitArea', {}).get('value')\n    \n        # Compare values with assert statements\n        if microbial_swab_first_response is not None and microbial_swab_second_response is not None:\n            assert microbial_swab_first_response == microbial_swab_second_response, f\"{response_type.capitalize()} Swab {microbial_type.capitalize()} Values Do Not Match\"\n        if per_unit_area_and_volume_first_response is not None and per_unit_area_and_volume_second_response is not None:\n>           assert per_unit_area_and_volume_first_response == per_unit_area_and_volume_second_response, f\"{response_type.capitalize()} Swab perUnitAreaAndVolume Values Do Not Match\"\nE           AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match\n\ntests\\unit\\protocols\\protocol_bioburden_residue_verification.py:287: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":36,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1709038682534,"stop":1709038683052,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1709038683052,"stop":1709038683859,"duration":807},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_bioburden_residue_verification_protocol_sqm_ml"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cubgkqq","url":"https://app.clickup.com/t/86cubgkqq","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ad09199e0b3d5caa","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708873351520,"stop":1708873357636,"duration":6116}},{"uid":"b9426bed4643171","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708872961536,"stop":1708872961536,"duration":0}},{"uid":"5274a312af52dfe4","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708872541501,"stop":1708872541501,"duration":0}},{"uid":"de7daf7328b135ad","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708598682493,"stop":1708598695143,"duration":12650}},{"uid":"fcf4b4159ea8b2bd","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708597471167,"stop":1708597471167,"duration":0}},{"uid":"330d292022a4f8f7","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708596831354,"stop":1708596842872,"duration":11518}},{"uid":"831bac696fa81e3f","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595632800,"stop":1708595632800,"duration":0}},{"uid":"231054876acd2180","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595191421,"stop":1708595191421,"duration":0}},{"uid":"effb9f42e0a7beb3","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708589297572,"stop":1708589301404,"duration":3832}},{"uid":"bd42f1a1122d9d21","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708587031532,"stop":1708587040660,"duration":9128}},{"uid":"2a37fe60cb78b894","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708586198024,"stop":1708586198024,"duration":0}},{"uid":"afea2006c27bc055","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708521275420,"stop":1708521281153,"duration":5733}},{"uid":"f5d23d914f1e3470","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520657460,"stop":1708520657460,"duration":0}},{"uid":"f9eb5ccb0473f0a8","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520580479,"stop":1708520580479,"duration":0}},{"uid":"c71b6a65c7704d5b","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708519619714,"stop":1708519625472,"duration":5758}},{"uid":"9b0d97148dd9a170","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708519088692,"stop":1708519088692,"duration":0}},{"uid":"68734c30fc86fcb6","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708519070932,"stop":1708519070932,"duration":0}},{"uid":"cba36c09938be943","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708508754505,"stop":1708508758251,"duration":3746}},{"uid":"72954df2bbe64b9c","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708258544273,"stop":1708258550679,"duration":6406}},{"uid":"29953c617be8ef05","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708246737615,"stop":1708246741316,"duration":3701}},{"uid":"c874a475e2b87b6d","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708241884710,"stop":1708241889072,"duration":4362}},{"uid":"7622e29dc5e03ec6","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708241643885,"stop":1708241643885,"duration":0}},{"uid":"68fd47df217dee0a","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708235045961,"stop":1708235045961,"duration":0}},{"uid":"7cd626957cd114ed","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708232037393,"stop":1708232037393,"duration":0}},{"uid":"ee915e3171ded5a5","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231704867,"stop":1708231704867,"duration":0}},{"uid":"5de5c045c77d9994","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231509538,"stop":1708231509538,"duration":0}},{"uid":"7d000cdd5470be92","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707903221382,"stop":1707903225185,"duration":3803}},{"uid":"3387ab5072154328","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707816299446,"stop":1707816304264,"duration":4818}},{"uid":"e5b2c8fd57ba68bf","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707801430614,"stop":1707801435854,"duration":5240}},{"uid":"9b66bf7ac1a398ed","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707800941528,"stop":1707800941528,"duration":0}},{"uid":"29338e0af9455740","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707800524678,"stop":1707800530149,"duration":5471}},{"uid":"7d837c3666c4a25c","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707799790448,"stop":1707799794739,"duration":4291}},{"uid":"5fef3483d2cd40fa","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799372311,"stop":1707799372311,"duration":0}},{"uid":"9b8bf184b3f67f9c","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799327156,"stop":1707799327156,"duration":0}},{"uid":"12479352ac1629d8","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1707799308228,"stop":1707799308228,"duration":0}},{"uid":"bd4c9cf2cbf51f7e","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707719837404,"stop":1707719841281,"duration":3877}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["multi_production_protocol","scenario","formulation","create_bioburden_residue_verification_protocol_sqm_ml"]},"source":"83224bc029a409c9.json","parameterValues":[]}