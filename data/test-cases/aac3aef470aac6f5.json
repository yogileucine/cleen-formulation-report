{"uid":"aac3aef470aac6f5","name":"Validate master data snapshot report for Productions","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_master_data_snapshot_report_productions","historyId":"3408397e4f85bff8605d84adb72fee4b","time":{"start":1707799348122,"stop":1707799348356,"duration":234},"description":"This test case test API to validate the master data snapshot report for productions with excelfile data","descriptionHtml":"<p>This test case test API to validate the master data snapshot report for productions with excelfile data</p>\n","status":"failed","statusMessage":"AssertionError: Mismatch in column 'Production Id' at index (0) Auto-Production-SUXZF Not Equal PRD1-P1","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x00000125BAF8C190>\n\n    @allure.title(\"Validate master data snapshot report for Productions\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for productions with excel\"\n                        \"file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9qzdn\")\n    @pytest.mark.validate_master_data_snapshot_report_productions\n    def test_validate_master_data_snapshot_report_productions(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"Productions\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"externalId\": \"Production Id\", \"batchSize\": \"Min BS (kg)\",\n                               \"productId\": \"Product Id\", \"totalInsolubleLoad\": \"Total Insoluble Load\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"production\", usecols='A:D', nrows=39)\n            allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df = master_data_snapshot[columns_mapping.keys()]\n            excel_df = excel_data[columns_mapping.values()]\n            allure.attach(excel_df.to_html(), name=\"excel_df\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n            excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n            columns_to_convert = ['batchSize', 'totalInsolubleLoad']\n            api_df_sorted[columns_to_convert] = api_df_sorted[columns_to_convert].apply(pd.to_numeric, errors='coerce')\n    \n            allure.attach(excel_df_sorted.to_html(), name=\"excel_df_sort\", attachment_type=allure.attachment_type.HTML)\n            allure.attach(api_df_sorted.to_html(), name=\"api_sort\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n    \n            max_rows = max(len(api_df_sorted), len(excel_df_sorted))\n    \n            numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n            string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n            for row in range(max_rows):\n                if row >= len(excel_df_sorted):\n                    mismatched_rows.append(row)\n                    continue\n                comparison_successful = True\n                for column in string_columns:\n                    api_value = api_df_sorted.loc[row, column]\n                    excel_value = excel_df_sorted.loc[row, column]\n>                   comparison_successful &= compare_portal(api_value, excel_value, column, row)\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:437: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse_value = 'Auto-Production-SUXZF', excel_value = 'PRD1-P1', column = 'Production Id', row = 0\n\n    def compare_portal(response_value, excel_value, column, row):\n        error_message = f\"Mismatch in column '{column}' at index ({row})\"\n    \n        if response_value == \"-\" and math.isnan(excel_value):\n            return True\n    \n        if str(response_value) != \"#N/A\" and str(excel_value) != \"#N/A\":\n            if isinstance(response_value, (int, float)) and isinstance(excel_value, (int, float)):\n                if math.isnan(response_value) or math.isnan(excel_value):\n                    return True\n                if response_value < 1:\n                    length = (floor(log10(response_value)) - 1)\n                else:\n                    length = 15 - len(str(int(response_value)))\n                if length < 0:\n                    response_value = (round(response_value, -length + 3))\n                    excel_value = (round(excel_value, -length + 1))\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n                else:\n                    response_value = round(response_value, 3)\n                    excel_value = round(excel_value, 3)\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n            else:\n>               assert str(response_value).lower() == str(excel_value).lower(), error_message + \" \" + str(\n                    response_value) + \" Not Equal \" + str(excel_value)\nE               AssertionError: Mismatch in column 'Production Id' at index (0) Auto-Production-SUXZF Not Equal PRD1-P1\n\nutil\\common_methods.py:99: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1707799338089,"stop":1707799338563,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1707799338563,"stop":1707799339608,"duration":1045},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"This test case test API to validate the master data snapshot report for productions with excelfile data","status":"failed","statusMessage":"AssertionError: Mismatch in column 'Production Id' at index (0) Auto-Production-SUXZF Not Equal PRD1-P1","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x00000125BAF8C190>\n\n    @allure.title(\"Validate master data snapshot report for Productions\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for productions with excel\"\n                        \"file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9qzdn\")\n    @pytest.mark.validate_master_data_snapshot_report_productions\n    def test_validate_master_data_snapshot_report_productions(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"Productions\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"externalId\": \"Production Id\", \"batchSize\": \"Min BS (kg)\",\n                               \"productId\": \"Product Id\", \"totalInsolubleLoad\": \"Total Insoluble Load\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"production\", usecols='A:D', nrows=39)\n            allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df = master_data_snapshot[columns_mapping.keys()]\n            excel_df = excel_data[columns_mapping.values()]\n            allure.attach(excel_df.to_html(), name=\"excel_df\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n            excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n            columns_to_convert = ['batchSize', 'totalInsolubleLoad']\n            api_df_sorted[columns_to_convert] = api_df_sorted[columns_to_convert].apply(pd.to_numeric, errors='coerce')\n    \n            allure.attach(excel_df_sorted.to_html(), name=\"excel_df_sort\", attachment_type=allure.attachment_type.HTML)\n            allure.attach(api_df_sorted.to_html(), name=\"api_sort\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n    \n            max_rows = max(len(api_df_sorted), len(excel_df_sorted))\n    \n            numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n            string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n            for row in range(max_rows):\n                if row >= len(excel_df_sorted):\n                    mismatched_rows.append(row)\n                    continue\n                comparison_successful = True\n                for column in string_columns:\n                    api_value = api_df_sorted.loc[row, column]\n                    excel_value = excel_df_sorted.loc[row, column]\n>                   comparison_successful &= compare_portal(api_value, excel_value, column, row)\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:437: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse_value = 'Auto-Production-SUXZF', excel_value = 'PRD1-P1', column = 'Production Id', row = 0\n\n    def compare_portal(response_value, excel_value, column, row):\n        error_message = f\"Mismatch in column '{column}' at index ({row})\"\n    \n        if response_value == \"-\" and math.isnan(excel_value):\n            return True\n    \n        if str(response_value) != \"#N/A\" and str(excel_value) != \"#N/A\":\n            if isinstance(response_value, (int, float)) and isinstance(excel_value, (int, float)):\n                if math.isnan(response_value) or math.isnan(excel_value):\n                    return True\n                if response_value < 1:\n                    length = (floor(log10(response_value)) - 1)\n                else:\n                    length = 15 - len(str(int(response_value)))\n                if length < 0:\n                    response_value = (round(response_value, -length + 3))\n                    excel_value = (round(excel_value, -length + 1))\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n                else:\n                    response_value = round(response_value, 3)\n                    excel_value = round(excel_value, 3)\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n            else:\n>               assert str(response_value).lower() == str(excel_value).lower(), error_message + \" \" + str(\n                    response_value) + \" Not Equal \" + str(excel_value)\nE               AssertionError: Mismatch in column 'Production Id' at index (0) Auto-Production-SUXZF Not Equal PRD1-P1\n\nutil\\common_methods.py:99: AssertionError","steps":[],"attachments":[{"uid":"e71f1f6fb41007c6","name":"excel_data","source":"e71f1f6fb41007c6.html","type":"text/html","size":5206},{"uid":"f739f1aa1fc355be","name":"excel_df","source":"f739f1aa1fc355be.html","type":"text/html","size":5206},{"uid":"ac4f12b66f9ecf87","name":"excel_df_sort","source":"ac4f12b66f9ecf87.html","type":"text/html","size":5206},{"uid":"d2913c8a43b867e","name":"api_sort","source":"d2913c8a43b867e.html","type":"text/html","size":5349}],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"tag","value":"validate_master_data_snapshot_report_productions"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"25240-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt9qzdn","url":"https://app.clickup.com/t/85zt9qzdn","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_master_data_snapshot_report_productions","scenario","run(order=1)","audit_portal_limits","second"]},"source":"aac3aef470aac6f5.json","parameterValues":[]}