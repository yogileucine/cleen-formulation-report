{"uid":"e5184739ec0c36f0","name":"Create protocol active residue verification for direct indirect custom","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_active_select_direct_indirect_custom_multi_production_protocol","historyId":"5dabe804bdde64be9e828f015151a156","time":{"start":1708586752403,"stop":1708586755498,"duration":3095},"description":"This test case tests API to create protocol with active residue verification when select custom for both direct and indirect","descriptionHtml":"<p>This test case tests API to create protocol with active residue verification when select custom for both direct and indirect</p>\n","status":"broken","statusMessage":"KeyError: 'Worksheet custom_active does not exist.'","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x00000277039F84D0>\n\n    @allure.title(\"Create protocol active residue verification for direct indirect custom\")\n    @allure.description(\"This test case tests API to create protocol with active residue verification when select \"\n                        \"custom for both direct and indirect\")\n    @allure.link(\"https://app.clickup.com/t/86cumc47r\")\n    @pytest.mark.formulation  # bop =based on policy\n    @pytest.mark.active_select_direct_indirect_custom_multi_production_protocol\n    def test_active_select_direct_indirect_custom_multi_production_protocol(self):\n        policy_data = {\"useDosage\": True, \"useToxicity\": True, \"useProductLimit\": True, \"useARL\": True,\n                       \"salMassUnit\": \"mg\", \"ignoreCombo\": False}\n        active_data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        sal_unit = get_policy[\"limitRepresentation\"][\"productAndEquipmentLimits\"][\"salMassUnit\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        active_data.update({\"update_policy_payload\": update_policy})\n        policy_data.update(self.DEFAULT_SURFACE_AREA_SQCM)\n        self.update_default_unit.test_update_default_unit(policy_data)\n    \n        unit = self.update_default_unit.test_get_default_unit(policy_data)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n    \n        if get_policy != update_policy[\"data\"] or sal_unit != \"mg\" or unit != \"sqcm\":\n            self.update_active_policy.test_update_active_policy(active_data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n    \n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"actives_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n        self.active_criteria.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n        self.protocol_verification.update_inspection_protocol(data)\n        direct_active_sal = self.active_criteria.get_active_custom_direct_contact_surface_area_details(data)[\"response\"]\n        self.active_criteria.CUSTOM_DIRECT_ACTIVE_EQUIPMENT = json.loads(direct_active_sal)\n        indirect_active_sal = self.active_criteria.get_active_custom_indirect_contact_surface_area_details(data)[\"response\"]\n        self.active_criteria.CUSTOM_INDIRECT_ACTIVE_EQUIPMENT = json.loads(indirect_active_sal)\n        direct_equipment = self.active_criteria.custom_direct_update_policy_payload()[\"equipments\"]\n        indirect_equipment = self.active_criteria.custom_indirect_update_policy_payload()[\"equipments\"]\n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"policy_wise\": \"custom\", \"indirect_policy\": \"custom\"})\n>       data.update({\"update_active_residue_verification_payload\": active_residue_verification_payload(data)})\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:550: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npayload\\facility\\protocol_payload\\on_demand_protocol_payload.py:85: in active_residue_verification_payload\n    direct_limit = calculated_sal_excel(sheet_name=\"custom_active\",\npayload\\facility\\protocol_payload\\on_demand_protocol_payload.py:122: in calculated_sal_excel\n    manually_calculated_limit = Excel.read_excel_columns_name_row_value(const.get_master_data(),\nutil\\excel.py:27: in read_excel_columns_name_row_value\n    sheet = wb[sheet_name]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <openpyxl.workbook.workbook.Workbook object at 0x00000277050F2950>, key = 'custom_active'\n\n    def __getitem__(self, key):\n        \"\"\"Returns a worksheet by its name.\n    \n        :param name: the name of the worksheet to look for\n        :type name: string\n    \n        \"\"\"\n        for sheet in self.worksheets + self.chartsheets:\n            if sheet.title == key:\n                return sheet\n>       raise KeyError(\"Worksheet {0} does not exist.\".format(key))\nE       KeyError: 'Worksheet custom_active does not exist.'\n\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:287: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708586223150,"stop":1708586223921,"duration":771},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708586223921,"stop":1708586225274,"duration":1353},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"active_select_direct_indirect_custom_multi_production_protocol"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"19144-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cumc47r","url":"https://app.clickup.com/t/86cumc47r","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","formulation","active_select_direct_indirect_custom_multi_production_protocol"]},"source":"e5184739ec0c36f0.json","parameterValues":[]}