{"uid":"abaa0efb26cb6a4b","name":"Validate master data snapshot report for production am mapping","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_master_data_snapshot_report_production_am_mapping","historyId":"09dd91dd811d8917d320ae241b7c1325","time":{"start":1708231842178,"stop":1708231842360,"duration":182},"description":"This test case test API to validate the master data snapshot report for production am mapping with excel file data","descriptionHtml":"<p>This test case test API to validate the master data snapshot report for production am mapping with excel file data</p>\n","status":"broken","statusMessage":"KeyError: \"['productId', 'apiName'] not in index\"","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x000001A873936250>\n\n    @allure.title(\"Validate master data snapshot report for production am mapping\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for production \"\n                        \"am mapping with excel file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9r0dk\")\n    @pytest.mark.validate_master_data_snapshot_report_production_am_mapping\n    def test_validate_master_data_snapshot_report_production_am_mapping(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"ProductionAnalyticalMethodMapping\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"am\": \"Analytical Method\", \"id\": \"Production Id\", \"productId\": \"Product Id\",\n                               \"apiName\": \"API Name\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"prd-am mapping\", usecols='A:D', nrows=31)\n            allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n    \n>           api_df = master_data_snapshot[columns_mapping.keys()]\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:856: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\pandas\\core\\frame.py:3767: in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5877: in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Index(['id', 'materialType', 'materialName', 'am'], dtype='object'), key = Index(['am', 'id', 'productId', 'apiName'], dtype='object')\nindexer = array([ 3,  0, -1, -1], dtype=int64), axis_name = 'columns'\n\n    def _raise_if_missing(self, key, indexer, axis_name: str_t) -> None:\n        \"\"\"\n        Check that indexer can be used to return a result.\n    \n        e.g. at least one element was found,\n        unless the list of keys was actually empty.\n    \n        Parameters\n        ----------\n        key : list-like\n            Targeted labels (only used to show correct error message).\n        indexer: array-like of booleans\n            Indices corresponding to the key,\n            (with -1 indicating not found).\n        axis_name : str\n    \n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found.\n        \"\"\"\n        if len(key) == 0:\n            return\n    \n        # Count missing values\n        missing_mask = indexer < 0\n        nmissing = missing_mask.sum()\n    \n        if nmissing:\n            # TODO: remove special-case; this is just to keep exception\n            #  message tests from raising while debugging\n            use_interval_msg = is_interval_dtype(self.dtype) or (\n                is_categorical_dtype(self.dtype)\n                # \"Index\" has no attribute \"categories\"  [attr-defined]\n                and is_interval_dtype(\n                    self.categories.dtype  # type: ignore[attr-defined]\n                )\n            )\n    \n            if nmissing == len(indexer):\n                if use_interval_msg:\n                    key = list(key)\n                raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n    \n            not_found = list(ensure_index(key)[missing_mask.nonzero()[0]].unique())\n>           raise KeyError(f\"{not_found} not in index\")\nE           KeyError: \"['productId', 'apiName'] not in index\"\n\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5941: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708231831983,"stop":1708231832370,"duration":387},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708231832370,"stop":1708231833427,"duration":1057},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"This test case test API to validate the master data snapshot report for production am mapping with excel file data","status":"broken","statusMessage":"KeyError: \"['productId', 'apiName'] not in index\"","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x000001A873936250>\n\n    @allure.title(\"Validate master data snapshot report for production am mapping\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for production \"\n                        \"am mapping with excel file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9r0dk\")\n    @pytest.mark.validate_master_data_snapshot_report_production_am_mapping\n    def test_validate_master_data_snapshot_report_production_am_mapping(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"ProductionAnalyticalMethodMapping\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"am\": \"Analytical Method\", \"id\": \"Production Id\", \"productId\": \"Product Id\",\n                               \"apiName\": \"API Name\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"prd-am mapping\", usecols='A:D', nrows=31)\n            allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n    \n>           api_df = master_data_snapshot[columns_mapping.keys()]\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:856: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\pandas\\core\\frame.py:3767: in __getitem__\n    indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5877: in _get_indexer_strict\n    self._raise_if_missing(keyarr, indexer, axis_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Index(['id', 'materialType', 'materialName', 'am'], dtype='object'), key = Index(['am', 'id', 'productId', 'apiName'], dtype='object')\nindexer = array([ 3,  0, -1, -1], dtype=int64), axis_name = 'columns'\n\n    def _raise_if_missing(self, key, indexer, axis_name: str_t) -> None:\n        \"\"\"\n        Check that indexer can be used to return a result.\n    \n        e.g. at least one element was found,\n        unless the list of keys was actually empty.\n    \n        Parameters\n        ----------\n        key : list-like\n            Targeted labels (only used to show correct error message).\n        indexer: array-like of booleans\n            Indices corresponding to the key,\n            (with -1 indicating not found).\n        axis_name : str\n    \n        Raises\n        ------\n        KeyError\n            If at least one key was requested but none was found.\n        \"\"\"\n        if len(key) == 0:\n            return\n    \n        # Count missing values\n        missing_mask = indexer < 0\n        nmissing = missing_mask.sum()\n    \n        if nmissing:\n            # TODO: remove special-case; this is just to keep exception\n            #  message tests from raising while debugging\n            use_interval_msg = is_interval_dtype(self.dtype) or (\n                is_categorical_dtype(self.dtype)\n                # \"Index\" has no attribute \"categories\"  [attr-defined]\n                and is_interval_dtype(\n                    self.categories.dtype  # type: ignore[attr-defined]\n                )\n            )\n    \n            if nmissing == len(indexer):\n                if use_interval_msg:\n                    key = list(key)\n                raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n    \n            not_found = list(ensure_index(key)[missing_mask.nonzero()[0]].unique())\n>           raise KeyError(f\"{not_found} not in index\")\nE           KeyError: \"['productId', 'apiName'] not in index\"\n\nvenv\\Lib\\site-packages\\pandas\\core\\indexes\\base.py:5941: KeyError","steps":[],"attachments":[{"uid":"9a1d99c92dc4d078","name":"excel_data","source":"9a1d99c92dc4d078.html","type":"text/html","size":2525}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"tag","value":"validate_master_data_snapshot_report_production_am_mapping"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"38200-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt9r0dk","url":"https://app.clickup.com/t/85zt9r0dk","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","run(order=1)","audit_portal_limits","validate_master_data_snapshot_report_production_am_mapping","second"]},"source":"abaa0efb26cb6a4b.json","parameterValues":[]}