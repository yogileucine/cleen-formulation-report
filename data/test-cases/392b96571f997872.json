{"uid":"392b96571f997872","name":"Select Lowest SAL amongst the selected Production group for a material","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_active_select_production_group_multi_production_protocol","historyId":"27fa883c547523bd35b48a763bfb3818","time":{"start":1708236873813,"stop":1708236873917,"duration":104},"description":"This test case tests API to Select Lowest SAL amongst the selected Production group for a material","descriptionHtml":"<p>This test case tests API to Select Lowest SAL amongst the selected Production group for a material</p>\n","status":"broken","statusMessage":"KeyError: 'Worksheet config does not exist.'","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001ED138EE190>\n\n    @allure.title(\"Select Lowest SAL amongst the selected Production group for a material\")\n    @allure.description(\"This test case tests API to Select Lowest SAL amongst the selected Production group for a \"\n                        \"material\")\n    @allure.link(\"https://app.clickup.com/t/86cu5qc4z\")\n    @pytest.mark.formulation\n    @pytest.mark.active_select_production_group_multi_production_protocol\n    def test_active_select_production_group_multi_production_protocol(self):\n        policy_data = {\"useDosage\": True, \"useToxicity\": True, \"useProductLimit\": True, \"useARL\": True,\n                       \"salMassUnit\": \"mg\", \"ignoreCombo\": False}\n        active_data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        sal_unit = get_policy[\"limitRepresentation\"][\"productAndEquipmentLimits\"][\"salMassUnit\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        active_data.update({\"update_policy_payload\": update_policy})\n        policy_data.update(self.DEFAULT_SURFACE_AREA_SQCM)\n        self.update_default_unit.test_update_default_unit(policy_data)\n    \n        unit = self.update_default_unit.test_get_default_unit(policy_data)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n    \n        if get_policy != update_policy[\"data\"] or sal_unit != \"mg\" or unit != \"sqcm\":\n            self.update_active_policy.test_update_active_policy(active_data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n>       productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:370: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\excel.py:62: in read_excel_columns\n    sheet = wb1[sheet_name]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <openpyxl.workbook.workbook.Workbook object at 0x000001ED13810D50>, key = 'config'\n\n    def __getitem__(self, key):\n        \"\"\"Returns a worksheet by its name.\n    \n        :param name: the name of the worksheet to look for\n        :type name: string\n    \n        \"\"\"\n        for sheet in self.worksheets + self.chartsheets:\n            if sheet.title == key:\n                return sheet\n>       raise KeyError(\"Worksheet {0} does not exist.\".format(key))\nE       KeyError: 'Worksheet config does not exist.'\n\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:287: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708236865235,"stop":1708236865545,"duration":310},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708236865545,"stop":1708236866420,"duration":875},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"active_select_production_group_multi_production_protocol"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"29484-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu5qc4z","url":"https://app.clickup.com/t/86cu5qc4z","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["active_select_production_group_multi_production_protocol","multi_production_protocol","scenario","formulation"]},"source":"392b96571f997872.json","parameterValues":[]}