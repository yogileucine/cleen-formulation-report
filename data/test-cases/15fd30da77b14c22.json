{"uid":"15fd30da77b14c22","name":"Create Protocol and validate active residue verification SAL when surface area unit is sqcm","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_active_residue_direct_indirect_sal_for_ug_sqin","historyId":"cc919a92b336acdbde1f6b52132b4286","time":{"start":1708236875831,"stop":1708236876099,"duration":268},"description":"This test case tests API to Create Protocol and validate active residue verification SAL when surface area unit is sqin and SAL mass unit is ug","descriptionHtml":"<p>This test case tests API to Create Protocol and validate active residue verification SAL when surface area unit is sqin and SAL mass unit is ug</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\"}}","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001ED138EFA10>\n\n    @allure.title(\"Create Protocol and validate active residue verification SAL when surface area unit is sqcm\")\n    @allure.description(\"This test case tests API to Create Protocol and validate active residue verification SAL \"\n                        \"when surface area unit is sqin and SAL mass unit is ug\")\n    @allure.link(\"https://app.clickup.com/t/86cu7vhvy\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_active_residue_direct_indirect_sal_for_ug_sqin\n    def test_validate_active_residue_direct_indirect_sal_for_ug_sqin(self):\n        policy_data = {\"useDosage\": True, \"useToxicity\": True, \"useProductLimit\": True, \"useARL\": True,\n                       \"salMassUnit\": \"ug\", \"ignoreCombo\": False}\n        active_data = {}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        sal_unit = get_policy[\"limitRepresentation\"][\"productAndEquipmentLimits\"][\"salMassUnit\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        active_data.update({\"update_policy_payload\": update_policy})\n        update_policy.update(self.DEFAULT_SURFACE_AREA_SQIN)\n    \n        unit = self.update_default_unit.test_get_default_unit(update_policy)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n    \n        if get_policy != update_policy[\"data\"] or sal_unit != \"ug\" or unit != \"sqin\":\n            self.update_default_unit.test_update_default_unit(update_policy)\n>           self.change_assessment.test_start_cleaning_assessment(scenario=True)\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:674: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\change_assessment\\test_cleaning_assessment.py:32: in test_start_cleaning_assessment\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [409]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708236865235,"stop":1708236865545,"duration":310},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708236865545,"stop":1708236866420,"duration":875},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_active_residue_direct_indirect_sal_for_ug_sqin"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"29484-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu7vhvy","url":"https://app.clickup.com/t/86cu7vhvy","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","formulation","validate_active_residue_direct_indirect_sal_for_ug_sqin"]},"source":"15fd30da77b14c22.json","parameterValues":[]}