{"uid":"4c08513ad939d9d9","name":"Create Protocol and add custom cleaning agent residue verification SAL","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_select_cleaning_agent_direct_cleaning_agent_policy_indirect_custom","historyId":"d19eb0a484e4a721edf269ecc500310b","time":{"start":1708246658110,"stop":1708246659898,"duration":1788},"description":"This test case tests API to Create Protocol and add custom cleaning agent residue verification SAL for Indirect and cleaning agent SAL limits for contact surface area","descriptionHtml":"<p>This test case tests API to Create Protocol and add custom cleaning agent residue verification SAL for Indirect and cleaning agent SAL limits for contact surface area</p>\n","status":"failed","statusMessage":"AssertionError: SAL Limits from Excel and Application are not same 0.0010758 Not Equal 107.6883621","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001ED495693D0>\n\n    @allure.title(\"Create Protocol and add custom cleaning agent residue verification SAL\")\n    @allure.description(\n        \"This test case tests API to Create Protocol and add custom cleaning agent residue verification \"\n        \"SAL for Indirect and cleaning agent SAL limits for contact surface area\")\n    @allure.link(\"https://app.clickup.com/t/86cu5qdyr\")\n    @pytest.mark.formulation\n    @pytest.mark.select_cleaning_agent_direct_cleaning_agent_policy_indirect_custom\n    def test_select_cleaning_agent_direct_cleaning_agent_policy_indirect_custom(self):\n        cleaning_agent_data = {}\n    \n        cleaning_agent_data.update(self.DEFAULT_SURFACE_AREA_SQCM)\n        unit = self.update_default_unit.test_get_default_unit(cleaning_agent_data)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n    \n        if unit != \"sqcm\":\n            self.update_default_unit.test_update_default_unit(cleaning_agent_data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n    \n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"cleaning_agent\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n        self.protocol_cleaning_agent.PROTOCOL_CLEANING_AGENT_EQUIPMENT = json.loads(get_equipment)\n        self.protocol_verification.update_inspection_protocol(data)\n        direct_equipments_sal = self.protocol_cleaning_agent.get_cleaning_agent_direct_details_based_on_policy(data)[\n            \"response\"]\n        self.protocol_cleaning_agent.DIRECT_CLEANING_AGENT_EQUIPMENT = json.loads(direct_equipments_sal)\n    \n        custom_indirect_equipment_sal = self.protocol_cleaning_agent.get_cleaning_agent_indirect_details_custom(data)[\n            \"response\"]\n        self.protocol_cleaning_agent.CUSTOM_INDIRECT_CLEANING_AGENT_EQUIPMENT = json.loads(\n            custom_indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_cleaning_agent.direct_cleaning_agent_update_policy_payload()[\n            \"equipments\"]\n        indirect_equipment = self.protocol_cleaning_agent.custom_indirect_cleaning_agent_update_policy_payload()[\n            \"equipments\"]\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_policy\": \"cleaningAgentSal\", \"indirect_policy\": \"custom\"})\n        data.update(\n            {\"update_cleaning_agent_residue_verification_payload\": cleaning_agent_residue_verification_payload(\n                data)})\n        self.protocol_cleaning_agent.update_cleaning_agent_residue_verification_protocol(data)\n        columns = [\"cleaning_agent\", \"final_sal_mg_sqcm\"]\n>       self.protocol_cleaning_agent.compare_protocols_sal_limits(\n            self.protocol_cleaning_agent.DIRECT_CLEANING_AGENT_EQUIPMENT, columns)\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:1036: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\protocols\\protocol_cleaning_agent_criteria.py:148: in compare_protocols_sal_limits\n    compare_chemical(i, j, columns, self.ERROR_MESSAGE)\nutil\\common_methods.py:35: in compare_chemical\n    compare(swab_rinse[i], v, error_message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = 0.0010758, sal2 = 107.6883621, error_message = 'SAL Limits from Excel and Application are not same'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n>               assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\nE               AssertionError: SAL Limits from Excel and Application are not same 0.0010758 Not Equal 107.6883621\n\nutil\\common_methods.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708246535629,"stop":1708246536176,"duration":547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708246536176,"stop":1708246537058,"duration":882},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"select_cleaning_agent_direct_cleaning_agent_policy_indirect_custom"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu5qdyr","url":"https://app.clickup.com/t/86cu5qdyr","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","formulation","select_cleaning_agent_direct_cleaning_agent_policy_indirect_custom"]},"source":"4c08513ad939d9d9.json","parameterValues":[]}