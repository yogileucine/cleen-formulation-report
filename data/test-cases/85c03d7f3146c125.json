{"uid":"85c03d7f3146c125","name":"Create Protocol for bioburden residue verification for non split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_bioburden_residue_verification_protocol_sqin_l","historyId":"0f332baa9b23527b091a01e274a45d91","time":{"start":1709039250168,"stop":1709039252941,"duration":2773},"description":"This test case tests API to Create Protocol bioburden residue verification for split when select based on policy for fungal & bacterial of direct, and  for bacterial & fungal of Indirect when default surface unit is sqin and volume is L","descriptionHtml":"<p>This test case tests API to Create Protocol bioburden residue verification for split when select based on policy for fungal &amp; bacterial of direct, and  for bacterial &amp; fungal of Indirect when default surface unit is sqin and volume is L</p>\n","status":"failed","statusMessage":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002CCA3615790>\n\n    @allure.title(\"Create Protocol for bioburden residue verification for non split\")\n    @allure.description(\"This test case tests API to Create Protocol bioburden residue verification for split \"\n                        \"when select based on policy for fungal & bacterial of direct, and  for bacterial & \"\n                        \"fungal of Indirect when default surface unit is sqin and volume is L\")\n    @allure.link(\"https://app.clickup.com/t/86cuhb2m1\")\n    @pytest.mark.formulation\n    @pytest.mark.create_bioburden_residue_verification_protocol_sqin_l\n    def test_create_bioburden_residue_verification_protocol_sqin_l(self):\n        bioburden_data = {}\n        bioburden_data.update(self.DEFAULT_SURFACE_AREA_SQIN)\n        unit = self.update_default_unit.test_get_default_unit(bioburden_data)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n        bioburden_data.update(self.DEFAULT_VOLUME_L)\n        volume_unit = self.update_default_unit.test_get_default_unit(bioburden_data)[\"response\"]\n        volume_unit = json.loads(volume_unit)[\"default_units\"][\"unit\"]\n    \n        if unit != \"sqin\" and volume_unit != \"L\":\n            self.update_default_unit.test_update_default_unit(bioburden_data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"bioburden_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_bioburden.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = \\\n            self.protocol_bioburden.get_bioburden_direct_contact_surface_area_details(data)[\"response\"]\n        self.protocol_bioburden.DIRECT_BIOBURDEN_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = \\\n            self.protocol_bioburden.get_bioburden_indirect_contact_surface_area_details(data)[\"response\"]\n        self.protocol_bioburden.INDIRECT_BIOBURDEN_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_bioburden.direct_update_policy_payload()\n        indirect_equipment = self.protocol_bioburden.indirect_update_policy_payload()\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_fungal_policy\": \"policyBased\", \"direct_bacterial_policy\": \"policyBased\",\n                     \"indirect_fungal_policy\": \"policyBased\", \"indirect_bacterial_policy\": \"policyBased\"})\n        data.update({\n            \"update_bioburden_residue_verification_payload\": update_bioburden_residue_verification_fungal_bacterial_payload(\n                data)})\n    \n        updated_data = self.protocol_bioburden.update_bioburden_residue_verification_protocol(data)[\"response\"]\n        updated_data = json.loads(updated_data)[\"result\"][\"bioburdenResidueVerification\"]\n>       self.protocol_bioburden.compare_bioburden_limits_split(updated_data, \"direct\", \"fungal\")\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:3324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_bioburden_residue_verification.ProtocolBioburdenAcceptanceCriteria object at 0x000002CCA186B9D0>\ndata = {'direct': {'bacterial': {'equipments': {'54': {'enabled': True, 'perUnitArea': {'unit': 'sqcm', 'value': 8.0000000000...', 'value': 22}, 'perUnitVolume': {'unit': 'ml', 'value': 26}, 'rinseLimit': 34, ...}, ...}, 'policy': 'policyBased'}}}\nresponse_type = 'direct', microbial_type = 'fungal'\n\n    def compare_bioburden_limits_split(self, data, response_type, microbial_type):\n        microbial_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy_data = json.loads(microbial_policy)\n    \n        first_response = self.extract_values(policy_data, response_type)\n        second_response = self.get_limits(data, response_type, microbial_type)\n    \n        def extract_microbial_values(response, microbial_type):\n            unclassified_values = response.get('unclassified', {}).get(microbial_type)\n            default_values = response.get('default', {}).get(microbial_type)\n            return unclassified_values or default_values\n    \n        # Extract microbial values from the first response\n        swab_response = first_response.get(f'{response_type.capitalize()} - Swab', {})\n        microbial_swab_first_response = extract_microbial_values(swab_response, microbial_type)\n        per_unit_area_and_volume_first_response = None\n        if microbial_type == \"fungal\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'fungal_per_unit_volume')\n    \n        if microbial_type == \"bacterial\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'bacterial_per_unit_volume')\n    \n        # Extract microbial values from the second response more explicitly\n        second_response_key = list(second_response.keys())[0] if second_response else None\n        microbial_swab_second_response = second_response.get(second_response_key, {}).get('swab_limit', {}).get('value')\n        per_unit_area_and_volume_second_response = second_response.get(second_response_key, {}).get('swab_limit',\n                                                                                                    {}).get(\n            'perUnitArea', {}).get('value')\n    \n        # Compare values with assert statements\n        if microbial_swab_first_response is not None and microbial_swab_second_response is not None:\n            assert microbial_swab_first_response == microbial_swab_second_response, f\"{response_type.capitalize()} Swab {microbial_type.capitalize()} Values Do Not Match\"\n        if per_unit_area_and_volume_first_response is not None and per_unit_area_and_volume_second_response is not None:\n>           assert per_unit_area_and_volume_first_response == per_unit_area_and_volume_second_response, f\"{response_type.capitalize()} Swab perUnitAreaAndVolume Values Do Not Match\"\nE           AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match\n\ntests\\unit\\protocols\\protocol_bioburden_residue_verification.py:287: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":36,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1709038682534,"stop":1709038683052,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1709038683052,"stop":1709038683859,"duration":807},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_bioburden_residue_verification_protocol_sqin_l"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuhb2m1","url":"https://app.clickup.com/t/86cuhb2m1","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d389d182060f2a76","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708873373261,"stop":1708873376185,"duration":2924}},{"uid":"4d8beda529209da3","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708872961590,"stop":1708872961590,"duration":0}},{"uid":"b45c4f81a3b969f2","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708872541544,"stop":1708872541544,"duration":0}},{"uid":"88d62b7d3243353e","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708598720590,"stop":1708598728669,"duration":8079}},{"uid":"e2ed86e519bf440","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708597471211,"stop":1708597471211,"duration":0}},{"uid":"373398a60aa047b3","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708596866672,"stop":1708596871951,"duration":5279}},{"uid":"a4637190bd643267","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595632850,"stop":1708595632850,"duration":0}},{"uid":"94a49923758904bc","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595191462,"stop":1708595191462,"duration":0}},{"uid":"f798a645cbf64549","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708589308251,"stop":1708589309568,"duration":1317}},{"uid":"42fd609b2f9ea27f","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708587057577,"stop":1708587061125,"duration":3548}},{"uid":"274c46a439104eea","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708586198065,"stop":1708586198065,"duration":0}},{"uid":"e0b1ae3391ce0b77","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708521292254,"stop":1708521294915,"duration":2661}},{"uid":"a3c763f58bab7bf7","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520657499,"stop":1708520657499,"duration":0}},{"uid":"b9ec3b61cf51457d","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520580536,"stop":1708520580536,"duration":0}},{"uid":"8c27fbe81b0dbacf","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708519636754,"stop":1708519639593,"duration":2839}},{"uid":"c75ca436d9b909fc","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708519088736,"stop":1708519088736,"duration":0}},{"uid":"b97c34032b883785","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708519070991,"stop":1708519070991,"duration":0}},{"uid":"6ddc95df7caa03eb","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708508765017,"stop":1708508766187,"duration":1170}},{"uid":"f89b618a8811af0d","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708258563844,"stop":1708258565959,"duration":2115}},{"uid":"1eefa8dc635099a7","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708246748192,"stop":1708246749448,"duration":1256}},{"uid":"a31a9a4fe6a9eac8","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1708241897212,"stop":1708241898927,"duration":1715}},{"uid":"b8f16c55821ab16d","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708241643927,"stop":1708241643927,"duration":0}},{"uid":"e41fde13936f7b12","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708235045978,"stop":1708235045978,"duration":0}},{"uid":"7340c62a54b325e7","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708232037404,"stop":1708232037404,"duration":0}},{"uid":"a959b436fcc0b12","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231704877,"stop":1708231704877,"duration":0}},{"uid":"afe707598d02fc99","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231509548,"stop":1708231509548,"duration":0}},{"uid":"77a714087359f589","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707903232616,"stop":1707903233951,"duration":1335}},{"uid":"5a8fd680f92a5868","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707816313227,"stop":1707816314525,"duration":1298}},{"uid":"e5d645416db3cb5","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707801443892,"stop":1707801445296,"duration":1404}},{"uid":"c420142ab55ccd8f","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707800941572,"stop":1707800941572,"duration":0}},{"uid":"4fe4c55f1784da8c","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707800539744,"stop":1707800541644,"duration":1900}},{"uid":"71b122b2af8937f5","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707799803166,"stop":1707799804676,"duration":1510}},{"uid":"d04bf98adb072dfb","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799372353,"stop":1707799372353,"duration":0}},{"uid":"244d7e7e1269a50e","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799327213,"stop":1707799327213,"duration":0}},{"uid":"e7f197761f5494a8","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1707799308302,"stop":1707799308302,"duration":0}},{"uid":"190df760a47971f3","status":"failed","statusDetails":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","time":{"start":1707719848937,"stop":1707719850273,"duration":1336}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["multi_production_protocol","scenario","formulation","create_bioburden_residue_verification_protocol_sqin_l"]},"source":"85c03d7f3146c125.json","parameterValues":[]}