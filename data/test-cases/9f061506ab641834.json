{"uid":"9f061506ab641834","name":"Test Nitrosamine SAL","fullName":"tests.scenarios.test_nitrosamine_limits.TestNitrosamineLimit#test_validate_nitrosamine_sal_upper_limit_mg_sqcm","historyId":"2c0461dd652146d92d70cd608b2df215","time":{"start":1708246887987,"stop":1708246890888,"duration":2901},"description":"This test case test the Nitrosamine SAL from list of production when upper limit  for surface area is selected","descriptionHtml":"<p>This test case test the Nitrosamine SAL from list of production when upper limit  for surface area is selected</p>\n","status":"failed","statusMessage":"AssertionError: N2 2.953e-12 Not Equal 2.9529711443e-06","statusTrace":"self = <test_nitrosamine_limits.TestNitrosamineLimit object at 0x000001ED495BF410>\n\n    @allure.title(\"Test Nitrosamine SAL\")\n    @allure.description(\"This test case test the Nitrosamine SAL from list of production when upper limit  \"\n                        \"for surface area is selected\")\n    @allure.link(\"https://app.clickup.com/t/85zrhk1u3\")\n    @allure.link(\"https://app.clickup.com/t/85zrjawr4\")\n    @pytest.mark.nitrosamine_sal\n    @pytest.mark.validate_nitrosamine_sal_upper_limit_mg_sqcm\n    def test_validate_nitrosamine_sal_upper_limit_mg_sqcm(self):\n        upper_limit = Excel.read_excel_col_name_row_number(const.get_master_data(),\n                                                           \"config\", \"upper_limit\", 2)\n        policy_data = {\"useResidueLimit\": True, \"residueLimit\": upper_limit, \"residue_unit\": \"mg/sqcm\"}\n        data = {}\n        get_policy = json.loads(self.update_nitrosamine.test_get_nitrosamine_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_nitrosamine_payload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        if get_policy != update_policy[\"data\"]:\n            self.update_nitrosamine.test_update_nitrosamine_limit_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        production_id = PRODUCTION_ID\n        for prod in production_id:\n            data.update({\"production_id\": prod})\n            sheet_name = prod.lower() + \"_nitrosamine\"\n            columns = [\"Nitrosamine ID\", \"upperlimit_mg_sqcm\"]\n            manually_calculated_limit = self.calculated_sal_excel(sheet_name, columns)\n            data.update({\"production\": prod})\n            sal = self.get_production.get_production_nitrosamine_sal(data)\n>           compare_sal(sal, manually_calculated_limit, columns, self.ERROR_MESSAGE)\n\ntests\\scenarios\\test_nitrosamine_limits.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\common_methods.py:22: in compare_sal\n    compare(sal_application[i], n, i)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = 2.953e-12, sal2 = 2.9529711443e-06, error_message = 'N2'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n>               assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\nE               AssertionError: N2 2.953e-12 Not Equal 2.9529711443e-06\n\nutil\\common_methods.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708246535629,"stop":1708246536176,"duration":547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708246536176,"stop":1708246537058,"duration":882},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"This method will setup the default unit","time":{"start":1708246878878,"stop":1708246881802,"duration":2924},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_nitrosamine_sal_upper_limit_mg_sqcm"},{"name":"tag","value":"nitrosamine_sal"},{"name":"tag","value":"production_nitrosamine_sal"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_nitrosamine_limits"},{"name":"subSuite","value":"TestNitrosamineLimit"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_nitrosamine_limits"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zrjawr4","url":"https://app.clickup.com/t/85zrjawr4","type":"link"},{"name":"https://app.clickup.com/t/85zrhk1u3","url":"https://app.clickup.com/t/85zrhk1u3","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_nitrosamine_sal_upper_limit_mg_sqcm","nitrosamine_sal","production_nitrosamine_sal"]},"source":"9f061506ab641834.json","parameterValues":[]}