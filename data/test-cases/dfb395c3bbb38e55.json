{"uid":"dfb395c3bbb38e55","name":"Register user with security token","fullName":"tests.unit.user_management.test_user_management.TestUserManagement#test_register_new_user_security_token","historyId":"366b69049fa6d3c2e5f0d105efc03117","time":{"start":1708246930765,"stop":1708246930836,"duration":71},"description":"This test case API to register new user with security token to CLEEN with admin role","descriptionHtml":"<p>This test case API to register new user with security token to CLEEN with admin role</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"PasswordNotComplexError\",\"where\":{\"domain\":\"PasswordPolicySettings\",\"action\":\"Login\"},\"name\":\"PasswordNotComplexError\",\"passwordComplexitiesNotMet\":[\"PasswordNotNumber\"],\"message\":\"\",\"action\":\"Login\",\"domain\":\"PasswordPolicySettings\"}}","statusTrace":"self = <test_user_management.TestUserManagement object at 0x000001ED49702990>\n\n    @allure.title(\"Register user with security token\")\n    @allure.description(\"This test case API to register new user with security token to CLEEN with admin role\")\n    @allure.link(\"https://app.clickup.com/t/85zu3efu7\")\n    @pytest.mark.register_new_user_security_token\n    def test_register_new_user_security_token(self):\n        user_info = self.test_add_new_users_admin_role()\n        user_name = user_info[\"payload\"]\n        user = user_info[\"response\"]\n        user = json.loads(user)\n        user_token = user[\"result\"][\"token\"]\n        user_register = user_name[\"username\"]\n        payload = register_user(user_register, user_token)\n        if payload is not None:\n            url = Env.get_base_url(const.ENV)\n            response = Request.post(url + const.REGISTER, data=payload)\n            status_200(response)\n            raw_cookie = response.headers['Set-Cookie']\n            parts = raw_cookie.split(';')\n            target_part = [part for part in parts if part.startswith('connect.sid=')]\n            target_value = target_part[0].strip()\n            index_of_equal = target_value.index('=')\n            result = target_value[index_of_equal + 1:]\n            formatted_value = {'connect.sid': result}\n            const.COOKIES = formatted_value\n            params = {\"token\": user_token, \"u\": user_register}\n    \n            self.reset_password(url, params)\n>           self.change_password(user_register, url, params)\n\ntests\\unit\\user_management\\test_user_management.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\user_management\\test_user_management.py:104: in change_password\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"PasswordNotComplexError\",\"where\":{\"domain\":\"PasswordPolicySettings\",\"action\":\"Login\"},\"name\":\"PasswordNotComplexError\",\"passwordComplexitiesNotMet\":[\"PasswordNotNumber\"],\"message\":\"\",\"action\":\"Login\",\"domain\":\"PasswordPolicySettings\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708246535629,"stop":1708246536176,"duration":547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708246536176,"stop":1708246537058,"duration":882},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"register_new_user_security_token"},{"name":"tag","value":"user_management"},{"name":"parentSuite","value":"tests.unit.user_management"},{"name":"suite","value":"test_user_management"},{"name":"subSuite","value":"TestUserManagement"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.unit.user_management.test_user_management"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zu3efu7","url":"https://app.clickup.com/t/85zu3efu7","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["user_management","register_new_user_security_token"]},"source":"dfb395c3bbb38e55.json","parameterValues":[]}