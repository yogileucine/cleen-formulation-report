{"uid":"125f908131b058be","name":"Create Protocol for microbial residue verification for split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_protocol_microbial_residue_verification_based_on_policy_direct_indirect_split","historyId":"08e8e2784a3cfc2a77ed20841bf3e11b","time":{"start":1707799809886,"stop":1707799813771,"duration":3885},"description":"This test case tests API to Create Protocol microbial residue verification for split when select based on policy for both direct and Indirect","descriptionHtml":"<p>This test case tests API to Create Protocol microbial residue verification for split when select based on policy for both direct and Indirect</p>\n","status":"failed","statusMessage":"AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x0000026819771050>\n\n    @allure.title(\"Create Protocol for microbial residue verification for split\")\n    @allure.description(\"This test case tests API to Create Protocol microbial residue verification for split \"\n                        \"when select based on policy for both direct and Indirect\")\n    @allure.link(\"https://app.clickup.com/t/86cu5qg1q\")\n    @pytest.mark.formulation\n    @pytest.mark.create_protocol_microbial_residue_verification_based_on_policy_direct_indirect_split\n    def test_create_protocol_microbial_residue_verification_based_on_policy_direct_indirect_split(self):\n        vol_unit = self.policy_microbial.default_units.test_get_default_unit(data={\"default_unit_name\": \"volume\"})[\n            \"response\"]\n        surface_unit = \\\n            self.policy_microbial.default_units.test_get_default_unit(data={\"default_unit_name\": \"surface_area\"})[\n                \"response\"]\n        unit = json.loads(vol_unit)\n        surface_unit = json.loads(surface_unit)\n        policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy = json.loads(policy)[\"result\"]\n    \n        volume_unit = unit[\"default_units\"][\"unit\"]\n        surface_area_unit = surface_unit[\"default_units\"][\"unit\"]\n    \n        payload = create_cleaning_limit_policy_microbial(policy, {\"splitBacteriaAndFungi\": True,\n                                                                  \"default_unit\": volume_unit,\n                                                                  \"surface_area_unit\": surface_area_unit})\n    \n        endotoxin_data = {}\n        endotoxin_data.update({\"update_policy_payload\": payload})\n        microbial_policy_update = self.policy_microbial.test_update_microbial_cleaning_limits_policy(endotoxin_data)[\n            \"response\"]\n        if microbial_policy_update:\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"bioburden_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_bioburden.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = self.protocol_microbial.get_microbial_direct_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_microbial.DIRECT_MICROBIAL_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = self.protocol_microbial.get_microbial_indirect_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_microbial.INDIRECT_MICROBIAL_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_microbial.direct_update_policy_payload()\n        indirect_equipment = self.protocol_microbial.indirect_update_policy_payload()\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_fungal_policy\": \"policyBased\", \"direct_bacterial_policy\": \"policyBased\",\n                     \"indirect_fungal_policy\": \"policyBased\", \"indirect_bacterial_policy\": \"policyBased\"})\n        data.update({\n            \"update_microbial_residue_verification_payload\": update_microbial_residue_verification_fungal_bacterial_payload(\n                data)})\n    \n        updated_data = self.protocol_microbial.update_microbial_residue_verification_protocol(data)[\"response\"]\n        updated_data = json.loads(updated_data)[\"result\"][\"microbialResidueVerification\"]\n>       self.protocol_microbial.compare_microbial_limits_split(updated_data, \"direct\", \"fungal\")\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:3317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests.unit.protocols.protocol_microbial_residue_verification.ProtocolMicrobialAcceptanceCriteria object at 0x0000026817490050>\ndata = {'direct': {'bacterial': {'equipments': {'115': {'enabled': True, 'perUnitArea': {'unit': 'sqcm', 'value': 6.4516}, 'p...e': 129.032}, 'perUnitVolume': {'unit': 'ml', 'value': 20000}, 'rinseLimit': 34, ...}, ...}, 'policy': 'policyBased'}}}\nresponse_type = 'direct', microbial_type = 'fungal'\n\n    def compare_microbial_limits_split(self, data, response_type, microbial_type):\n        microbial_policy = self.policy_microbial.test_get_microbial_cleaning_limits_policy()[\"response\"]\n        policy_data = json.loads(microbial_policy)\n    \n        first_response = self.extract_values(policy_data, response_type)\n        second_response = self.get_limits(data, response_type, microbial_type)\n    \n        def extract_microbial_values(response, microbial_type):\n            unclassified_values = response.get('unclassified', {}).get(microbial_type)\n            default_values = response.get('default', {}).get(microbial_type)\n            return unclassified_values or default_values\n    \n        # Extract microbial values from the first response\n        swab_response = first_response.get(f'{response_type.capitalize()} - Swab', {})\n        microbial_swab_first_response = extract_microbial_values(swab_response, microbial_type)\n        per_unit_area_and_volume_first_response = None\n        if microbial_type == \"fungal\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'fungal_per_unit_volume')\n    \n        if microbial_type == \"bacterial\":\n            per_unit_area_and_volume_first_response = swab_response.get('unclassified', {}).get(\n                'bacterial_per_unit_volume')\n    \n        # Extract microbial values from the second response more explicitly\n        second_response_key = list(second_response.keys())[0] if second_response else None\n        microbial_swab_second_response = second_response.get(second_response_key, {}).get('swab_limit', {}).get('value')\n        per_unit_area_and_volume_second_response = second_response.get(second_response_key, {}).get('swab_limit',\n                                                                                                    {}).get(\n            'perUnitArea', {}).get('value')\n    \n        # Compare values with assert statements\n        if microbial_swab_first_response is not None and microbial_swab_second_response is not None:\n            assert microbial_swab_first_response == microbial_swab_second_response, f\"{response_type.capitalize()} Swab {microbial_type.capitalize()} Values Do Not Match\"\n        if per_unit_area_and_volume_first_response is not None and per_unit_area_and_volume_second_response is not None:\n>           assert per_unit_area_and_volume_first_response == per_unit_area_and_volume_second_response, f\"{response_type.capitalize()} Swab perUnitAreaAndVolume Values Do Not Match\"\nE           AssertionError: Direct Swab perUnitAreaAndVolume Values Do Not Match\n\ntests\\unit\\protocols\\protocol_microbial_residue_verification.py:245: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1707799383384,"stop":1707799383822,"duration":438},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1707799383822,"stop":1707799384622,"duration":800},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_protocol_microbial_residue_verification_based_on_policy_direct_indirect_split"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"20380-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu5qg1q","url":"https://app.clickup.com/t/86cu5qg1q","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","formulation","create_protocol_microbial_residue_verification_based_on_policy_direct_indirect_split"]},"source":"125f908131b058be.json","parameterValues":[]}