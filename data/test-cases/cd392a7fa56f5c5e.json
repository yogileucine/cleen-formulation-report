{"uid":"cd392a7fa56f5c5e","name":"Validate the equipments limits report","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_equipments_limits","historyId":"dcf30c237fd846e29d76f29374f6d32a","time":{"start":1708597503686,"stop":1708597505870,"duration":2184},"description":"This test test Api to validate the newly generated equipments limits report on audit portal with excel data ","descriptionHtml":"<p>This test test Api to validate the newly generated equipments limits report on audit portal with excel data</p>\n","status":"failed","statusMessage":"AssertionError: Mismatch in column 'Shared Contact Surface Area (sqcm) (A-B)' at index (19) 511.501 Not Equal 46.5","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x000001ADAF2FD590>\n\n    @allure.title(\"Validate the equipments limits report\")\n    @allure.description(\"This test test Api to validate the newly generated equipments limits report on audit portal \"\n                        \"with excel data \")\n    @allure.link(\"https://app.clickup.com/t/85zt0kxnw\")\n    @pytest.mark.validate_equipments_limits_report\n    def test_validate_equipments_limits(self):\n        data = {}\n        columns_prod = [\"production_id\", \"equipment_id\"]\n        production = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        equipment_id = production[\"equipment_id\"][0]\n    \n        update_data = {\"eq_external_id\": equipment_id}\n    \n        data.update(update_data)\n    \n        equipment_limit = self.get_audit_portal.test_generate_equipments_limits_report_using_equipment(data)\n    \n        equipment_limit = json.loads(equipment_limit[\"response\"])\n    \n        equipment_data = pd.json_normalize(equipment_limit[\"data\"])\n    \n        columns_mapping = {\"productionIdA\": \"Previous Production ID (A)\",\n                           \"apiNameA\": \"Previous API / Intermediate (A)\",\n                           \"productionIdB\": \"Next Production (B)\", \"pdeA\": \"ADE (mg) (A)\",\n                           \"minTdA\": \"Minimum Daily Dose (mg) (A)\", \"lddB\": \"Largest Daily Dose(mg) (B)\",\n                           \"sharedSurfaceArea\": \"Shared Contact Surface Area (sqcm) (A-B)\",\n                           \"toxicityL3\": \"sal_toxicity_mg_sqcm\", \"dosageL3\": \"sal_dosage_mg_sqcm\",\n                           \"generalL3\": \"sal_default_mg_sqcm\", \"minBsB\": \"Batch Size (kg) (B)\"}\n    \n        sheet_name = equipment_id + \"_equipmentwise_sal\"\n    \n        excel_data = pd.read_excel(const.get_master_data(), sheet_name= sheet_name, usecols='A:P', nrows=42)\n    \n        api_df = equipment_data[columns_mapping.keys()]\n        excel_df = excel_data[columns_mapping.values()]\n    \n        api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n        excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n        api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n        numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n        string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n        for column in string_columns:\n            for row in range(len(api_df_sorted)):\n                api_value = api_df_sorted.loc[row, column]\n                excel_value = excel_df_sorted.loc[row, column]\n                compare_portal(api_value, excel_value, column, row)\n    \n        for column in numeric_columns:\n            for row in range(len(api_df_sorted)):\n                api_value = api_df_sorted.loc[row, column]\n                excel_value = excel_df_sorted.loc[row, column]\n>               compare_portal(api_value, excel_value, column, row)\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse_value = 511.501, excel_value = 46.5, column = 'Shared Contact Surface Area (sqcm) (A-B)', row = 19\n\n    def compare_portal(response_value, excel_value, column, row):\n        error_message = f\"Mismatch in column '{column}' at index ({row})\"\n    \n        if response_value == \"-\" and math.isnan(excel_value):\n            return True\n    \n        if str(response_value) != \"#N/A\" and str(excel_value) != \"#N/A\":\n            if isinstance(response_value, (int, float)) and isinstance(excel_value, (int, float)):\n                if math.isnan(response_value) or math.isnan(excel_value):\n                    return True\n                if response_value < 1:\n                    length = (floor(log10(response_value)) - 1)\n                else:\n                    length = 15 - len(str(int(response_value)))\n                if length < 0:\n                    response_value = (round(response_value, -length + 3))\n                    excel_value = (round(excel_value, -length + 1))\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n                else:\n                    response_value = round(response_value, 3)\n                    excel_value = round(excel_value, 3)\n>                   assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\nE                   AssertionError: Mismatch in column 'Shared Contact Surface Area (sqcm) (A-B)' at index (19) 511.501 Not Equal 46.5\n\nutil\\common_methods.py:96: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":14,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1708597483250,"stop":1708597483775,"duration":525},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708597483776,"stop":1708597485069,"duration":1293},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_equipments_limits_report"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"7692-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt0kxnw","url":"https://app.clickup.com/t/85zt0kxnw","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ba1c00bf6815d11d","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708597469303,"stop":1708597469303,"duration":0}},{"uid":"a5dc83472cf90fcd","status":"failed","statusDetails":"AssertionError: Mismatch in column 'Shared Contact Surface Area (sqcm) (A-B)' at index (19) 511.501 Not Equal 46.5","time":{"start":1708595734526,"stop":1708595736700,"duration":2174}},{"uid":"c3a5d67aa628d8c3","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595631174,"stop":1708595631174,"duration":0}},{"uid":"efb8c2c877a273d4","status":"broken","statusDetails":"KeyError: \"['Previous Production ID (A)', 'Previous API / Intermediate (A)', 'Next Production (B)', 'ADE (mg) (A)', 'Minimum Daily Dose (mg) (A)', 'Largest Daily Dose(mg) (B)', 'Shared Contact Surface Area (sqcm) (A-B)', 'Batch Size (kg) (B)'] not in index\"","time":{"start":1708595227371,"stop":1708595230465,"duration":3094}},{"uid":"8bedb8a79b1aad09","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595189626,"stop":1708595189626,"duration":0}},{"uid":"21b2f4d834b90553","status":"passed","time":{"start":1708588958866,"stop":1708588959976,"duration":1110}},{"uid":"f741a520ffd6d40","status":"passed","time":{"start":1708586241690,"stop":1708586243433,"duration":1743}},{"uid":"14d6f114078b4bfb","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708586196361,"stop":1708586196361,"duration":0}},{"uid":"e73c8f53a2d9103e","status":"passed","time":{"start":1707718667082,"stop":1707718667864,"duration":782}},{"uid":"512a65ead94e0277","status":"failed","statusDetails":"AssertionError: {\"error\":{}}","time":{"start":1707718458236,"stop":1707718458236,"duration":0}},{"uid":"49542c6f344b9aaa","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1707718430361,"stop":1707718430361,"duration":0}},{"uid":"83420b23d2f7538a","status":"passed","time":{"start":1707717410865,"stop":1707717411434,"duration":569}},{"uid":"7b48d3bc00dd3869","status":"passed","time":{"start":1707716384243,"stop":1707716385988,"duration":1745}},{"uid":"9aa0940969f27367","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707716357512,"stop":1707716357512,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["scenario","run(order=1)","audit_portal_limits","validate_equipments_limits_report","second"]},"source":"cd392a7fa56f5c5e.json","parameterValues":[]}