{"uid":"2d414c99a48b60ad","name":"Validate master data snapshot report for Equipments","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_master_data_snapshot_report_equipments","historyId":"88ec654a5b74680ba524a8227936f0b0","time":{"start":1707799347342,"stop":1707799347543,"duration":201},"description":"This test case test API to validate the master data snapshot report for equipments with excel file data","descriptionHtml":"<p>This test case test API to validate the master data snapshot report for equipments with excel file data</p>\n","status":"failed","statusMessage":"AssertionError: Mismatch in column 'Name' at index (7) Equipment-UNBNN Not Equal Homogenizer","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x00000125B8E81210>\n\n    @allure.title(\"Validate master data snapshot report for Equipments\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for equipments with \"\n                        \"excel file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9qxwz\")\n    @pytest.mark.validate_master_data_snapshot_report_equipments\n    def test_validate_master_data_snapshot_report_equipments(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"Equipment\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"name\": \"Name\", \"externalId\": \"Equipment Id\", \"surfaceArea\": \"Surface Area (sqcm)\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"equipment\", usecols='A:C', nrows=20)\n    \n            api_df = master_data_snapshot[columns_mapping.keys()]\n            excel_df = excel_data[columns_mapping.values()]\n    \n            api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n            excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n            columns_to_convert = ['surfaceArea']\n            api_df_sorted[columns_to_convert] = api_df_sorted[columns_to_convert].apply(pd.to_numeric, errors='coerce')\n    \n            api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n    \n            max_rows = max(len(api_df_sorted), len(excel_df_sorted))\n    \n            numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n            string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n            for row in range(max_rows):\n                if row >= len(excel_df_sorted):\n                    mismatched_rows.append(row)\n                    continue\n                comparison_successful = True\n                for column in string_columns:\n                    api_value = api_df_sorted.loc[row, column]\n                    excel_value = excel_df_sorted.loc[row, column]\n>                   comparison_successful &= compare_portal(api_value, excel_value, column, row)\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse_value = 'Equipment-UNBNN', excel_value = 'Homogenizer', column = 'Name', row = 7\n\n    def compare_portal(response_value, excel_value, column, row):\n        error_message = f\"Mismatch in column '{column}' at index ({row})\"\n    \n        if response_value == \"-\" and math.isnan(excel_value):\n            return True\n    \n        if str(response_value) != \"#N/A\" and str(excel_value) != \"#N/A\":\n            if isinstance(response_value, (int, float)) and isinstance(excel_value, (int, float)):\n                if math.isnan(response_value) or math.isnan(excel_value):\n                    return True\n                if response_value < 1:\n                    length = (floor(log10(response_value)) - 1)\n                else:\n                    length = 15 - len(str(int(response_value)))\n                if length < 0:\n                    response_value = (round(response_value, -length + 3))\n                    excel_value = (round(excel_value, -length + 1))\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n                else:\n                    response_value = round(response_value, 3)\n                    excel_value = round(excel_value, 3)\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n            else:\n>               assert str(response_value).lower() == str(excel_value).lower(), error_message + \" \" + str(\n                    response_value) + \" Not Equal \" + str(excel_value)\nE               AssertionError: Mismatch in column 'Name' at index (7) Equipment-UNBNN Not Equal Homogenizer\n\nutil\\common_methods.py:99: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1707799338089,"stop":1707799338563,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1707799338563,"stop":1707799339608,"duration":1045},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_master_data_snapshot_report_equipments"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"25240-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt9qxwz","url":"https://app.clickup.com/t/85zt9qxwz","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","validate_master_data_snapshot_report_equipments","run(order=1)","audit_portal_limits","second"]},"source":"2d414c99a48b60ad.json","parameterValues":[]}