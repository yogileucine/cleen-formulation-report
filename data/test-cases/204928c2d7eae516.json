{"uid":"204928c2d7eae516","name":"Validate cleaning agents limit report","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_cleaning_agents_limits_report_for_equipment","historyId":"76a25950e7be7061e13284ec2faa1648","time":{"start":1708586245783,"stop":1708586247271,"duration":1488},"description":"This test case test API to validate the generated cleaning agent report on audit portal with excel data for equipment","descriptionHtml":"<p>This test case test API to validate the generated cleaning agent report on audit portal with excel data for equipment</p>\n","status":"failed","statusMessage":"AssertionError: Mismatch in column 'Equipment ID' at index (0) EQM-17 Not Equal EQM-16","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x000002770382E590>\n\n    @allure.title(\"Validate cleaning agents limit report\")\n    @allure.description(\"This test case test API to validate the generated cleaning agent report on audit portal with \"\n                        \"excel data for equipment\")\n    @allure.link(\"https://app.clickup.com/t/86cuevtw2\")\n    @pytest.mark.validate_cleaning_agents_limits_report_for_equipment\n    def test_validate_cleaning_agents_limits_report_for_equipment(self):\n        data = {}\n        columns_prod = [\"production_id\", \"extra_equipments\"]\n        production = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        production_id = production[\"production_id\"][0]\n        equipment_id = production[\"extra_equipments\"][0]\n    \n        update_data = {\"cleaning_agent\": \"Methanol\", \"eq_external_id\": equipment_id, \"production_external_id\": production_id}\n    \n        data.update(update_data)\n    \n        cleaning_agent_limit = self.get_audit_portal.test_generate_cleaning_agent_limits_report(data)\n    \n        cleaning_agent_limit = json.loads(cleaning_agent_limit[\"response\"])\n    \n        cleaning_agent_data = pd.json_normalize(cleaning_agent_limit[\"data\"])\n    \n        columns_mapping = {\"cleaningAgentIdA\": \"Previous Cleaning Agent(A)\",\n                           \"equipmentName\": \"Equipment\",\n                           \"equipmentId\": \"Equipment ID\", \"productionIdB\": \"Next Production (B)\",\n                           \"adeA\": \"ADE (mg) (A)\", \"lddB\": \"Largest Daily Dose(mg) (B)\",\n                           \"sharedSurfaceArea\": \"Shared Contact Surface Area (sqcm) (A-B)\",\n                           \"toxicityL3\": \"sal_toxicity_mg_sqcm\", \"generalL3\": \"sal_default_mg_sqcm\",\n                           \"minBsB\": \"Batch Size (kg) (B)\"}\n    \n        excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"methanol_cleaning_agent_sal\", usecols='A:K',\n                                   nrows=7)\n    \n        api_df = cleaning_agent_data[columns_mapping.keys()]\n        excel_df = excel_data[columns_mapping.values()]\n    \n        api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n        excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n        api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n        numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n    \n        string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n        for column in string_columns:\n            for row in range(len(api_df_sorted)):\n                api_value = api_df_sorted.loc[row, column]\n                excel_value = excel_df_sorted.loc[row, column]\n>               compare_portal(api_value, excel_value, column, row)\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:356: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse_value = 'EQM-17', excel_value = 'EQM-16', column = 'Equipment ID', row = 0\n\n    def compare_portal(response_value, excel_value, column, row):\n        error_message = f\"Mismatch in column '{column}' at index ({row})\"\n    \n        if response_value == \"-\" and math.isnan(excel_value):\n            return True\n    \n        if str(response_value) != \"#N/A\" and str(excel_value) != \"#N/A\":\n            if isinstance(response_value, (int, float)) and isinstance(excel_value, (int, float)):\n                if math.isnan(response_value) or math.isnan(excel_value):\n                    return True\n                if response_value < 1:\n                    length = (floor(log10(response_value)) - 1)\n                else:\n                    length = 15 - len(str(int(response_value)))\n                if length < 0:\n                    response_value = (round(response_value, -length + 3))\n                    excel_value = (round(excel_value, -length + 1))\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n                else:\n                    response_value = round(response_value, 3)\n                    excel_value = round(excel_value, 3)\n                    assert response_value == excel_value, error_message + \" \" + str(\n                        response_value) + \" Not Equal \" + str(excel_value)\n            else:\n>               assert str(response_value).lower() == str(excel_value).lower(), error_message + \" \" + str(\n                    response_value) + \" Not Equal \" + str(excel_value)\nE               AssertionError: Mismatch in column 'Equipment ID' at index (0) EQM-17 Not Equal EQM-16\n\nutil\\common_methods.py:99: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708586223150,"stop":1708586223921,"duration":771},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708586223921,"stop":1708586225274,"duration":1353},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_cleaning_agents_limits_report_for_equipment"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"19144-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuevtw2","url":"https://app.clickup.com/t/86cuevtw2","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["scenario","validate_cleaning_agents_limits_report_for_equipment","run(order=1)","audit_portal_limits","second"]},"source":"204928c2d7eae516.json","parameterValues":[]}