{"uid":"91fbf5c93f3d4296","name":"Validate the samples when select custom for direct/indirect bioburden residue verification non split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_sampling_profile_bioburden_direct_indirect_custom_protocol_non_split","historyId":"5574ff1f40c9a3f385804b9237ba10c0","time":{"start":1709039437228,"stop":1709039444579,"duration":7351},"description":"This test case tests API to Validate the samples when select custom for direct/indirect bioburden residue verification non split","descriptionHtml":"<p>This test case tests API to Validate the samples when select custom for direct/indirect bioburden residue verification non split</p>\n","status":"broken","statusMessage":"TypeError: type str doesn't define __round__ method","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002CCA362F850>\n\n    @allure.title(\"Validate the samples when select custom for direct/indirect bioburden residue verification \"\n                  \"non split\")\n    @allure.description(\"This test case tests API to Validate the samples when select custom for \"\n                        \"direct/indirect bioburden residue verification non split\")\n    @allure.link(\"https://app.clickup.com/t/86cukc3e4\")\n    @pytest.mark.formulation  # bop = based on policy\n    @pytest.mark.sampling_profile_bioburden_direct_indirect_custom_protocol_non_split\n    def test_sampling_profile_bioburden_direct_indirect_custom_protocol_non_split(self):\n        data = self.test_create_protocol_bioburden_residue_verification_custom_direct_indirect()\n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"], \"type\": \"Bioburden\"})\n            self.protocol_common_method.get_default_policies_protocol(data)\n            self.protocol_common_method.get_validate_protocol_details(data)\n            get_sampling_profile = self.protocol_common_method.get_sampling_profile_details_active(data)[\"response\"]\n            sampling_profile = json.loads(get_sampling_profile)[\"result\"]\n            data.update({\"sample_profile\": sampling_profile})\n>           self.protocol_bioburden.compare_samples_swab_rinse_surface_area_bioburden(data)\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:4797: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'externalId': 'Protocol-GO5U', 'nam...UnitArea': {'unit': 'sqcm', 'value': 1}, 'perUnitVolume': {'unit': 'ml', 'value': 1}, 'rinseLimit': 7, ...}, ...}, ...}\n\n    @staticmethod\n    def compare_samples_swab_rinse_surface_area_bioburden(data):\n        columns = [\"sample type\", \"sampling area (sqcm)\", \"rinse_volume\"]\n        sheet_name = data[\"external_id\"] + \"_samples\"\n        sample_area = Excel.read_excel_columns_name_row_value(const.get_master_data(), sheet_name, columns,\n                                                              \"Bioburden\")\n        result_list = [item for item in sample_area[\"rinse_volume\"] if item != 'a']\n        index = 0\n        rinse_index = 0\n        for profile in data['sample_profile']['samplingProfile'].values():\n            for sample in profile['samples'].values():\n                if sample.get('type') == data[\"type\"]:\n                    surface_area = sample.get('surfaceArea')\n                    rinse_volume = sample.get('rinseVolume')\n                    if surface_area is not None:\n>                       assert round(surface_area, 3) == round(sample_area[\"sampling area (sqcm)\"][index], 3)\nE                       TypeError: type str doesn't define __round__ method\n\ntests\\unit\\protocols\\protocol_bioburden_residue_verification.py:351: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1709038682534,"stop":1709038683052,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1709038683052,"stop":1709038683859,"duration":807},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"sampling_profile_bioburden_direct_indirect_custom_protocol_non_split"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cukc3e4","url":"https://app.clickup.com/t/86cukc3e4","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["sampling_profile_bioburden_direct_indirect_custom_protocol_non_split","multi_production_protocol","scenario","formulation"]},"source":"91fbf5c93f3d4296.json","parameterValues":[]}