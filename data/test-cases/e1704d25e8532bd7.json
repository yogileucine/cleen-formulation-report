{"uid":"e1704d25e8532bd7","name":"Test Nitrosamine SAL","fullName":"tests.scenarios.test_nitrosamine_limits.TestNitrosamineLimit#test_validate_nitrosamine_sal_ug_sqm","historyId":"c66379fd73d5d653113dc160dc72e4ab","time":{"start":1708242055252,"stop":1708242058093,"duration":2841},"description":"This test case test the Nitrosamine sal from list of Production when SalMassUnit is ugdefault surface area is sqm","descriptionHtml":"<p>This test case test the Nitrosamine sal from list of Production when SalMassUnit is ugdefault surface area is sqm</p>\n","status":"failed","statusMessage":"AssertionError: N2 2.953e-05 Not Equal 29.529711443","statusTrace":"self = <test_nitrosamine_limits.TestNitrosamineLimit object at 0x0000019E64B23850>\n\n    @allure.title(\"Test Nitrosamine SAL\")\n    @allure.description(\"This test case test the Nitrosamine sal from list of Production when SalMassUnit is ug\"\n                        \"default surface area is sqm\")\n    @allure.link(\"https://app.clickup.com/t/86ctyk787\")\n    @allure.link(\"https://app.clickup.com/t/86ctyk78v\")\n    @pytest.mark.nitrosamine_sal\n    @pytest.mark.validate_nitrosamine_sal_ug_sqm\n    def test_validate_nitrosamine_sal_ug_sqm(self):\n        policy_data = {\"salMassUnit\": \"ug\"}\n        data = {}\n        get_policy = json.loads(self.update_nitrosamine.test_get_nitrosamine_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        sal_unit = get_policy[\"limitRepresentation\"][\"productAndEquipmentLimits\"][\"salMassUnit\"]\n        update_policy = create_cleaning_limit_policy_nitrosamine_payload(get_policy, policy_data)\n        data.update({\"update_policy_payload\": update_policy})\n        data.update(self.DEFAULT_SURFACE_AREA_SQM)\n        self.update_default_unit.test_update_default_unit(data)\n        if get_policy != update_policy[\"data\"] or sal_unit != \"ug\":\n            self.update_nitrosamine.test_update_nitrosamine_limit_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        production_id = PRODUCTION_ID\n        for prod in production_id:\n            data.update({\"production_id\": prod})\n            sheet_name = prod.lower() + \"_nitrosamine\"\n            columns = [\"Nitrosamine ID\", \"final_sal_ug_sqm\"]\n            manually_calculated_limit = self.calculated_sal_excel(sheet_name, columns)\n            data.update({\"production\": prod})\n            sal = self.get_production.get_production_nitrosamine_sal(data)\n>           compare_sal(sal, manually_calculated_limit, columns, self.ERROR_MESSAGE)\n\ntests\\scenarios\\test_nitrosamine_limits.py:274: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\common_methods.py:22: in compare_sal\n    compare(sal_application[i], n, i)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = 2.953e-05, sal2 = 29.529711443, error_message = 'N2'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n>               assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\nE               AssertionError: N2 2.953e-05 Not Equal 29.529711443\n\nutil\\common_methods.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708241653778,"stop":1708241654178,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708241654178,"stop":1708241655505,"duration":1327},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"This method will setup the default unit","time":{"start":1708242034335,"stop":1708242037577,"duration":3242},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_nitrosamine_sal_ug_sqm"},{"name":"tag","value":"nitrosamine_sal"},{"name":"tag","value":"production_nitrosamine_sal"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_nitrosamine_limits"},{"name":"subSuite","value":"TestNitrosamineLimit"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"12596-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_nitrosamine_limits"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86ctyk78v","url":"https://app.clickup.com/t/86ctyk78v","type":"link"},{"name":"https://app.clickup.com/t/86ctyk787","url":"https://app.clickup.com/t/86ctyk787","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_nitrosamine_sal_ug_sqm","nitrosamine_sal","production_nitrosamine_sal"]},"source":"e1704d25e8532bd7.json","parameterValues":[]}