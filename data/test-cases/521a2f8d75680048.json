{"uid":"521a2f8d75680048","name":"Test SAL of Production on Equipments for Upper Limit in API Facility","fullName":"tests.scenarios.test_limit_equipments.TestLimitsOnEquipments#test_validate_api_equipment_sal_upper_limit","historyId":"b8f5d8aa17619db81f948c090d5b3d6d","time":{"start":1708232024041,"stop":1708232025082,"duration":1041},"description":"This test case tests SAL when Upper Limit and All Criteria in Policy is selected for all production mapped to Equipment in API Facility","descriptionHtml":"<p>This test case tests SAL when Upper Limit and All Criteria in Policy is selected for all production mapped to Equipment in API Facility</p>\n","status":"failed","statusMessage":"AssertionError: PRD1-P4 3.0783e-05 Not Equal 1e-06","statusTrace":"self = <test_limit_equipments.TestLimitsOnEquipments object at 0x000001A873A05710>\n\n    @allure.title(\"Test SAL of Production on Equipments for Upper Limit in API Facility\")\n    @allure.description(\"This test case tests SAL when Upper Limit and All Criteria in Policy is selected\"\n                        \" for all production mapped to Equipment in API Facility\")\n    @allure.link(\"https://app.clickup.com/t/85zrj1u9u\")\n    @pytest.mark.active\n    @pytest.mark.validate_api_equipment_sal_upper_limit\n    def test_validate_api_equipment_sal_upper_limit(self):\n        upper_limit = Excel.read_excel_col_name_row_number(const.get_master_data(), \"config\", \"upper_limit\", 2)\n        policy_data_api = {\"useDosage\": True, \"useToxicity\": True, \"useARL\": True, \"useLd50\": True,\n                           \"useResidueLimit\": True, \"residueLimit\": upper_limit}\n        policy_data_intermediate = {\"useResidueLimit\": True, \"residueLimit\": upper_limit}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data_api)\n        data = {\"update_policy_payload\": update_policy}\n        get_policy_intermediate = json.loads(\n            self.update_intermediate_policy.test_get_intermediate_cleaning_limit_policy())\n        get_policy_intermediate = get_policy_intermediate[\"policy\"]\n        update_policy_intermediate = create_cleaning_limit_policy_intermediate_pyload(get_policy_intermediate,\n                                                                                      policy_data_intermediate)\n        perform_change_assessment = False\n        data.update({\"update_intermediate_policy_payload\": update_policy_intermediate})\n        if get_policy[\"useResidueLimit\"] is False \\\n                or get_policy[\"residueLimit\"][\"value\"] != upper_limit:\n            self.update_active_policy.test_update_active_policy(data)\n            perform_change_assessment = True\n    \n        if get_policy_intermediate[\"useResidueLimit\"] is False \\\n                or get_policy_intermediate[\"residueLimit\"][\"value\"] != upper_limit:\n            self.update_intermediate_policy.test_update_intermediate_policy(data)\n            perform_change_assessment = True\n    \n        if perform_change_assessment is True:\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n    \n        for equipment in EQUIPMENT_LIST[\"equipment_id\"]:\n            data.update({\"equipment\": equipment})\n            sheet_name = equipment\n            read_excel_column = [\"Equipment ID\", \"upperlimit_mg_sqcm\"]\n            manually_calculated_limit, lowest_manually_calculated_sal = self.read_excel_sal(sheet_name,\n                                                                                            read_excel_column)\n            sal = self.get_equipment.get_production_sal_each_equipment(data)\n            lowest_sal = self.get_equipment.get_equipment_lowest_sal(data)\n>           compare_sal(sal, manually_calculated_limit, read_excel_column, self.ERROR_MESSAGE)\n\ntests\\scenarios\\test_limit_equipments.py:726: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\common_methods.py:22: in compare_sal\n    compare(sal_application[i], n, i)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = 3.0783e-05, sal2 = 1e-06, error_message = 'PRD1-P4'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n>               assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\nE               AssertionError: PRD1-P4 3.0783e-05 Not Equal 1e-06\n\nutil\\common_methods.py:54: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708231831983,"stop":1708231832370,"duration":387},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708231832370,"stop":1708231833427,"duration":1057},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"This method will setup cleaning limit policy","time":{"start":1708232015252,"stop":1708232017201,"duration":1949},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_api_equipment_sal_upper_limit"},{"name":"tag","value":"active"},{"name":"tag","value":"equipment_limits"},{"name":"tag","value":"limits"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_equipments"},{"name":"subSuite","value":"TestLimitsOnEquipments"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"38200-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_equipments"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zrj1u9u","url":"https://app.clickup.com/t/85zrj1u9u","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["equipment_limits","active","validate_api_equipment_sal_upper_limit","limits"]},"source":"521a2f8d75680048.json","parameterValues":[]}