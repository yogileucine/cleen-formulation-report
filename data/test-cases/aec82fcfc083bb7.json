{"uid":"aec82fcfc083bb7","name":"Create Protocol for microbial residue verification for non split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split","historyId":"7487efdc6d9ef46c34d703d7b8a8d5ae","time":{"start":1709039270529,"stop":1709039273257,"duration":2728},"description":"This test case tests API to Create Protocol microbial residue verification for non split when select based on policy of direct and custom for indirect and validate the limits","descriptionHtml":"<p>This test case tests API to Create Protocol microbial residue verification for non split when select based on policy of direct and custom for indirect and validate the limits</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"AcceptanceCriteriaForAllSelectedEquipment\",\"where\":{\"domain\":\"OnDemandProtocol\",\"action\":\"Modify\"},\"name\":\"Protocol\",\"message\":\"Acceptance Criteria needs to be defined for all selected Equipment\",\"action\":\"Modify\",\"domain\":\"OnDemandProtocol\"}}","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002CCA3617190>\n\n    @allure.title(\"Create Protocol for microbial residue verification for non split\")\n    @allure.description(\"This test case tests API to Create Protocol microbial residue verification for non split when \"\n                        \"select based on policy of direct and custom for indirect and validate the limits\")\n    @allure.link(\"https://app.clickup.com/t/86cuhb5fb\")\n    @pytest.mark.formulation\n    @pytest.mark.create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split\n    def test_create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split(self):\n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"microbial_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_microbial.PROTOCOL_MICROBIAL_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = self.protocol_microbial.get_microbial_direct_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_microbial.DIRECT_MICROBIAL_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = \\\n            self.protocol_microbial.get_microbial_custom_indirect_contact_surface_area_details(data)[\n                \"response\"]\n        self.protocol_microbial.CUSTOM_INDIRECT_MICROBIAL_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_microbial.direct_update_policy_payload()[\"bioburden\"][\"equipments\"]\n        indirect_equipment = self.protocol_microbial.custom_indirect_update_policy_payload()[\"bioburden\"][\"equipments\"]\n    \n        direct_endo_equipment = self.protocol_microbial.custom_direct_update_policy_payload()[\"endotoxin\"][\"equipments\"]\n        indirect_endo_equipment = self.protocol_microbial.custom_indirect_update_policy_payload()[\"endotoxin\"][\n            \"equipments\"]\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_endo_equipment\": direct_endo_equipment, \"indirect_endo_equipment\": indirect_endo_equipment,\n                     \"direct_policy\": \"policyBased\", \"indirect_policy\": \"custom\"})\n        data.update(\n            {\"update_microbial_residue_verification_payload\": update_microbial_residue_verification_payload(data)})\n    \n>       updated_data = self.protocol_microbial.update_microbial_residue_verification_protocol(data)[\"response\"]\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:3564: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\protocols\\protocol_microbial_residue_verification.py:316: in update_microbial_residue_verification_protocol\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"AcceptanceCriteriaForAllSelectedEquipment\",\"where\":{\"domain\":\"OnDemandProtocol\",\"action\":\"Modify\"},\"name\":\"Protocol\",\"message\":\"Acceptance Criteria needs to be defined for all selected Equipment\",\"action\":\"Modify\",\"domain\":\"OnDemandProtocol\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":35,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1709038682534,"stop":1709038683052,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1709038683052,"stop":1709038683859,"duration":807},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuhb5fb","url":"https://app.clickup.com/t/86cuhb5fb","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"68149297957a4f49","status":"passed","time":{"start":1708873400807,"stop":1708873405934,"duration":5127}},{"uid":"ba914d8b45817268","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708872961633,"stop":1708872961633,"duration":0}},{"uid":"c0338e7505e4ccf","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708872541587,"stop":1708872541587,"duration":0}},{"uid":"e6ccb73e8e5edbc","status":"passed","time":{"start":1708598773600,"stop":1708598781570,"duration":7970}},{"uid":"4eb64365e43f8f1a","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708597471263,"stop":1708597471263,"duration":0}},{"uid":"7d5452df78b1db3f","status":"passed","time":{"start":1708596914897,"stop":1708596921776,"duration":6879}},{"uid":"c5e4739aa5c039d8","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595632891,"stop":1708595632891,"duration":0}},{"uid":"1701b75b47aa440c","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595191507,"stop":1708595191507,"duration":0}},{"uid":"c17bc1b3f2f68f18","status":"passed","time":{"start":1708589323073,"stop":1708589325214,"duration":2141}},{"uid":"b4726c3a4f44f133","status":"passed","time":{"start":1708587092111,"stop":1708587096011,"duration":3900}},{"uid":"c5887e0fe099389d","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708586198106,"stop":1708586198106,"duration":0}},{"uid":"19710261ba02a6da","status":"passed","time":{"start":1708521319394,"stop":1708521324522,"duration":5128}},{"uid":"e12b0dff3692e745","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520657539,"stop":1708520657539,"duration":0}},{"uid":"7713357186e24c65","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520580600,"stop":1708520580600,"duration":0}},{"uid":"a8f545ddf26a0345","status":"passed","time":{"start":1708519664023,"stop":1708519669249,"duration":5226}},{"uid":"c7ecc2e1ee7a2220","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708519088786,"stop":1708519088786,"duration":0}},{"uid":"bcde79a44d8eda4","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708519071042,"stop":1708519071042,"duration":0}},{"uid":"e367eb3c483c5de4","status":"passed","time":{"start":1708508779442,"stop":1708508781329,"duration":1887}},{"uid":"8b55da8831d5594b","status":"passed","time":{"start":1708258586185,"stop":1708258588724,"duration":2539}},{"uid":"530bb2d17305a9fa","status":"passed","time":{"start":1708246763132,"stop":1708246765204,"duration":2072}},{"uid":"5941b411974cab17","status":"passed","time":{"start":1708241914389,"stop":1708241916590,"duration":2201}},{"uid":"3427f3e33afa0792","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708241643981,"stop":1708241643981,"duration":0}},{"uid":"26697559aa26d18b","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708235045994,"stop":1708235045994,"duration":0}},{"uid":"437c4be77b69fcdb","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708232037415,"stop":1708232037415,"duration":0}},{"uid":"662df9161a15bca3","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231704888,"stop":1708231704888,"duration":0}},{"uid":"3ff64489f92a9709","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231509558,"stop":1708231509558,"duration":0}},{"uid":"ca0ab490d479b86d","status":"passed","time":{"start":1707903248165,"stop":1707903250161,"duration":1996}},{"uid":"35afaaf94bad6099","status":"passed","time":{"start":1707816328302,"stop":1707816330316,"duration":2014}},{"uid":"3c1c58a635fb091d","status":"passed","time":{"start":1707801459943,"stop":1707801462025,"duration":2082}},{"uid":"af691e0eb2d0c98f","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707800941614,"stop":1707800941614,"duration":0}},{"uid":"970fca1678c5d087","status":"passed","time":{"start":1707800557771,"stop":1707800560103,"duration":2332}},{"uid":"f2fefc44a065527d","status":"broken","statusDetails":"NameError: name 'update_microbial_residue_verification_payload' is not defined","time":{"start":1707799809360,"stop":1707799809823,"duration":463}},{"uid":"24fe28a26113f6f7","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799372393,"stop":1707799372393,"duration":0}},{"uid":"85e18bbe5f15c8b0","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799327283,"stop":1707799327283,"duration":0}},{"uid":"3d7fec86341d6f02","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1707799308389,"stop":1707799308389,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["multi_production_protocol","scenario","create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split","formulation"]},"source":"aec82fcfc083bb7.json","parameterValues":[]}