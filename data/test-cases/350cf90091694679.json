{"uid":"350cf90091694679","name":"Test Equipment Wise SAL when Same API to Same API Limits is OFF","fullName":"tests.scenarios.test_limit_equipments.TestLimitsOnEquipments#test_validate_formulation_equipment_equipmentwise_same_api_sal_all_criteria","historyId":"7c8d6fc1608c9eff3029d322896113b9","time":{"start":1708258334725,"stop":1708258334725,"duration":0},"description":"This test case tests Equipment wise SAL when All Criteria and Same API to Same API Limits is OFF in Policy is selected for all production mapped to Equipment","descriptionHtml":"<p>This test case tests Equipment wise SAL when All Criteria and Same API to Same API Limits is OFF in Policy is selected for all production mapped to Equipment</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"NotFoundError\",\"where\":{\"domain\":\"Variable\",\"action\":\"Get\"},\"name\":\"NotFoundError\",\"entity\":\"Variable\",\"message\":\"Unable to get variable with 0\",\"action\":\"Get\",\"domain\":\"Variable\"}}","statusTrace":"self = <test_limit_equipments.TestLimitsOnEquipments object at 0x000002B7B3587F50>\n\n    @allure.title(\"This method will setup cleaning limit policy\")\n    @allure.description(\"This method will setup cleaning limit policy for actives and intermediates and will be \"\n                        \"execute once before all test cases\")\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def setup_equipment_limits(self):\n        global EQUIPMENT_LIST\n        EQUIPMENT_LIST = Excel.read_excel_columns(const.get_master_data(), \"config\", [\"equipment_id\"])\n        data = {}\n        columns = [\"default_unit_name\", \"default_unit\", \"variable_name\", \"variable_value\"]\n        excel_data = Excel.read_excel_columns(const.get_master_data(), \"config\", columns)\n        default_units_name = excel_data[\"default_unit_name\"]\n        default_unit = excel_data[\"default_unit\"]\n        for i, j in zip(default_units_name, default_unit):\n            data.update({\"default_unit_name\": i})\n            data.update({\"default_unit\": j})\n            self.update_default_unit.test_update_default_unit(data)\n    \n        variables_name = excel_data[\"variable_name\"]\n        variables_value = excel_data[\"variable_value\"]\n        for i, j in zip(variables_name, variables_value):\n            data.update({\"variables_name\": i})\n            data.update({\"variable_value\": j})\n>           self.update_variable.test_update_variable_value(data)\n\ntests\\scenarios\\test_limit_equipments.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\settings\\test_variables.py:73: in test_update_variable_value\n    variable = self.test_get_variable(data)[\"response\"]\ntests\\unit\\settings\\test_variables.py:64: in test_get_variable\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [404]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"NotFoundError\",\"where\":{\"domain\":\"Variable\",\"action\":\"Get\"},\"name\":\"NotFoundError\",\"entity\":\"Variable\",\"message\":\"Unable to get variable with 0\",\"action\":\"Get\",\"domain\":\"Variable\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708258234523,"stop":1708258234954,"duration":431},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708258234954,"stop":1708258235780,"duration":826},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"This method will setup cleaning limit policy","time":{"start":1708258333435,"stop":1708258334114,"duration":679},"status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"NotFoundError\",\"where\":{\"domain\":\"Variable\",\"action\":\"Get\"},\"name\":\"NotFoundError\",\"entity\":\"Variable\",\"message\":\"Unable to get variable with 0\",\"action\":\"Get\",\"domain\":\"Variable\"}}\n","statusTrace":"  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 80, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1129, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 908, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\tests\\scenarios\\test_limit_equipments.py\", line 62, in setup_equipment_limits\n    self.update_variable.test_update_variable_value(data)\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\tests\\unit\\settings\\test_variables.py\", line 73, in test_update_variable_value\n    variable = self.test_get_variable(data)[\"response\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\tests\\unit\\settings\\test_variables.py\", line 64, in test_get_variable\n    status_200(response)\n  File \"C:\\Users\\yo339.DESKTOP-ESU2KLG\\PycharmProjects\\cleen-api-test-pm\\util\\validate_response.py\", line 3, in status_200\n    assert response.status_code == 200, response.text\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_formulation_equipment_equipmentwise_same_api_sal_all_criteria"},{"name":"tag","value":"formulation"},{"name":"tag","value":"equipment_limits"},{"name":"tag","value":"limits"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_equipments"},{"name":"subSuite","value":"TestLimitsOnEquipments"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"12592-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_equipments"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zrj1u39","url":"https://app.clickup.com/t/85zrj1u39","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["equipment_limits","formulation","validate_formulation_equipment_equipmentwise_same_api_sal_all_criteria","limits"]},"source":"350cf90091694679.json","parameterValues":[]}