{"uid":"f2fefc44a065527d","name":"Create Protocol for microbial residue verification for non split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split","historyId":"7487efdc6d9ef46c34d703d7b8a8d5ae","time":{"start":1707799809360,"stop":1707799809823,"duration":463},"description":"This test case tests API to Create Protocol microbial residue verification for non split when select based on policy of direct and custom for indirect and validate the limits","descriptionHtml":"<p>This test case tests API to Create Protocol microbial residue verification for non split when select based on policy of direct and custom for indirect and validate the limits</p>\n","status":"broken","statusMessage":"NameError: name 'update_microbial_residue_verification_payload' is not defined","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x0000026819771D10>\n\n    @allure.title(\"Create Protocol for microbial residue verification for non split\")\n    @allure.description(\"This test case tests API to Create Protocol microbial residue verification for non split when \"\n                        \"select based on policy of direct and custom for indirect and validate the limits\")\n    @allure.link(\"https://app.clickup.com/t/86cuhb5fb\")\n    @pytest.mark.formulation\n    @pytest.mark.create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split\n    def test_create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split(self):\n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"microbial_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_microbial.PROTOCOL_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = self.protocol_microbial.get_microbial_direct_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_microbial.DIRECT_MICROBIAL_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = self.protocol_microbial.get_microbial_custom_indirect_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_microbial.CUSTOM_INDIRECT_MICROBIAL_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_microbial.direct_update_policy_payload()[\"bioburden\"][\"equipments\"]\n        indirect_equipment = self.protocol_microbial.custom_indirect_update_policy_payload()[\"bioburden\"][\"equipments\"]\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_policy\": \"policyBased\", \"indirect_policy\": \"custom\"})\n        data.update(\n>           {\"update_microbial_residue_verification_payload\": update_microbial_residue_verification_payload(data)})\nE       NameError: name 'update_microbial_residue_verification_payload' is not defined\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:3244: NameError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1707799383384,"stop":1707799383822,"duration":438},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1707799383822,"stop":1707799384622,"duration":800},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"20380-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cuhb5fb","url":"https://app.clickup.com/t/86cuhb5fb","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","create_microbial_residue_verification_protocol_direct_bop_indirect_custom_non_split","formulation"]},"source":"f2fefc44a065527d.json","parameterValues":[]}