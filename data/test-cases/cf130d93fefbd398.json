{"uid":"cf130d93fefbd398","name":"Create Protocol and select based on policy for Nitrosamine residue verification","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_protocol_nitrosamine_residue_verification_based_on_policy_sqin_mg","historyId":"52065424cd775661b68a4ab914a9d703","time":{"start":1708246666993,"stop":1708246670437,"duration":3444},"description":"This test case tests API to Create Protocol based on policy for nitrosamine residue verification when surface area is sqin and SAL mass unit is mg","descriptionHtml":"<p>This test case tests API to Create Protocol based on policy for nitrosamine residue verification when surface area is sqin and SAL mass unit is mg</p>\n","status":"failed","statusMessage":"AssertionError: Comparison failed for EQM-17, N2: value from excel [3.0271376407394e-08] vs  value from application [0.030271376407393812]","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001ED4956BAD0>\n\n    @allure.title(\"Create Protocol and select based on policy for Nitrosamine residue verification\")\n    @allure.description(\"This test case tests API to Create Protocol based on policy for nitrosamine residue \"\n                        \"verification when surface area is sqin and SAL mass unit is mg\")\n    @allure.link(\"https://app.clickup.com/t/86cu9qnhv\")\n    @pytest.mark.formulation\n    @pytest.mark.create_protocol_nitrosamine_residue_verification_based_on_policy_sqin_mg\n    def test_create_protocol_nitrosamine_residue_verification_based_on_policy_sqin_mg(self):\n        nitrosamine_data = {}\n        nitrosamine_data.update(self.DEFAULT_SURFACE_AREA_SQIN)\n        unit = self.update_default_unit.test_get_default_unit(nitrosamine_data)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n    \n        if unit != \"sqin\":\n            self.update_default_unit.test_update_default_unit(nitrosamine_data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"nitrosamine_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_nitrosamine.PROTOCOL_NITROSAMINE_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = self.protocol_nitrosamine.get_nitrosamine_direct_details_based_on_policy(data)[\n            \"response\"]\n        self.protocol_nitrosamine.DIRECT_NITROSAMINE_EQUIPMENT = json.loads(direct_equipments_sal)\n    \n        direct_equipment = self.protocol_nitrosamine.direct_nitrosamine_update_policy_payload()[\"equipments\"]\n    \n        data.update({\"direct_equipment\": direct_equipment, \"direct_policy\": \"policyBased\",\n                     \"columns\": [\"Nitrosamine ID\", \"final_sal_mg_sqin\"]})\n        data.update({\"update_nitrosamine_residue_verification_payload\": nitrosamine_residue_verification_payload(data)})\n    \n        self.protocol_nitrosamine.update_nitrosamine_residue_verification_protocol(data)\n>       self.protocol_nitrosamine.compare_limits_with_actual(\n            columns=[\"Equipment ID\", \"Nitrosamine ID\", \"final_sal_mg_sqin\"])\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:1323: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <unit.protocols.protocol_nitrosamine_residue_verification.ProtocolNitrosamineAcceptanceCriteria object at 0x000001ED49517D50>\ncolumns = ['Equipment ID', 'Nitrosamine ID', 'final_sal_mg_sqin']\n\n    def compare_limits_with_actual(self, columns):\n        all_combine_dict, combine_dict = self.combine_dicts()\n        dict2 = self.get_calculated_production_sal(columns)\n        tolerance = 0.01\n        for equipment_id, nitrosamine_limits1 in combine_dict.items():\n            if equipment_id in dict2:\n                nitrosamine_limits2 = dict2[equipment_id]\n                for nitrosamine_id, values1 in nitrosamine_limits1.items():\n                    if nitrosamine_id in nitrosamine_limits2:\n                        values2 = nitrosamine_limits2[nitrosamine_id]\n    \n                        # Ensure values1 and values2 are lists\n                        if isinstance(values1[0], (int, float)):\n                            values1 = [values1[0]]\n                        if isinstance(values2[0], (int, float)):\n                            values2 = [values2[0]]\n    \n                        # Perform the comparison here\n>                       assert all(abs(v1 - v2) <= tolerance for v1, v2 in zip(values1, values2)), \\\n                            (f\"Comparison failed for {equipment_id}, {nitrosamine_id}: value from excel {values1} vs \"\n                             f\" value from application {values2}\")\nE                       AssertionError: Comparison failed for EQM-17, N2: value from excel [3.0271376407394e-08] vs  value from application [0.030271376407393812]\n\ntests\\unit\\protocols\\protocol_nitrosamine_residue_verification.py:145: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708246535629,"stop":1708246536176,"duration":547},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708246536176,"stop":1708246537058,"duration":882},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_protocol_nitrosamine_residue_verification_based_on_policy_sqin_mg"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22324-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu9qnhv","url":"https://app.clickup.com/t/86cu9qnhv","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","create_protocol_nitrosamine_residue_verification_based_on_policy_sqin_mg","formulation"]},"source":"cf130d93fefbd398.json","parameterValues":[]}