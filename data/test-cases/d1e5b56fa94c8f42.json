{"uid":"d1e5b56fa94c8f42","name":"Create Protocol for microbial residue verification for non split","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_create_microbial_residue_verification_protocol_direct_indirect_custom_non_split","historyId":"fac8b06e4a8b63d345d4527537c02b46","time":{"start":1709039263773,"stop":1709039267439,"duration":3666},"description":"This test case tests API to Create Protocol microbial residue verification for non split when select custom of both direct and indirect and validate the limits","descriptionHtml":"<p>This test case tests API to Create Protocol microbial residue verification for non split when select custom of both direct and indirect and validate the limits</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"AcceptanceCriteriaForAllSelectedEquipment\",\"where\":{\"domain\":\"OnDemandProtocol\",\"action\":\"Modify\"},\"name\":\"Protocol\",\"message\":\"Acceptance Criteria needs to be defined for all selected Equipment\",\"action\":\"Modify\",\"domain\":\"OnDemandProtocol\"}}","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002CCA3616490>\n\n    @allure.title(\"Create Protocol for microbial residue verification for non split\")\n    @allure.description(\"This test case tests API to Create Protocol microbial residue verification for non split when \"\n                        \"select custom of both direct and indirect and validate the limits\")\n    @allure.link(\"https://app.clickup.com/t/86cu0c0tn\")\n    @pytest.mark.formulation\n    @pytest.mark.create_microbial_residue_verification_protocol_direct_indirect_custom_non_split\n    def test_create_microbial_residue_verification_protocol_direct_indirect_custom_non_split(self):\n        columns_prod = [\"production_id\"]\n        productions_list = Excel.read_excel_columns(const.get_master_data(), \"config\", columns_prod)\n        data = {\"production\": productions_list[\"production_id\"], \"description\": \"Automation Protocol\"}\n        protocol_detail, data = self.setup_protocol(data)\n        self.multi_protocol.PROTOCOL = json.loads(protocol_detail)\n        data.update({\"protocol_name\": None})\n        protocol_id = self.multi_protocol.get_protocol_id(data)\n        data.update({\"protocol_id\": protocol_id, \"microbial_verification\": True})\n        data.update({\"update_verification_protocol\": protocol_verification_payload(data)})\n        get_equipment = self.protocol_equipment.get_equipment_protocol(data)[\"response\"]\n    \n        self.protocol_microbial.PROTOCOL_MICROBIAL_EQUIPMENT = json.loads(get_equipment)\n    \n        self.protocol_verification.update_inspection_protocol(data)\n    \n        direct_equipments_sal = self.protocol_microbial.get_microbial_custom_direct_contact_surface_area_details(data)[\n            \"response\"]\n        self.protocol_microbial.CUSTOM_DIRECT_MICROBIAL_EQUIPMENT = json.loads(direct_equipments_sal)\n        indirect_equipment_sal = \\\n            self.protocol_microbial.get_microbial_custom_indirect_contact_surface_area_details(data)[\n                \"response\"]\n        self.protocol_microbial.CUSTOM_INDIRECT_MICROBIAL_EQUIPMENT = json.loads(indirect_equipment_sal)\n    \n        direct_equipment = self.protocol_microbial.custom_direct_update_policy_payload()[\"bioburden\"][\"equipments\"]\n        indirect_equipment = self.protocol_microbial.custom_indirect_update_policy_payload()[\"bioburden\"][\"equipments\"]\n    \n        direct_endo_equipment = self.protocol_microbial.custom_direct_update_policy_payload()[\"endotoxin\"][\"equipments\"]\n        indirect_endo_equipment = self.protocol_microbial.custom_indirect_update_policy_payload()[\"endotoxin\"][\n            \"equipments\"]\n    \n        data.update({\"direct_equipment\": direct_equipment, \"indirect_equipment\": indirect_equipment,\n                     \"direct_endo_equipment\": direct_endo_equipment, \"indirect_endo_equipment\": indirect_endo_equipment,\n                     \"direct_policy\": \"custom\", \"indirect_policy\": \"custom\",\n                     \"protocol_eq\": self.protocol_microbial.PROTOCOL_EQUIPMENT})\n        data.update(\n            {\"update_microbial_residue_verification_payload\": update_microbial_residue_verification_payload(data)})\n    \n>       updated_data = self.protocol_microbial.update_microbial_residue_verification_protocol(data)[\"response\"]\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:3465: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\protocols\\protocol_microbial_residue_verification.py:316: in update_microbial_residue_verification_protocol\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [400]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"AcceptanceCriteriaForAllSelectedEquipment\",\"where\":{\"domain\":\"OnDemandProtocol\",\"action\":\"Modify\"},\"name\":\"Protocol\",\"message\":\"Acceptance Criteria needs to be defined for all selected Equipment\",\"action\":\"Modify\",\"domain\":\"OnDemandProtocol\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":36,"retriesStatusChange":true,"beforeStages":[{"name":"login","time":{"start":1709038682534,"stop":1709038683052,"duration":518},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1709038683052,"stop":1709038683859,"duration":807},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"create_microbial_residue_verification_protocol_direct_indirect_custom_non_split"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"28604-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu0c0tn","url":"https://app.clickup.com/t/86cu0c0tn","type":"link"}],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ad62e1f3147a33ae","status":"passed","time":{"start":1708873387502,"stop":1708873394709,"duration":7207}},{"uid":"6d95e26329695b77","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708872961613,"stop":1708872961613,"duration":0}},{"uid":"b888e498456434ee","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708872541567,"stop":1708872541567,"duration":0}},{"uid":"151f107f61277d0c","status":"passed","time":{"start":1708598757021,"stop":1708598766585,"duration":9564}},{"uid":"967d5f561b58ca6b","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708597471239,"stop":1708597471239,"duration":0}},{"uid":"451fc03c513cda8e","status":"passed","time":{"start":1708596898195,"stop":1708596907767,"duration":9572}},{"uid":"7220f9d224df59ab","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595632870,"stop":1708595632870,"duration":0}},{"uid":"90f4bc5f625dd764","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708595191485,"stop":1708595191485,"duration":0}},{"uid":"cc56918e6b924f1d","status":"passed","time":{"start":1708589318246,"stop":1708589321036,"duration":2790}},{"uid":"b4328708a30cd5ca","status":"passed","time":{"start":1708587083491,"stop":1708587088251,"duration":4760}},{"uid":"db7482060a5526a","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708586198086,"stop":1708586198086,"duration":0}},{"uid":"cd4124e96065b64","status":"passed","time":{"start":1708521305533,"stop":1708521313961,"duration":8428}},{"uid":"5d5aba1a31815b87","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520657519,"stop":1708520657519,"duration":0}},{"uid":"746b3cd7f18c082f","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708520580572,"stop":1708520580572,"duration":0}},{"uid":"6773e83b71bce158","status":"passed","time":{"start":1708519650460,"stop":1708519659058,"duration":8598}},{"uid":"2a3ee587abee3f7b","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708519088760,"stop":1708519088760,"duration":0}},{"uid":"90488a908e501fc3","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1708519071014,"stop":1708519071014,"duration":0}},{"uid":"fa2950db5d118030","status":"passed","time":{"start":1708508774987,"stop":1708508777558,"duration":2571}},{"uid":"c0f59ba94666fde4","status":"passed","time":{"start":1708258578158,"stop":1708258582985,"duration":4827}},{"uid":"78631be89b4115e5","status":"passed","time":{"start":1708246758443,"stop":1708246761165,"duration":2722}},{"uid":"9bf7a67d2618d477","status":"passed","time":{"start":1708241908963,"stop":1708241912097,"duration":3134}},{"uid":"874d251d0c49c291","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1708241643961,"stop":1708241643961,"duration":0}},{"uid":"55067e524a576e45","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708235045978,"stop":1708235045978,"duration":0}},{"uid":"94038e8ca44eecd4","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708232037410,"stop":1708232037410,"duration":0}},{"uid":"bf003def0828166c","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231704883,"stop":1708231704883,"duration":0}},{"uid":"b290217864c56fb1","status":"skipped","statusDetails":"Skipped: test case for Formulation only","time":{"start":1708231509554,"stop":1708231509554,"duration":0}},{"uid":"ae72cc2aec6dde6","status":"passed","time":{"start":1707903243239,"stop":1707903246121,"duration":2882}},{"uid":"d198cb3e5f6baafb","status":"passed","time":{"start":1707816323503,"stop":1707816326274,"duration":2771}},{"uid":"e580942f3cff8d20","status":"passed","time":{"start":1707801454782,"stop":1707801457800,"duration":3018}},{"uid":"402f801c164d7b94","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707800941593,"stop":1707800941593,"duration":0}},{"uid":"3c7620719dd9cbcb","status":"passed","time":{"start":1707800551943,"stop":1707800555539,"duration":3596}},{"uid":"f2c9b29088cb2f12","status":"broken","statusDetails":"NameError: name 'update_microbial_residue_verification_payload' is not defined","time":{"start":1707799808158,"stop":1707799808659,"duration":501}},{"uid":"f3bb90b91483a131","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799372372,"stop":1707799372372,"duration":0}},{"uid":"612fa652d89e1848","status":"failed","statusDetails":"AssertionError: 419","time":{"start":1707799327244,"stop":1707799327244,"duration":0}},{"uid":"9c0b54e327f4ae26","status":"failed","statusDetails":"AssertionError: {\"message\":[[\"username must match /^[\\\\w#.\\\\/-]{1,100}$/ regular expression\"]]}","time":{"start":1707799308337,"stop":1707799308337,"duration":0}},{"uid":"9cf29bd772143fd8","status":"passed","time":{"start":1707719854465,"stop":1707719857307,"duration":2842}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["multi_production_protocol","scenario","create_microbial_residue_verification_protocol_direct_indirect_custom_non_split","formulation"]},"source":"d1e5b56fa94c8f42.json","parameterValues":[]}