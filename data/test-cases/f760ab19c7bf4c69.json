{"uid":"f760ab19c7bf4c69","name":"Test SAL of Production on Equipments for LD50 Criteria in API Facility","fullName":"tests.scenarios.test_limit_equipments.TestLimitsOnEquipments#test_validate_api_equipment_sal_ld50","historyId":"b541880bde6dcaa1b7023aca47cea4d9","time":{"start":1708235027070,"stop":1708235027903,"duration":833},"description":"This test case tests SAL when LD50 Criteria in Policy is selected for all production mapped to Equipment in API Facility","descriptionHtml":"<p>This test case tests SAL when LD50 Criteria in Policy is selected for all production mapped to Equipment in API Facility</p>\n","status":"failed","statusMessage":"AssertionError: PRD-INT-1 #N/A Not Equal 1.5625e-05","statusTrace":"self = <test_limit_equipments.TestLimitsOnEquipments object at 0x000001EBDF3F86D0>\n\n    @allure.title(\"Test SAL of Production on Equipments for LD50 Criteria in API Facility\")\n    @allure.description(\"This test case tests SAL when LD50 Criteria in Policy is selected\"\n                        \" for all production mapped to Equipment in API Facility\")\n    @allure.link(\"https://app.clickup.com/t/85zrj1v0j\")\n    @pytest.mark.validate_api_equipment_sal_ld50\n    @pytest.mark.active\n    @pytest.mark.v41x\n    def test_validate_api_equipment_sal_ld50(self):\n        policy_data = {\"useDosage\": False, \"useToxicity\": False, \"useARL\": False, \"useLd50\": True}\n        get_policy = json.loads(self.update_active_policy.test_get_active_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        update_policy = create_cleaning_limit_policy_active_pyload(get_policy, policy_data)\n        data = {\"update_policy_payload\": update_policy}\n        if get_policy != update_policy[\"data\"]:\n            self.update_active_policy.test_update_active_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n        for equipment in EQUIPMENT_LIST[\"equipment_id\"]:\n            data.update({\"equipment\": equipment})\n            sheet_name = equipment\n            read_excel_column = [\"Equipment ID\", \"sal_ld50_mg_sqcm\"]\n            manually_calculated_limit, lowest_manually_calculated_sal = self.read_excel_sal(sheet_name,\n                                                                                            read_excel_column)\n            sal = self.get_equipment.get_production_sal_each_equipment(data)\n            lowest_sal = self.get_equipment.get_equipment_lowest_sal(data)\n>           compare_sal(sal, manually_calculated_limit, read_excel_column, self.ERROR_MESSAGE)\n\ntests\\scenarios\\test_limit_equipments.py:594: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\common_methods.py:22: in compare_sal\n    compare(sal_application[i], n, i)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = '#N/A', sal2 = 1.5625e-05, error_message = 'PRD-INT-1'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n                assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\n            else:\n                sal1 = round(sal1, 3)\n                sal2 = round(sal2, 3)\n                tolerance = calculate_tolerance(sal1)\n                assert abs(sal1 - sal2) < tolerance, error_message + \" \" + str(sal1) + \" Not Equal \" + str(sal2)\n        else:\n>           assert sal1 == sal2, error_message + \" \" + str(sal1) + \" Not Equal \" + str(sal2)\nE           AssertionError: PRD-INT-1 #N/A Not Equal 1.5625e-05\n\nutil\\common_methods.py:61: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708234851959,"stop":1708234852413,"duration":454},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708234852413,"stop":1708234853261,"duration":848},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"This method will setup cleaning limit policy","time":{"start":1708235023638,"stop":1708235024588,"duration":950},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"v41x"},{"name":"tag","value":"active"},{"name":"tag","value":"validate_api_equipment_sal_ld50"},{"name":"tag","value":"equipment_limits"},{"name":"tag","value":"limits"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_limit_equipments"},{"name":"subSuite","value":"TestLimitsOnEquipments"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"22000-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_limit_equipments"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zrj1v0j","url":"https://app.clickup.com/t/85zrj1v0j","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["equipment_limits","v41x","active","validate_api_equipment_sal_ld50","limits"]},"source":"f760ab19c7bf4c69.json","parameterValues":[]}