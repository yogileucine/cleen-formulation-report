{"uid":"9f362a8a4236d241","name":"Validate the active residue verification final summary page","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_validate_final_summary_active_residue_verification_details","historyId":"82b9cae85dafc2d05ad570341af53acd","time":{"start":1708873669029,"stop":1708873678321,"duration":9292},"description":"This test case tests API to Create Protocol for active residue verification and validate the final summary details","descriptionHtml":"<p>This test case tests API to Create Protocol for active residue verification and validate the final summary details</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000002112A5C71D0>\n\n            self.protocol_microbial.compare_samples_swab_rinse_surface_area_microbial(data)\n    \n    @allure.title(\"Validate the active residue verification final summary page\")\n    @allure.description(\"This test case tests API to Create Protocol for active residue verification and validate the \"\n                        \"final summary details\")\n    @allure.link(\"https://app.clickup.com/t/86cumczf3\")\n    @pytest.mark.formulation\n    @pytest.mark.validate_final_summary_active_residue_verification_details\n    def test_validate_final_summary_active_residue_verification_details(self):\n        data = self.test_active_select_production_group_multi_production_protocol()\n        no_of_runs_payload = number_of_runs_sample_limits()\n    \n        data.update({\"no_of_runs_payload\": no_of_runs_payload})\n    \n        self.protocol_common_method.update_protocol_residue_verification_sample_limits_run(data)\n    \n        final_summary = self.protocol_common_method.get_active_final_summary_details(data)[\"response\"]\n    \n        equipments_id = self.protocol_common_method.get_protocol_equipments_ids(data)\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"],\n                         \"columns\": [\"sample type\", \"contact type\", \"sample id\", \"swab_limit_ppm\", \"rinse_limit_ppm\"],\n                         \"sample_type\": \"Chemical\", \"contact_type\": None})\n            sample_limits = json.loads(final_summary)[\"result\"]\n            data.update({\"sample_profile\": sample_limits})\n            self.active_criteria.compare_samples_swab_rinse_surface_area_active_summary(data)\n        eq_index = 0\n        for i in equipments_id:\n            data.update({\"equipment\": i[\"equipment_id\"], \"external_id\": i[\"external_id\"], \"type\": \"Chemical\"})\n            sample_limits = json.loads(final_summary)[\"result\"]\n>           data.update({\"sample_profile\": sample_limits, \"eq_length\": eq_index})\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:4870: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'actives_verification': True, 'add_new_protocol_payload': {'authorId': 6, 'description': 'Automation Protocol', 'exte...columns': ['sample type', 'contact type', 'sample id', 'swab_limit_ppm', 'rinse_limit_ppm'], 'contact_type': None, ...}\n\n    @staticmethod\n    def compare_samples_swab_rinse_surface_area_summary(data):\n        columns = [\"sampling area (sqcm)\", \"rinse_volume\"]\n        sheet_name = data[\"external_id\"] + \"_samples\"\n        sample_area = Excel.read_excel_columns(const.get_master_data(), sheet_name, columns)\n        result_list = [item for item in sample_area[\"rinse_volume\"] if item != 'a']\n        index = 0\n        rinse_index = 0\n        for profile in data['sample_profile']['samplingProfiles'][data[\"eq_length\"]]['samplingProfile'].values():\n            for sample in profile['samples'].values():\n                if sample.get('type') == data[\"type\"]:\n                    surface_area = sample.get('surfaceArea')\n                    rinse_volume = sample.get('rinseVolume')\n                    if surface_area is not None:\n>                       assert round(surface_area, 3) == round(sample_area[\"sampling area (sqcm)\"][index], 3)\nE                       AssertionError\n\ntests\\unit\\protocols\\protocol_active_acceptance_criteria.py:270: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708872966991,"stop":1708872967218,"duration":227},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708872967219,"stop":1708872967968,"duration":749},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_final_summary_active_residue_verification_details"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"4928-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cumczf3","url":"https://app.clickup.com/t/86cumczf3","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multi_production_protocol","scenario","formulation","validate_final_summary_active_residue_verification_details"]},"source":"9f362a8a4236d241.json","parameterValues":[]}