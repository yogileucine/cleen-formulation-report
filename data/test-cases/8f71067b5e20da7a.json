{"uid":"8f71067b5e20da7a","name":"Validate master data snapshot report for cleaning procedure eq mapping","fullName":"tests.scenarios.test_audit_portal_formulation_facility.TestAuditPortalLimits#test_validate_master_data_snapshot_report_cleaning_procedure_eq_mapping","historyId":"8946b4e4bb6891a22ce56cf0b8d57038","time":{"start":1707799349709,"stop":1707799349939,"duration":230},"description":"This test case test API to validate the master data snapshot report for cleaning procedure eq mapping with excel file data","descriptionHtml":"<p>This test case test API to validate the master data snapshot report for cleaning procedure eq mapping with excel file data</p>\n","status":"failed","statusMessage":"AssertionError: There are 21 mismatched rows.\nassert False","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x00000125BAF8EED0>\n\n    @allure.title(\"Validate master data snapshot report for cleaning procedure eq mapping\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for cleaning procedure \"\n                        \"eq mapping with excel file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9r040\")\n    @pytest.mark.validate_master_data_snapshot_report_cleaning_procedure_eq_mapping\n    def test_validate_master_data_snapshot_report_cleaning_procedure_eq_mapping(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"CleaningProcedureEquipmentMapping\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"name\": \"For All Products\", \"externalId\": \"Equipment Id\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"cp eq mapping\", usecols='A:B', nrows=20)\n            allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df = master_data_snapshot[columns_mapping.keys()]\n    \n            excel_df = excel_data[columns_mapping.values()]\n            allure.attach(excel_df.to_html(), name=\"excel_df\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n            excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n            allure.attach(excel_df_sorted.to_html(), name=\"excel_df_sort\", attachment_type=allure.attachment_type.HTML)\n            allure.attach(api_df_sorted.to_html(), name=\"api_sort\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n    \n            max_rows = max(len(api_df_sorted), len(excel_df_sorted))\n    \n            numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n            string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n            for row in range(max_rows):\n                if row >= len(excel_df_sorted):\n                    mismatched_rows.append(row)\n                    continue\n                comparison_successful = True\n                for column in string_columns:\n                    api_value = api_df_sorted.loc[row, column]\n                    excel_value = excel_df_sorted.loc[row, column]\n    \n                    if api_value != excel_value:\n                        mismatched_rows.append(row)\n                        break\n                    else:\n                        compare_portal(api_value, excel_value, column, row)\n    \n                for column in numeric_columns:\n                    api_value = api_df_sorted.loc[row, column]\n                    excel_value = excel_df_sorted.loc[row, column]\n                    comparison_successful &= compare_portal(api_value, excel_value, column, row)\n                    if not comparison_successful:\n                        if math.isnan(api_value) and math.isnan(excel_value):\n                            continue\n                        mismatched_rows.append(row)\n                        break\n    \n            merged_df = pd.concat([api_df_sorted, excel_df_sorted], axis=1, keys=['API Data', 'Excel Data'])\n            allure.attach(merged_df.to_html(), name=\"merged_data\", attachment_type=allure.attachment_type.HTML)\n            allure.attach(str(mismatched_rows), name=\"mismatched_rows\", attachment_type=allure.attachment_type.HTML)\n    \n            if len(mismatched_rows) != 0:\n>               assert assert_flag, f\"There are {len(mismatched_rows)} mismatched rows.\"\nE               AssertionError: There are 21 mismatched rows.\nE               assert False\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:974: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1707799338089,"stop":1707799338563,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1707799338563,"stop":1707799339608,"duration":1045},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"description":"This test case test API to validate the master data snapshot report for cleaning procedure eq mapping with excel file data","status":"failed","statusMessage":"AssertionError: There are 21 mismatched rows.\nassert False","statusTrace":"self = <test_audit_portal_formulation_facility.TestAuditPortalLimits object at 0x00000125BAF8EED0>\n\n    @allure.title(\"Validate master data snapshot report for cleaning procedure eq mapping\")\n    @allure.description(\"This test case test API to validate the master data snapshot report for cleaning procedure \"\n                        \"eq mapping with excel file data\")\n    @allure.link(\"https://app.clickup.com/t/85zt9r040\")\n    @pytest.mark.validate_master_data_snapshot_report_cleaning_procedure_eq_mapping\n    def test_validate_master_data_snapshot_report_cleaning_procedure_eq_mapping(self):\n        data = {}\n        mismatched_rows = []\n        assert_flag = False\n    \n        data.update({\"sheet_name\": \"CleaningProcedureEquipmentMapping\"})\n    \n        master_data_snapshot = self.get_audit_portal.test_config_new_master_data_snapshot_report(data)[\"response\"]\n    \n        if master_data_snapshot:\n            master_data_snapshot = pd.json_normalize(master_data_snapshot)\n    \n            columns_mapping = {\"name\": \"For All Products\", \"externalId\": \"Equipment Id\"}\n    \n            excel_data = pd.read_excel(const.get_master_data(), sheet_name=\"cp eq mapping\", usecols='A:B', nrows=20)\n            allure.attach(excel_data.to_html(), name=\"excel_data\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df = master_data_snapshot[columns_mapping.keys()]\n    \n            excel_df = excel_data[columns_mapping.values()]\n            allure.attach(excel_df.to_html(), name=\"excel_df\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df_sorted = api_df.sort_values(by=list(columns_mapping.keys())).reset_index(drop=True)\n            excel_df_sorted = excel_df.sort_values(by=list(columns_mapping.values())).reset_index(drop=True)\n    \n            allure.attach(excel_df_sorted.to_html(), name=\"excel_df_sort\", attachment_type=allure.attachment_type.HTML)\n            allure.attach(api_df_sorted.to_html(), name=\"api_sort\", attachment_type=allure.attachment_type.HTML)\n    \n            api_df_sorted = api_df_sorted.rename(columns=columns_mapping)\n    \n            max_rows = max(len(api_df_sorted), len(excel_df_sorted))\n    \n            numeric_columns = api_df_sorted.select_dtypes(include=np.number).columns\n            string_columns = api_df_sorted.select_dtypes(include=object).columns\n    \n            for row in range(max_rows):\n                if row >= len(excel_df_sorted):\n                    mismatched_rows.append(row)\n                    continue\n                comparison_successful = True\n                for column in string_columns:\n                    api_value = api_df_sorted.loc[row, column]\n                    excel_value = excel_df_sorted.loc[row, column]\n    \n                    if api_value != excel_value:\n                        mismatched_rows.append(row)\n                        break\n                    else:\n                        compare_portal(api_value, excel_value, column, row)\n    \n                for column in numeric_columns:\n                    api_value = api_df_sorted.loc[row, column]\n                    excel_value = excel_df_sorted.loc[row, column]\n                    comparison_successful &= compare_portal(api_value, excel_value, column, row)\n                    if not comparison_successful:\n                        if math.isnan(api_value) and math.isnan(excel_value):\n                            continue\n                        mismatched_rows.append(row)\n                        break\n    \n            merged_df = pd.concat([api_df_sorted, excel_df_sorted], axis=1, keys=['API Data', 'Excel Data'])\n            allure.attach(merged_df.to_html(), name=\"merged_data\", attachment_type=allure.attachment_type.HTML)\n            allure.attach(str(mismatched_rows), name=\"mismatched_rows\", attachment_type=allure.attachment_type.HTML)\n    \n            if len(mismatched_rows) != 0:\n>               assert assert_flag, f\"There are {len(mismatched_rows)} mismatched rows.\"\nE               AssertionError: There are 21 mismatched rows.\nE               assert False\n\ntests\\scenarios\\test_audit_portal_formulation_facility.py:974: AssertionError","steps":[],"attachments":[{"uid":"ba29a86dc35ce632","name":"excel_data","source":"ba29a86dc35ce632.html","type":"text/html","size":1801},{"uid":"98ed00d9b69c1d76","name":"excel_df","source":"98ed00d9b69c1d76.html","type":"text/html","size":1801},{"uid":"3ea2cca825c98984","name":"excel_df_sort","source":"3ea2cca825c98984.html","type":"text/html","size":1801},{"uid":"1d28a4588ba9b10","name":"api_sort","source":"1d28a4588ba9b10.html","type":"text/html","size":1866},{"uid":"2c30b1fa49b8697f","name":"merged_data","source":"2c30b1fa49b8697f.html","type":"text/html","size":2950},{"uid":"4d0ab56cf47a1580","name":"mismatched_rows","source":"4d0ab56cf47a1580.html","type":"text/html","size":74}],"parameters":[],"attachmentsCount":6,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[],"labels":[{"name":"tag","value":"validate_master_data_snapshot_report_cleaning_procedure_eq_mapping"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"audit_portal_limits"},{"name":"tag","value":"scenario"},{"name":"tag","value":"second"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_audit_portal_formulation_facility"},{"name":"subSuite","value":"TestAuditPortalLimits"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"25240-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_audit_portal_formulation_facility"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/85zt9r040","url":"https://app.clickup.com/t/85zt9r040","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["validate_master_data_snapshot_report_cleaning_procedure_eq_mapping","scenario","run(order=1)","audit_portal_limits","second"]},"source":"8f71067b5e20da7a.json","parameterValues":[]}