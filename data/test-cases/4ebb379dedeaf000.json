{"uid":"4ebb379dedeaf000","name":"Test the swab & rinse limit of equipment map to production for Intermediate","fullName":"tests.scenarios.test_chemical_sample_limit_production.TestChemicalSampleLimitProduction#test_validate_intermediate_swab_rinse_sampling_limit_for_all_ppm_sqin","historyId":"f7d12b0a1291eff6ab82eda72fd0db77","time":{"start":1708231933877,"stop":1708231936975,"duration":3098},"description":"This test case test the swab & rinse sample limit of equipment map with production forIntermediate and swab & rinse sample unit is in ppm","descriptionHtml":"<p>This test case test the swab &amp; rinse sample limit of equipment map with production forIntermediate and swab &amp; rinse sample unit is in ppm</p>\n","status":"failed","statusMessage":"AssertionError: Automation Test #N/A Not Equal 7.40223955431755e-07","statusTrace":"self = <test_chemical_sample_limit_production.TestChemicalSampleLimitProduction object at 0x000001A8739C2350>\n\n    @allure.title(\"Test the swab & rinse limit of equipment map to production for Intermediate\")\n    @allure.description(\"This test case test the swab & rinse sample limit of equipment map with production for\"\n                        \"Intermediate and swab & rinse sample unit is in ppm\")\n    @allure.link(\"https://app.clickup.com/t/86ctyavee\")\n    @pytest.mark.active\n    @pytest.mark.intermidaiate_swab_rinse_limit\n    @pytest.mark.validate_intermediate_swab_rinse_sampling_limit_for_all_ppm_sqin\n    def test_validate_intermediate_swab_rinse_sampling_limit_for_all_ppm_sqin(self):\n        policy_data = {\"useSwabPerSampleLimit\": False, \"useRinsePerSampleLimit\": False, \"rinseSampleUnit\": \"ppm\",\n                       \"swabSampleUnit\": \"ppm\"}\n        data = {}\n        get_policy = json.loads(self.update_intermediate_policy.test_get_intermediate_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        swab_unit = get_policy[\"limitRepresentation\"][\"sampleLimits\"][\"swab\"][\"unit\"]\n        rinse_unit = get_policy[\"limitRepresentation\"][\"sampleLimits\"][\"rinse\"][\"unit\"]\n        update_policy = create_cleaning_limit_policy_intermediate_pyload(get_policy, policy_data)\n        data.update({\"update_intermediate_policy_payload\": update_policy})\n        data.update(self.DEFAULT_SURFACE_AREA_SQIN)\n        self.update_default_unit.test_update_default_unit(data)\n        data.update(self.DEFAULT_VOLUME)\n        self.update_default_unit.test_update_default_unit(data)\n        if get_policy != update_policy[\"data\"] or rinse_unit != \"ppm\" or swab_unit != \"ppm\":\n            self.update_intermediate_policy.test_update_intermediate_policy(data)\n            self.change_assessment.test_start_cleaning_assessment(scenario=True)\n            self.change_assessment.test_submit_approve_cleaning_assessment()\n    \n        production_id = PRODUCTION_LIST[\"intermediate_production_id\"]\n        for prod in production_id:\n            data.update({\"production_id\": prod})\n            swab_sheet_name = prod.lower() + \"_swab\"\n            rinse_sheet_name = prod.lower() + \"_rinse\"\n            swab_columns = [\"Equipment ID\", \"swab_limit_ppm\"]\n            rinse_columns = [\"Equipment ID\", \"rinse_limit_ppm\"]\n            manually_calculated_swab_limit = self.calculated_chemical_excel(swab_sheet_name, swab_columns)\n            manually_calculated_rinse_limit = self.calculated_chemical_excel(rinse_sheet_name, rinse_columns)\n            data.update({\"production\": prod})\n            swab_limit = self.get_production.get_production_swab_limit_each_equipment(data)\n            rinse_limit = self.get_production.get_production_rinse_limit_each_equipment(data)\n>           compare_chemical(swab_limit, manually_calculated_swab_limit, swab_columns, self.ERROR_MESSAGE)\n\ntests\\scenarios\\test_chemical_sample_limit_production.py:1425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutil\\common_methods.py:35: in compare_chemical\n    compare(swab_rinse[i], v, error_message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsal1 = '#N/A', sal2 = 7.40223955431755e-07, error_message = 'Automation Test'\n\n    def compare(sal1, sal2, error_message):\n        if sal1 != \"#N/A\" and sal2 != \"#N/A\":\n            if sal1 < 1:\n                length = (floor(log10(sal1)) - 1)\n            else:\n                length = 15 - len(str(int(sal1)))\n            if length < 0:\n                sal1 = (round(sal1, -length + 3))\n                sal2 = (round(sal2, -length + 3))\n                tolerance = calculate_tolerance(sal1)\n                assert abs(sal1 - sal2) < tolerance, error_message + f\" {sal1} Not Equal {sal2}\"\n            else:\n                sal1 = round(sal1, 3)\n                sal2 = round(sal2, 3)\n                tolerance = calculate_tolerance(sal1)\n                assert abs(sal1 - sal2) < tolerance, error_message + \" \" + str(sal1) + \" Not Equal \" + str(sal2)\n        else:\n>           assert sal1 == sal2, error_message + \" \" + str(sal1) + \" Not Equal \" + str(sal2)\nE           AssertionError: Automation Test #N/A Not Equal 7.40223955431755e-07\n\nutil\\common_methods.py:61: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708231831983,"stop":1708231832370,"duration":387},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708231832370,"stop":1708231833427,"duration":1057},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"This method will setup the cleaning limit policy for Formulation Facility","time":{"start":1708231843303,"stop":1708231844271,"duration":968},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"validate_intermediate_swab_rinse_sampling_limit_for_all_ppm_sqin"},{"name":"tag","value":"intermidaiate_swab_rinse_limit"},{"name":"tag","value":"active"},{"name":"tag","value":"chemical_sample_limit"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_chemical_sample_limit_production"},{"name":"subSuite","value":"TestChemicalSampleLimitProduction"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"38200-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_chemical_sample_limit_production"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86ctyavee","url":"https://app.clickup.com/t/86ctyavee","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["chemical_sample_limit","validate_intermediate_swab_rinse_sampling_limit_for_all_ppm_sqin","intermidaiate_swab_rinse_limit","active"]},"source":"4ebb379dedeaf000.json","parameterValues":[]}