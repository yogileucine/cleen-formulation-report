{"uid":"6107f1367c3c9f06","name":"Create Protocol and validate cleaning agent residue verification SAL","fullName":"tests.scenarios.test_multi_prodcution_protocol.TestMultiProductionProtocol#test_select_cleaning_agent_direct_indirect_based_on_policy_multi_production_protocol","historyId":"4b5d06b6e66e94c4cce5ab65b24261e7","time":{"start":1708236876200,"stop":1708236876466,"duration":266},"description":"This test case tests API to Create Protocol and validate cleaning agent residue verification SAL for based on policy for both direct and indirect","descriptionHtml":"<p>This test case tests API to Create Protocol and validate cleaning agent residue verification SAL for based on policy for both direct and indirect</p>\n","status":"failed","statusMessage":"AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\"}}","statusTrace":"self = <test_multi_prodcution_protocol.TestMultiProductionProtocol object at 0x000001ED138EED50>\n\n    @allure.title(\"Create Protocol and validate cleaning agent residue verification SAL\")\n    @allure.description(\"This test case tests API to Create Protocol and validate cleaning agent residue verification \"\n                        \"SAL for based on policy for both direct and indirect\")\n    @allure.link(\"https://app.clickup.com/t/86cu0bd9y\")\n    @pytest.mark.formulation\n    @pytest.mark.select_cleaning_agent_direct_indirect_based_on_policy_multi_production_protocol\n    def test_select_cleaning_agent_direct_indirect_based_on_policy_multi_production_protocol(self):\n        cleaning_agent_data = {}\n        policy_data = {\"useToxicity\": True, \"useARL\": True, \"salMassUnit\": \"mg\"}\n        get_policy = json.loads(self.update_cleaning_agent.test_get_cleaning_agent_cleaning_limit_policy())\n        get_policy = get_policy[\"policy\"]\n        sal_unit = get_policy[\"limitRepresentation\"][\"productAndEquipmentLimits\"][\"salMassUnit\"]\n        update_policy = create_cleaning_limit_policy_cleaning_agent_payload(get_policy, policy_data)\n        cleaning_agent_data.update({\"update_policy_payload\": update_policy})\n    \n        cleaning_agent_data.update({\"update_policy_payload\": update_policy})\n        cleaning_agent_data.update(self.DEFAULT_SURFACE_AREA_SQCM)\n        unit = self.update_default_unit.test_get_default_unit(cleaning_agent_data)[\"response\"]\n        unit = json.loads(unit)[\"default_units\"][\"unit\"]\n        if get_policy != update_policy[\"data\"] or sal_unit != \"mg\" or unit != \"sqcm\":\n            self.update_default_unit.test_update_default_unit(cleaning_agent_data)\n>           self.change_assessment.test_start_cleaning_assessment(scenario=True)\n\ntests\\scenarios\\test_multi_prodcution_protocol.py:725: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\unit\\change_assessment\\test_cleaning_assessment.py:32: in test_start_cleaning_assessment\n    status_200(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nresponse = <Response [409]>\n\n    def status_200(response):\n>       assert response.status_code == 200, response.text\nE       AssertionError: {\"error\":{\"errName\":\"GeneralTaskError\",\"where\":{\"domain\":\"FacilityCleaningEvaluation\",\"action\":\"Start\"},\"name\":\"No Production available\"}}\n\nutil\\validate_response.py:3: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login","time":{"start":1708236865235,"stop":1708236865545,"duration":310},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"get_facility","time":{"start":1708236865545,"stop":1708236866420,"duration":875},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"select_cleaning_agent_direct_indirect_based_on_policy_multi_production_protocol"},{"name":"tag","value":"formulation"},{"name":"tag","value":"multi_production_protocol"},{"name":"tag","value":"scenario"},{"name":"parentSuite","value":"tests.scenarios"},{"name":"suite","value":"test_multi_prodcution_protocol"},{"name":"subSuite","value":"TestMultiProductionProtocol"},{"name":"host","value":"DESKTOP-ESU2KLG"},{"name":"thread","value":"29484-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.scenarios.test_multi_prodcution_protocol"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"https://app.clickup.com/t/86cu0bd9y","url":"https://app.clickup.com/t/86cu0bd9y","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["select_cleaning_agent_direct_indirect_based_on_policy_multi_production_protocol","multi_production_protocol","scenario","formulation"]},"source":"6107f1367c3c9f06.json","parameterValues":[]}